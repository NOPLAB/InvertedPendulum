
Adorobo-Inverted-Pendulum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800a588  0800a588  0000b588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab04  0800ab04  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab04  0800ab04  0000bb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab0c  0800ab0c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab0c  0800ab0c  0000bb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab10  0800ab10  0000bb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ab14  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          000005b4  200001d8  200001d8  0000c1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000078c  2000078c  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001336f  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aaf  00000000  00000000  0001f573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00022028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6f  00000000  00000000  00023028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ddb2  00000000  00000000  00023c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d5a  00000000  00000000  00041a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1a12  00000000  00000000  000567a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001081b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005280  00000000  00000000  001081f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0010d478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a570 	.word	0x0800a570

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a570 	.word	0x0800a570

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <state_feedback_controller_step>:
static RT_MODEL rtM_;
RT_MODEL *const rtM = &rtM_;

/* Model step function */
real_T state_feedback_controller_step(real_T arg_y[2])
{
 8000c48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c4c:	b0b0      	sub	sp, #192	@ 0xc0
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
     *  Inport: '<Root>/y'
     *  Memory: '<Root>/Memory'
     *  Sum: '<S1>/Sum'
     *  UnitDelay: '<S1>/Unit Delay'
     */
    for (i = 0; i < 2; i++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000c58:	e05e      	b.n	8000d18 <state_feedback_controller_step+0xd0>
      tmp_2 = 0.0;
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
      for (i_0 = 0; i_0 < 5; i_0++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000c6c:	e023      	b.n	8000cb6 <state_feedback_controller_step+0x6e>
        tmp_2 += rtConstP.Cdmatrix_Gain[(i_0 << 1) + i] *
 8000c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000c72:	005a      	lsls	r2, r3, #1
 8000c74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c78:	4413      	add	r3, r2
 8000c7a:	4ab0      	ldr	r2, [pc, #704]	@ (8000f3c <state_feedback_controller_step+0x2f4>)
 8000c7c:	331e      	adds	r3, #30
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	4413      	add	r3, r2
 8000c82:	e9d3 0100 	ldrd	r0, r1, [r3]
          rtDW.UnitDelay_DSTATE[i_0];
 8000c86:	4aae      	ldr	r2, [pc, #696]	@ (8000f40 <state_feedback_controller_step+0x2f8>)
 8000c88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4413      	add	r3, r2
 8000c90:	e9d3 2300 	ldrd	r2, r3, [r3]
        tmp_2 += rtConstP.Cdmatrix_Gain[(i_0 << 1) + i] *
 8000c94:	f7ff fcb0 	bl	80005f8 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000ca0:	f7ff faf4 	bl	800028c <__adddf3>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
      for (i_0 = 0; i_0 < 5; i_0++) {
 8000cac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000cb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	ddd7      	ble.n	8000c6e <state_feedback_controller_step+0x26>
      }

      tmp[i] = arg_y[i] - (0.0 * rtDW.Memory_PreviousInput + tmp_2);
 8000cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8000ccc:	4b9c      	ldr	r3, [pc, #624]	@ (8000f40 <state_feedback_controller_step+0x2f8>)
 8000cce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	f7ff fc8d 	bl	80005f8 <__aeabi_dmul>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8000cea:	f7ff facf 	bl	800028c <__adddf3>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	4640      	mov	r0, r8
 8000cf4:	4649      	mov	r1, r9
 8000cf6:	f7ff fac7 	bl	8000288 <__aeabi_dsub>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8000d02:	00c9      	lsls	r1, r1, #3
 8000d04:	31c0      	adds	r1, #192	@ 0xc0
 8000d06:	4439      	add	r1, r7
 8000d08:	3968      	subs	r1, #104	@ 0x68
 8000d0a:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 2; i++) {
 8000d0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d12:	3301      	adds	r3, #1
 8000d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	dd9c      	ble.n	8000c5a <state_feedback_controller_step+0x12>
    }

    /* End of Sum: '<S1>/Sum2' */

    /* Gain: '<S1>/Ld matrix' */
    tmp_2 = tmp[1];
 8000d20:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000d24:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    tmp_3 = tmp[0];
 8000d28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000d2c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    for (i = 0; i < 5; i++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d36:	e055      	b.n	8000de4 <state_feedback_controller_step+0x19c>
      /* Sum: '<S1>/Sum1' incorporates:
       *  Gain: '<S1>/Bd matrix'
       *  Gain: '<S1>/Ld matrix'
       *  Memory: '<Root>/Memory'
       */
      tmp_0[i] = (rtConstP.Ldmatrix_Gain[i + 5] * tmp_2 +
 8000d38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d3c:	3305      	adds	r3, #5
 8000d3e:	4a7f      	ldr	r2, [pc, #508]	@ (8000f3c <state_feedback_controller_step+0x2f4>)
 8000d40:	3328      	adds	r3, #40	@ 0x28
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	4413      	add	r3, r2
 8000d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d4a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8000d4e:	f7ff fc53 	bl	80005f8 <__aeabi_dmul>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	4690      	mov	r8, r2
 8000d58:	4699      	mov	r9, r3
                  rtConstP.Ldmatrix_Gain[i] * tmp_3) + rtConstP.Bdmatrix_Gain[i]
 8000d5a:	4a78      	ldr	r2, [pc, #480]	@ (8000f3c <state_feedback_controller_step+0x2f4>)
 8000d5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d60:	3328      	adds	r3, #40	@ 0x28
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	4413      	add	r3, r2
 8000d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d6a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8000d6e:	f7ff fc43 	bl	80005f8 <__aeabi_dmul>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
      tmp_0[i] = (rtConstP.Ldmatrix_Gain[i + 5] * tmp_2 +
 8000d76:	4640      	mov	r0, r8
 8000d78:	4649      	mov	r1, r9
 8000d7a:	f7ff fa87 	bl	800028c <__adddf3>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4690      	mov	r8, r2
 8000d84:	4699      	mov	r9, r3
                  rtConstP.Ldmatrix_Gain[i] * tmp_3) + rtConstP.Bdmatrix_Gain[i]
 8000d86:	4a6d      	ldr	r2, [pc, #436]	@ (8000f3c <state_feedback_controller_step+0x2f4>)
 8000d88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d8c:	3319      	adds	r3, #25
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4413      	add	r3, r2
 8000d92:	e9d3 0100 	ldrd	r0, r1, [r3]
        * rtDW.Memory_PreviousInput;
 8000d96:	4b6a      	ldr	r3, [pc, #424]	@ (8000f40 <state_feedback_controller_step+0x2f8>)
 8000d98:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8000d9c:	f7ff fc2c 	bl	80005f8 <__aeabi_dmul>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
                  rtConstP.Ldmatrix_Gain[i] * tmp_3) + rtConstP.Bdmatrix_Gain[i]
 8000da4:	4640      	mov	r0, r8
 8000da6:	4649      	mov	r1, r9
 8000da8:	f7ff fa70 	bl	800028c <__adddf3>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
      tmp_0[i] = (rtConstP.Ldmatrix_Gain[i + 5] * tmp_2 +
 8000db0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8000db4:	00c9      	lsls	r1, r1, #3
 8000db6:	31c0      	adds	r1, #192	@ 0xc0
 8000db8:	4439      	add	r1, r7
 8000dba:	39b8      	subs	r1, #184	@ 0xb8
 8000dbc:	e9c1 2300 	strd	r2, r3, [r1]

      /* Gain: '<S1>/Ad matrix' */
      tmp_1[i] = 0.0;
 8000dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	33c0      	adds	r3, #192	@ 0xc0
 8000dc8:	443b      	add	r3, r7
 8000dca:	f1a3 0190 	sub.w	r1, r3, #144	@ 0x90
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 5; i++) {
 8000dda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dde:	3301      	adds	r3, #1
 8000de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	dda5      	ble.n	8000d38 <state_feedback_controller_step+0xf0>
    }

    /* Gain: '<S1>/Ad matrix' incorporates:
     *  UnitDelay: '<S1>/Unit Delay'
     */
    for (i = 0; i < 5; i++) {
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000df2:	e043      	b.n	8000e7c <state_feedback_controller_step+0x234>
      tmp_2 = rtDW.UnitDelay_DSTATE[i];
 8000df4:	4a52      	ldr	r2, [pc, #328]	@ (8000f40 <state_feedback_controller_step+0x2f8>)
 8000df6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e02:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
      for (i_0 = 0; i_0 < 5; i_0++) {
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000e0c:	e02d      	b.n	8000e6a <state_feedback_controller_step+0x222>
        tmp_1[i_0] += rtConstP.Admatrix_Gain[5 * i + i_0] * tmp_2;
 8000e0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	33c0      	adds	r3, #192	@ 0xc0
 8000e16:	443b      	add	r3, r7
 8000e18:	3b90      	subs	r3, #144	@ 0x90
 8000e1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8000e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	441a      	add	r2, r3
 8000e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a43      	ldr	r2, [pc, #268]	@ (8000f3c <state_feedback_controller_step+0x2f4>)
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	4413      	add	r3, r2
 8000e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e38:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8000e3c:	f7ff fbdc 	bl	80005f8 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4640      	mov	r0, r8
 8000e46:	4649      	mov	r1, r9
 8000e48:	f7ff fa20 	bl	800028c <__adddf3>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8000e54:	00c9      	lsls	r1, r1, #3
 8000e56:	31c0      	adds	r1, #192	@ 0xc0
 8000e58:	4439      	add	r1, r7
 8000e5a:	3990      	subs	r1, #144	@ 0x90
 8000e5c:	e9c1 2300 	strd	r2, r3, [r1]
      for (i_0 = 0; i_0 < 5; i_0++) {
 8000e60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000e64:	3301      	adds	r3, #1
 8000e66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000e6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	ddcd      	ble.n	8000e0e <state_feedback_controller_step+0x1c6>
    for (i = 0; i < 5; i++) {
 8000e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e76:	3301      	adds	r3, #1
 8000e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	ddb7      	ble.n	8000df4 <state_feedback_controller_step+0x1ac>
      }
    }

    /* Gain: '<Root>/State Feedback' */
    tmp_2 = 0.0;
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    for (i = 0; i < 5; i++) {
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000e96:	e03b      	b.n	8000f10 <state_feedback_controller_step+0x2c8>
      /* Sum: '<S1>/Sum3' */
      rtb_Sum3[i] = tmp_0[i] + tmp_1[i];
 8000e98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	33c0      	adds	r3, #192	@ 0xc0
 8000ea0:	443b      	add	r3, r7
 8000ea2:	3bb8      	subs	r3, #184	@ 0xb8
 8000ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	33c0      	adds	r3, #192	@ 0xc0
 8000eb0:	443b      	add	r3, r7
 8000eb2:	3b90      	subs	r3, #144	@ 0x90
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff f9e8 	bl	800028c <__adddf3>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8000ec4:	00c9      	lsls	r1, r1, #3
 8000ec6:	31c0      	adds	r1, #192	@ 0xc0
 8000ec8:	4439      	add	r1, r7
 8000eca:	3958      	subs	r1, #88	@ 0x58
 8000ecc:	e9c1 2300 	strd	r2, r3, [r1]

      /* Gain: '<Root>/State Feedback' incorporates:
       *  UnitDelay: '<S1>/Unit Delay'
       */
      tmp_2 += rtConstP.StateFeedback_Gain[i] * rtDW.UnitDelay_DSTATE[i];
 8000ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f3c <state_feedback_controller_step+0x2f4>)
 8000ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ed6:	3332      	adds	r3, #50	@ 0x32
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4413      	add	r3, r2
 8000edc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	@ (8000f40 <state_feedback_controller_step+0x2f8>)
 8000ee2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	4413      	add	r3, r2
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	f7ff fb83 	bl	80005f8 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000efa:	f7ff f9c7 	bl	800028c <__adddf3>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    for (i = 0; i < 5; i++) {
 8000f06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000f10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	ddbf      	ble.n	8000e98 <state_feedback_controller_step+0x250>
    }

    /* Gain: '<Root>/Gain1' */
    rtb_Gain1 = -tmp_2;
 8000f18:	f8d7 40b8 	ldr.w	r4, [r7, #184]	@ 0xb8
 8000f1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000f20:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8000f24:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98

    /* Outport: '<Root>/u' */
    rtY.u = rtb_Gain1;
 8000f28:	4906      	ldr	r1, [pc, #24]	@ (8000f44 <state_feedback_controller_step+0x2fc>)
 8000f2a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8000f2e:	e9c1 2300 	strd	r2, r3, [r1]
    int32_T i;

    /* Update for UnitDelay: '<S1>/Unit Delay' incorporates:
     *  Sum: '<S1>/Sum3'
     */
    for (i = 0; i < 5; i++) {
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000f38:	e01a      	b.n	8000f70 <state_feedback_controller_step+0x328>
 8000f3a:	bf00      	nop
 8000f3c:	0800a5a0 	.word	0x0800a5a0
 8000f40:	200001f8 	.word	0x200001f8
 8000f44:	20000228 	.word	0x20000228
      rtDW.UnitDelay_DSTATE[i] = rtb_Sum3[i];
 8000f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	33c0      	adds	r3, #192	@ 0xc0
 8000f50:	443b      	add	r3, r7
 8000f52:	3b58      	subs	r3, #88	@ 0x58
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	4821      	ldr	r0, [pc, #132]	@ (8000fe0 <state_feedback_controller_step+0x398>)
 8000f5a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8000f5e:	00c9      	lsls	r1, r1, #3
 8000f60:	4401      	add	r1, r0
 8000f62:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 5; i++) {
 8000f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	dde7      	ble.n	8000f48 <state_feedback_controller_step+0x300>
    }

    /* End of Update for UnitDelay: '<S1>/Unit Delay' */

    /* Update for Memory: '<Root>/Memory' */
    rtDW.Memory_PreviousInput = rtb_Gain1;
 8000f78:	4919      	ldr	r1, [pc, #100]	@ (8000fe0 <state_feedback_controller_step+0x398>)
 8000f7a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8000f7e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
   * been executed. The absolute time is the multiplication of "clockTick0"
   * and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
   * overflow during the application lifespan selected.
   */
  rtM->Timing.t[0] =
    ((time_T)(++rtM->Timing.clockTick0)) * rtM->Timing.stepSize0;
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <state_feedback_controller_step+0x39c>)
 8000f84:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000f88:	3201      	adds	r2, #1
  rtM->Timing.t[0] =
 8000f8a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    ((time_T)(++rtM->Timing.clockTick0)) * rtM->Timing.stepSize0;
 8000f8e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fab6 	bl	8000504 <__aeabi_ui2d>
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <state_feedback_controller_step+0x39c>)
 8000f9a:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
  rtM->Timing.t[0] =
 8000f9e:	4c11      	ldr	r4, [pc, #68]	@ (8000fe4 <state_feedback_controller_step+0x39c>)
 8000fa0:	f8d4 4128 	ldr.w	r4, [r4, #296]	@ 0x128
    ((time_T)(++rtM->Timing.clockTick0)) * rtM->Timing.stepSize0;
 8000fa4:	f7ff fb28 	bl	80005f8 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
  rtM->Timing.t[0] =
 8000fac:	e9c4 2300 	strd	r2, r3, [r4]
    /* The "clockTick1" counts the number of times the code of this task has
     * been executed. The resolution of this integer timer is 0.001, which is the step size
     * of the task. Size of "clockTick1" ensures timer will not overflow during the
     * application lifespan selected.
     */
    rtM->Timing.clockTick1++;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <state_feedback_controller_step+0x39c>)
 8000fb2:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8000fb6:	3201      	adds	r2, #1
 8000fb8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  }

  /* Copy value for root outport '<Root>/u' since it is accessed globally */
  arg_u = rtY.u;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <state_feedback_controller_step+0x3a0>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  return arg_u;
 8000fc6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8000fca:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fce:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd2:	eef0 0a67 	vmov.f32	s1, s15
 8000fd6:	37c0      	adds	r7, #192	@ 0xc0
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001f8 	.word	0x200001f8
 8000fe4:	20000230 	.word	0x20000230
 8000fe8:	20000228 	.word	0x20000228
 8000fec:	00000000 	.word	0x00000000

08000ff0 <state_feedback_controller_initialize>:

/* Model initialize function */
void state_feedback_controller_initialize(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* Registration code */
  {
    /* Setup solver object */
    rtsiSetSimTimeStepPtr(&rtM->solverInfo, &rtM->Timing.simTimeStep);
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 8000ff8:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8000ffc:	60d3      	str	r3, [r2, #12]
    rtsiSetTPtr(&rtM->solverInfo, &rtmGetTPtr(rtM));
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 8001000:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 8001002:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001006:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    rtsiSetStepSizePtr(&rtM->solverInfo, &rtM->Timing.stepSize0);
 800100a:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 800100c:	4a18      	ldr	r2, [pc, #96]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 800100e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001012:	6293      	str	r3, [r2, #40]	@ 0x28
    rtsiSetErrorStatusPtr(&rtM->solverInfo, (&rtmGetErrorStatus(rtM)));
 8001014:	4a16      	ldr	r2, [pc, #88]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 8001016:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 8001018:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    rtsiSetRTModelPtr(&rtM->solverInfo, rtM);
 800101c:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 800101e:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 8001020:	609a      	str	r2, [r3, #8]
  }

  rtsiSetSimTimeStep(&rtM->solverInfo, MAJOR_TIME_STEP);
 8001022:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
  rtsiSetIsMinorTimeStepWithModeChange(&rtM->solverInfo, false);
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
  rtsiSetIsContModeFrozen(&rtM->solverInfo, false);
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
  rtsiSetSolverName(&rtM->solverInfo,"FixedStepDiscrete");
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <state_feedback_controller_initialize+0x84>)
 800103e:	615a      	str	r2, [r3, #20]
  rtmSetTPtr(rtM, &rtM->Timing.tArray[0]);
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 8001042:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 8001044:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8001048:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
  rtM->Timing.stepSize0 = 0.001;
 800104c:	4908      	ldr	r1, [pc, #32]	@ (8001070 <state_feedback_controller_initialize+0x80>)
 800104e:	a306      	add	r3, pc, #24	@ (adr r3, 8001068 <state_feedback_controller_initialize+0x78>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	e9c1 2346 	strd	r2, r3, [r1, #280]	@ 0x118
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	f3af 8000 	nop.w
 8001068:	d2f1a9fc 	.word	0xd2f1a9fc
 800106c:	3f50624d 	.word	0x3f50624d
 8001070:	20000230 	.word	0x20000230
 8001074:	0800a588 	.word	0x0800a588

08001078 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 10);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	b29a      	uxth	r2, r3
 8001088:	230a      	movs	r3, #10
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	4803      	ldr	r0, [pc, #12]	@ (800109c <_write+0x24>)
 800108e:	f005 fbf9 	bl	8006884 <HAL_UART_Transmit>
	return len;
 8001092:	687b      	ldr	r3, [r7, #4]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200004a4 	.word	0x200004a4

080010a0 <MoveRightMotor>:

void MoveRightMotor(const float v) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	ed87 0a01 	vstr	s0, [r7, #4]
	float s = v;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]
	s = s > 1.0 ? 1.0 : s;
 80010ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	dd02      	ble.n	80010c6 <MoveRightMotor+0x26>
 80010c0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010c4:	e000      	b.n	80010c8 <MoveRightMotor+0x28>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	60fb      	str	r3, [r7, #12]
	s = s < -1.0 ? -1.0 : s;
 80010ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80010d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	d501      	bpl.n	80010e0 <MoveRightMotor+0x40>
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <MoveRightMotor+0xc8>)
 80010de:	e000      	b.n	80010e2 <MoveRightMotor+0x42>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	60fb      	str	r3, [r7, #12]

	if (s > 0) {
 80010e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	dd11      	ble.n	8001116 <MoveRightMotor+0x76>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // 右側 反転
 80010f2:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <MoveRightMotor+0xcc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, s * PRESCALER); // 右側 正転
 80010fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fe:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001170 <MoveRightMotor+0xd0>
 8001102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001106:	4b19      	ldr	r3, [pc, #100]	@ (800116c <MoveRightMotor+0xcc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110e:	ee17 2a90 	vmov	r2, s15
 8001112:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // 右側 正転
	} else {
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // 右側 反転
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // 右側 正転
	}
}
 8001114:	e022      	b.n	800115c <MoveRightMotor+0xbc>
	} else if (s < 0) {
 8001116:	edd7 7a03 	vldr	s15, [r7, #12]
 800111a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001122:	d513      	bpl.n	800114c <MoveRightMotor+0xac>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, - s * PRESCALER); // 右側 反転
 8001124:	edd7 7a03 	vldr	s15, [r7, #12]
 8001128:	eef1 7a67 	vneg.f32	s15, s15
 800112c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001170 <MoveRightMotor+0xd0>
 8001130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <MoveRightMotor+0xcc>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113c:	ee17 2a90 	vmov	r2, s15
 8001140:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // 右側 正転
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <MoveRightMotor+0xcc>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800114a:	e007      	b.n	800115c <MoveRightMotor+0xbc>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // 右側 反転
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <MoveRightMotor+0xcc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2200      	movs	r2, #0
 8001152:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // 右側 正転
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <MoveRightMotor+0xcc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	bf800000 	.word	0xbf800000
 800116c:	2000040c 	.word	0x2000040c
 8001170:	45c7f000 	.word	0x45c7f000

08001174 <MoveLeftMotor>:

void MoveLeftMotor(const float v) {
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	ed87 0a01 	vstr	s0, [r7, #4]
	float s = v;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]
	s = s > 1.0 ? 1.0 : s;
 8001182:	edd7 7a03 	vldr	s15, [r7, #12]
 8001186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800118a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	dd02      	ble.n	800119a <MoveLeftMotor+0x26>
 8001194:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001198:	e000      	b.n	800119c <MoveLeftMotor+0x28>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	60fb      	str	r3, [r7, #12]
	s = s < -1.0 ? -1.0 : s;
 800119e:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80011a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ae:	d501      	bpl.n	80011b4 <MoveLeftMotor+0x40>
 80011b0:	4b22      	ldr	r3, [pc, #136]	@ (800123c <MoveLeftMotor+0xc8>)
 80011b2:	e000      	b.n	80011b6 <MoveLeftMotor+0x42>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	60fb      	str	r3, [r7, #12]

	if (s > 0) {
 80011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	dd11      	ble.n	80011ea <MoveLeftMotor+0x76>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, s * PRESCALER); // 左側 正転
 80011c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001240 <MoveLeftMotor+0xcc>
 80011ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <MoveLeftMotor+0xd0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011da:	ee17 2a90 	vmov	r2, s15
 80011de:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0); // 左側 反転
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MoveLeftMotor+0xd0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, - s * PRESCALER); // 左側 反転
	} else {
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); // 左側 正転
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0); // 左側 反転
	}
}
 80011e8:	e022      	b.n	8001230 <MoveLeftMotor+0xbc>
	} else if (s < 0) {
 80011ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f6:	d513      	bpl.n	8001220 <MoveLeftMotor+0xac>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); // 左側 正転
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MoveLeftMotor+0xd0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, - s * PRESCALER); // 左側 反転
 8001200:	edd7 7a03 	vldr	s15, [r7, #12]
 8001204:	eef1 7a67 	vneg.f32	s15, s15
 8001208:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001240 <MoveLeftMotor+0xcc>
 800120c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <MoveLeftMotor+0xd0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001218:	ee17 2a90 	vmov	r2, s15
 800121c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800121e:	e007      	b.n	8001230 <MoveLeftMotor+0xbc>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); // 左側 正転
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <MoveLeftMotor+0xd0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0); // 左側 反転
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MoveLeftMotor+0xd0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	bf800000 	.word	0xbf800000
 8001240:	45c7f000 	.word	0x45c7f000
 8001244:	200003c0 	.word	0x200003c0

08001248 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == QEI_L_A_Pin || GPIO_Pin == QEI_L_B_Pin) {
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001258:	d002      	beq.n	8001260 <HAL_GPIO_EXTI_Callback+0x18>
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	2b80      	cmp	r3, #128	@ 0x80
 800125e:	d102      	bne.n	8001266 <HAL_GPIO_EXTI_Callback+0x1e>
		QEI_Encode(&hqei_left);
 8001260:	4807      	ldr	r0, [pc, #28]	@ (8001280 <HAL_GPIO_EXTI_Callback+0x38>)
 8001262:	f000 fd8d 	bl	8001d80 <QEI_Encode>
	}
	if (GPIO_Pin == QEI_R_A_Pin || GPIO_Pin == QEI_R_B_Pin) {
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	2b40      	cmp	r3, #64	@ 0x40
 800126a:	d002      	beq.n	8001272 <HAL_GPIO_EXTI_Callback+0x2a>
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d102      	bne.n	8001278 <HAL_GPIO_EXTI_Callback+0x30>
		QEI_Encode(&hqei_right);
 8001272:	4804      	ldr	r0, [pc, #16]	@ (8001284 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001274:	f000 fd84 	bl	8001d80 <QEI_Encode>
	}
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200005d8 	.word	0x200005d8
 8001284:	20000600 	.word	0x20000600

08001288 <HAL_TIM_PeriodElapsedCallback>:
//		duty_ratio = rx_data;
//		HAL_UART_Receive_DMA(&huart2, uart_rx, 8);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4aaf      	ldr	r2, [pc, #700]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	f040 813d 	bne.w	8001514 <HAL_TIM_PeriodElapsedCallback+0x28c>
		if (start) {
 800129a:	4bae      	ldr	r3, [pc, #696]	@ (8001554 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8138 	beq.w	8001514 <HAL_TIM_PeriodElapsedCallback+0x28c>
			HAL_ADC_Start(&hadc1);
 80012a4:	48ac      	ldr	r0, [pc, #688]	@ (8001558 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012a6:	f001 fb29 	bl	80028fc <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80012aa:	210a      	movs	r1, #10
 80012ac:	48aa      	ldr	r0, [pc, #680]	@ (8001558 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012ae:	f001 fc11 	bl	8002ad4 <HAL_ADC_PollForConversion>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <HAL_TIM_PeriodElapsedCallback+0x3e>
				ad = HAL_ADC_GetValue(&hadc1); // 10bit
 80012b8:	48a7      	ldr	r0, [pc, #668]	@ (8001558 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012ba:	f001 fcd9 	bl	8002c70 <HAL_ADC_GetValue>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4ba6      	ldr	r3, [pc, #664]	@ (800155c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80012c4:	801a      	strh	r2, [r3, #0]
			}
			HAL_ADC_Stop(&hadc1);
 80012c6:	48a4      	ldr	r0, [pc, #656]	@ (8001558 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012c8:	f001 fbce 	bl	8002a68 <HAL_ADC_Stop>

			enc_left += -QEI_GetPulses(&hqei_left);
 80012cc:	48a4      	ldr	r0, [pc, #656]	@ (8001560 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80012ce:	f000 fd36 	bl	8001d3e <QEI_GetPulses>
 80012d2:	4603      	mov	r3, r0
 80012d4:	425a      	negs	r2, r3
 80012d6:	4ba3      	ldr	r3, [pc, #652]	@ (8001564 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4aa1      	ldr	r2, [pc, #644]	@ (8001564 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80012de:	6013      	str	r3, [r2, #0]
			QEI_Reset(&hqei_left);
 80012e0:	489f      	ldr	r0, [pc, #636]	@ (8001560 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80012e2:	f000 fd1c 	bl	8001d1e <QEI_Reset>
			enc_right += QEI_GetPulses(&hqei_right);
 80012e6:	48a0      	ldr	r0, [pc, #640]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80012e8:	f000 fd29 	bl	8001d3e <QEI_GetPulses>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4b9f      	ldr	r3, [pc, #636]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a9d      	ldr	r2, [pc, #628]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80012f6:	6013      	str	r3, [r2, #0]
			QEI_Reset(&hqei_right);
 80012f8:	489b      	ldr	r0, [pc, #620]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80012fa:	f000 fd10 	bl	8001d1e <QEI_Reset>

			theta = -(float) (ad - zero_ad) * ADV_TO_RAD; // nop version
 80012fe:	4b97      	ldr	r3, [pc, #604]	@ (800155c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b9a      	ldr	r3, [pc, #616]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	eef1 7a67 	vneg.f32	s15, s15
 8001316:	ee17 3a90 	vmov	r3, s15
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f914 	bl	8000548 <__aeabi_f2d>
 8001320:	a37f      	add	r3, pc, #508	@ (adr r3, 8001520 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff f967 	bl	80005f8 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc39 	bl	8000ba8 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	4a8e      	ldr	r2, [pc, #568]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800133a:	6013      	str	r3, [r2, #0]
			dtheta = (theta - theta_pre) / DT;
 800133c:	4b8d      	ldr	r3, [pc, #564]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	4b8d      	ldr	r3, [pc, #564]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134c:	ee17 0a90 	vmov	r0, s15
 8001350:	f7ff f8fa 	bl	8000548 <__aeabi_f2d>
 8001354:	a374      	add	r3, pc, #464	@ (adr r3, 8001528 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff fa77 	bl	800084c <__aeabi_ddiv>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fc1f 	bl	8000ba8 <__aeabi_d2f>
 800136a:	4603      	mov	r3, r0
 800136c:	4a83      	ldr	r2, [pc, #524]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800136e:	6013      	str	r3, [r2, #0]
			theta_pre = theta;
 8001370:	4b80      	ldr	r3, [pc, #512]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a80      	ldr	r2, [pc, #512]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001376:	6013      	str	r3, [r2, #0]

			x = ((float) (enc_left + enc_right) / 2) * PULSE_TO_METER;
 8001378:	4b7a      	ldr	r3, [pc, #488]	@ (8001564 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b7b      	ldr	r3, [pc, #492]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4413      	add	r3, r2
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800138e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001392:	ee16 0a90 	vmov	r0, s13
 8001396:	f7ff f8d7 	bl	8000548 <__aeabi_f2d>
 800139a:	a365      	add	r3, pc, #404	@ (adr r3, 8001530 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f92a 	bl	80005f8 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fbfc 	bl	8000ba8 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a73      	ldr	r2, [pc, #460]	@ (8001580 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80013b4:	6013      	str	r3, [r2, #0]
			dx = (x - x_pre) / DT;
 80013b6:	4b72      	ldr	r3, [pc, #456]	@ (8001580 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80013b8:	ed93 7a00 	vldr	s14, [r3]
 80013bc:	4b71      	ldr	r3, [pc, #452]	@ (8001584 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c6:	ee17 0a90 	vmov	r0, s15
 80013ca:	f7ff f8bd 	bl	8000548 <__aeabi_f2d>
 80013ce:	a356      	add	r3, pc, #344	@ (adr r3, 8001528 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7ff fa3a 	bl	800084c <__aeabi_ddiv>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fbe2 	bl	8000ba8 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a68      	ldr	r2, [pc, #416]	@ (8001588 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80013e8:	6013      	str	r3, [r2, #0]
			x_pre = x;
 80013ea:	4b65      	ldr	r3, [pc, #404]	@ (8001580 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a65      	ldr	r2, [pc, #404]	@ (8001584 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80013f0:	6013      	str	r3, [r2, #0]
//			printf("Pos: %f, Theta: %f\n", x, theta);

			real_T arg_y[2] = { x, theta };
 80013f2:	4b63      	ldr	r3, [pc, #396]	@ (8001580 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f8a6 	bl	8000548 <__aeabi_f2d>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001404:	4b5b      	ldr	r3, [pc, #364]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f89d 	bl	8000548 <__aeabi_f2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	e9c7 2304 	strd	r2, r3, [r7, #16]
			real_T arg_u = state_feedback_controller_step(arg_y);
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fc14 	bl	8000c48 <state_feedback_controller_step>
 8001420:	ed87 0b06 	vstr	d0, [r7, #24]
//			float arg_u = -1.0000*x -40.8844*dx -148.5435*theta -16.9324*dtheta;
			duty_ratio = arg_u / MAX_V;
 8001424:	a344      	add	r3, pc, #272	@ (adr r3, 8001538 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800142e:	f7ff fa0d 	bl	800084c <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fbb5 	bl	8000ba8 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	4a52      	ldr	r2, [pc, #328]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001442:	6013      	str	r3, [r2, #0]

			duty_ratio = duty_ratio > 0.0 && duty_ratio < 0.6 ? 0.6 : duty_ratio;
 8001444:	4b51      	ldr	r3, [pc, #324]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	bfcc      	ite	gt
 8001454:	2301      	movgt	r3, #1
 8001456:	2300      	movle	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	f083 0301 	eor.w	r3, r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d116      	bne.n	8001492 <HAL_TIM_PeriodElapsedCallback+0x20a>
 8001464:	4b49      	ldr	r3, [pc, #292]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f86d 	bl	8000548 <__aeabi_f2d>
 800146e:	2301      	movs	r3, #1
 8001470:	461c      	mov	r4, r3
 8001472:	a333      	add	r3, pc, #204	@ (adr r3, 8001540 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff fb30 	bl	8000adc <__aeabi_dcmplt>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_TIM_PeriodElapsedCallback+0x1fe>
 8001482:	2300      	movs	r3, #0
 8001484:	461c      	mov	r4, r3
 8001486:	b2e3      	uxtb	r3, r4
 8001488:	f083 0301 	eor.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x210>
 8001492:	4b3e      	ldr	r3, [pc, #248]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	e000      	b.n	800149a <HAL_TIM_PeriodElapsedCallback+0x212>
 8001498:	4b3d      	ldr	r3, [pc, #244]	@ (8001590 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800149a:	4a3c      	ldr	r2, [pc, #240]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800149c:	6013      	str	r3, [r2, #0]
			duty_ratio = duty_ratio < 0.0 && duty_ratio > -0.6 ? -0.6 : duty_ratio;
 800149e:	4b3b      	ldr	r3, [pc, #236]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	bf4c      	ite	mi
 80014ae:	2301      	movmi	r3, #1
 80014b0:	2300      	movpl	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f083 0301 	eor.w	r3, r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d116      	bne.n	80014ec <HAL_TIM_PeriodElapsedCallback+0x264>
 80014be:	4b33      	ldr	r3, [pc, #204]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f840 	bl	8000548 <__aeabi_f2d>
 80014c8:	2301      	movs	r3, #1
 80014ca:	461c      	mov	r4, r3
 80014cc:	a31e      	add	r3, pc, #120	@ (adr r3, 8001548 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff fb21 	bl	8000b18 <__aeabi_dcmpgt>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_TIM_PeriodElapsedCallback+0x258>
 80014dc:	2300      	movs	r3, #0
 80014de:	461c      	mov	r4, r3
 80014e0:	b2e3      	uxtb	r3, r4
 80014e2:	f083 0301 	eor.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <HAL_TIM_PeriodElapsedCallback+0x26a>
 80014ec:	4b27      	ldr	r3, [pc, #156]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	e000      	b.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x26c>
 80014f2:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80014f4:	4a25      	ldr	r2, [pc, #148]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80014f6:	6013      	str	r3, [r2, #0]
//					uart_tx[i + 2] = ((uint8_t*) (&tx_data))[i];
//				}
//				HAL_UART_Transmit_DMA(&huart2, uart_tx, 10);
//			}

			MoveRightMotor(duty_ratio);
 80014f8:	4b24      	ldr	r3, [pc, #144]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001502:	f7ff fdcd 	bl	80010a0 <MoveRightMotor>
			MoveLeftMotor(duty_ratio);
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	eeb0 0a67 	vmov.f32	s0, s15
 8001510:	f7ff fe30 	bl	8001174 <MoveLeftMotor>
		}
	}
}
 8001514:	bf00      	nop
 8001516:	3724      	adds	r7, #36	@ 0x24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	f3af 8000 	nop.w
 8001520:	dfa26774 	.word	0xdfa26774
 8001524:	3f4faa29 	.word	0x3f4faa29
 8001528:	d2f1a9fc 	.word	0xd2f1a9fc
 800152c:	3f50624d 	.word	0x3f50624d
 8001530:	d2f1a9fc 	.word	0xd2f1a9fc
 8001534:	3f40624d 	.word	0x3f40624d
 8001538:	cccccccd 	.word	0xcccccccd
 800153c:	401ccccc 	.word	0x401ccccc
 8001540:	33333333 	.word	0x33333333
 8001544:	3fe33333 	.word	0x3fe33333
 8001548:	33333333 	.word	0x33333333
 800154c:	bfe33333 	.word	0xbfe33333
 8001550:	20000458 	.word	0x20000458
 8001554:	200005b4 	.word	0x200005b4
 8001558:	20000370 	.word	0x20000370
 800155c:	200005b6 	.word	0x200005b6
 8001560:	200005d8 	.word	0x200005d8
 8001564:	20000628 	.word	0x20000628
 8001568:	20000600 	.word	0x20000600
 800156c:	2000062c 	.word	0x2000062c
 8001570:	200005b8 	.word	0x200005b8
 8001574:	200005bc 	.word	0x200005bc
 8001578:	200005c0 	.word	0x200005c0
 800157c:	200005c4 	.word	0x200005c4
 8001580:	200005c8 	.word	0x200005c8
 8001584:	200005cc 	.word	0x200005cc
 8001588:	200005d0 	.word	0x200005d0
 800158c:	200005d4 	.word	0x200005d4
 8001590:	3f19999a 	.word	0x3f19999a
 8001594:	bf19999a 	.word	0xbf19999a

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800159e:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <main+0xec>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f006 ffbe 	bl	8008528 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ac:	f000 ff8a 	bl	80024c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b0:	f000 f87e 	bl	80016b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b4:	f000 fad6 	bl	8001b64 <MX_GPIO_Init>
  MX_DMA_Init();
 80015b8:	f000 faae 	bl	8001b18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015bc:	f000 fa7c 	bl	8001ab8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80015c0:	f000 f940 	bl	8001844 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015c4:	f000 f9c0 	bl	8001948 <MX_TIM3_Init>
  MX_TIM6_Init();
 80015c8:	f000 fa40 	bl	8001a4c <MX_TIM6_Init>
  MX_ADC1_Init();
 80015cc:	f000 f8ca 	bl	8001764 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim6);
 80015d0:	482d      	ldr	r0, [pc, #180]	@ (8001688 <main+0xf0>)
 80015d2:	f004 f8f3 	bl	80057bc <HAL_TIM_Base_Start_IT>

	QEI_Init(&hqei_left,
 80015d6:	2301      	movs	r3, #1
 80015d8:	9302      	str	r3, [sp, #8]
 80015da:	2330      	movs	r3, #48	@ 0x30
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	2380      	movs	r3, #128	@ 0x80
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4b2a      	ldr	r3, [pc, #168]	@ (800168c <main+0xf4>)
 80015e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015e8:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80015ec:	4828      	ldr	r0, [pc, #160]	@ (8001690 <main+0xf8>)
 80015ee:	f000 fb59 	bl	8001ca4 <QEI_Init>
	QEI_L_A_GPIO_Port, QEI_L_A_Pin,
	QEI_L_B_GPIO_Port, QEI_L_B_Pin, 48, QEI_X4_ENCODING);
	QEI_Init(&hqei_right,
 80015f2:	2301      	movs	r3, #1
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2330      	movs	r3, #48	@ 0x30
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	2301      	movs	r3, #1
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <main+0xfc>)
 8001600:	2240      	movs	r2, #64	@ 0x40
 8001602:	4922      	ldr	r1, [pc, #136]	@ (800168c <main+0xf4>)
 8001604:	4824      	ldr	r0, [pc, #144]	@ (8001698 <main+0x100>)
 8001606:	f000 fb4d 	bl	8001ca4 <QEI_Init>
	QEI_R_A_GPIO_Port, QEI_R_A_Pin,
	QEI_R_B_GPIO_Port, QEI_R_B_Pin, 48, QEI_X4_ENCODING);

	state_feedback_controller_initialize();
 800160a:	f7ff fcf1 	bl	8000ff0 <state_feedback_controller_initialize>
	HAL_UART_Receive_DMA(&huart2, uart_rx, 8);
 800160e:	2208      	movs	r2, #8
 8001610:	4922      	ldr	r1, [pc, #136]	@ (800169c <main+0x104>)
 8001612:	4823      	ldr	r0, [pc, #140]	@ (80016a0 <main+0x108>)
 8001614:	f005 f9bf 	bl	8006996 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001618:	2108      	movs	r1, #8
 800161a:	481c      	ldr	r0, [pc, #112]	@ (800168c <main+0xf4>)
 800161c:	f002 fd00 	bl	8004020 <HAL_GPIO_TogglePin>

		if (!start
 8001620:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <main+0x10c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	f083 0301 	eor.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d026      	beq.n	800167c <main+0xe4>
				&& HAL_GPIO_ReadPin(Button_R_GPIO_Port, Button_R_Pin)
 800162e:	2101      	movs	r1, #1
 8001630:	4816      	ldr	r0, [pc, #88]	@ (800168c <main+0xf4>)
 8001632:	f002 fcc5 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d11f      	bne.n	800167c <main+0xe4>
						== GPIO_PIN_RESET) {
			for (int i = 0; i < 10; i++) {
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	e016      	b.n	8001670 <main+0xd8>
				HAL_ADC_Start(&hadc1);
 8001642:	4819      	ldr	r0, [pc, #100]	@ (80016a8 <main+0x110>)
 8001644:	f001 f95a 	bl	80028fc <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8001648:	210a      	movs	r1, #10
 800164a:	4817      	ldr	r0, [pc, #92]	@ (80016a8 <main+0x110>)
 800164c:	f001 fa42 	bl	8002ad4 <HAL_ADC_PollForConversion>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <main+0xcc>
					zero_ad = HAL_ADC_GetValue(&hadc1); // 10bit
 8001656:	4814      	ldr	r0, [pc, #80]	@ (80016a8 <main+0x110>)
 8001658:	f001 fb0a 	bl	8002c70 <HAL_ADC_GetValue>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <main+0x114>)
 8001662:	801a      	strh	r2, [r3, #0]
				}
				HAL_ADC_Stop(&hadc1);
 8001664:	4810      	ldr	r0, [pc, #64]	@ (80016a8 <main+0x110>)
 8001666:	f001 f9ff 	bl	8002a68 <HAL_ADC_Stop>
			for (int i = 0; i < 10; i++) {
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3301      	adds	r3, #1
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b09      	cmp	r3, #9
 8001674:	dde5      	ble.n	8001642 <main+0xaa>
			}
			start = true;
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <main+0x10c>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(100);
 800167c:	2064      	movs	r0, #100	@ 0x64
 800167e:	f000 ff87 	bl	8002590 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001682:	e7c9      	b.n	8001618 <main+0x80>
 8001684:	20000018 	.word	0x20000018
 8001688:	20000458 	.word	0x20000458
 800168c:	48000400 	.word	0x48000400
 8001690:	200005d8 	.word	0x200005d8
 8001694:	48001400 	.word	0x48001400
 8001698:	20000600 	.word	0x20000600
 800169c:	20000630 	.word	0x20000630
 80016a0:	200004a4 	.word	0x200004a4
 80016a4:	200005b4 	.word	0x200005b4
 80016a8:	20000370 	.word	0x20000370
 80016ac:	200005b8 	.word	0x200005b8

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b096      	sub	sp, #88	@ 0x58
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016ba:	2228      	movs	r2, #40	@ 0x28
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f007 f831 	bl	8008726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e4:	2302      	movs	r3, #2
 80016e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e8:	2301      	movs	r3, #1
 80016ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ec:	2310      	movs	r3, #16
 80016ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f0:	2302      	movs	r3, #2
 80016f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f4:	2300      	movs	r3, #0
 80016f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016f8:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80016fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fcbe 	bl	8004084 <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800170e:	f000 fac3 	bl	8001c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001712:	230f      	movs	r3, #15
 8001714:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001716:	2302      	movs	r3, #2
 8001718:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800171e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	2102      	movs	r1, #2
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fcb6 	bl	80050a0 <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800173a:	f000 faad 	bl	8001c98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800173e:	2380      	movs	r3, #128	@ 0x80
 8001740:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001742:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001746:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4618      	mov	r0, r3
 800174c:	f003 feba 	bl	80054c4 <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001756:	f000 fa9f 	bl	8001c98 <Error_Handler>
  }
}
 800175a:	bf00      	nop
 800175c:	3758      	adds	r7, #88	@ 0x58
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	@ 0x28
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001786:	4b2e      	ldr	r3, [pc, #184]	@ (8001840 <MX_ADC1_Init+0xdc>)
 8001788:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800178c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800178e:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <MX_ADC1_Init+0xdc>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001794:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <MX_ADC1_Init+0xdc>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800179a:	4b29      	ldr	r3, [pc, #164]	@ (8001840 <MX_ADC1_Init+0xdc>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017a0:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017a6:	4b26      	ldr	r3, [pc, #152]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ae:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b4:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ba:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017d0:	2204      	movs	r2, #4
 80017d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017da:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017e0:	4817      	ldr	r0, [pc, #92]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017e2:	f000 fef9 	bl	80025d8 <HAL_ADC_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80017ec:	f000 fa54 	bl	8001c98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4811      	ldr	r0, [pc, #68]	@ (8001840 <MX_ADC1_Init+0xdc>)
 80017fc:	f001 fd04 	bl	8003208 <HAL_ADCEx_MultiModeConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001806:	f000 fa47 	bl	8001c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800180a:	2301      	movs	r3, #1
 800180c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800180e:	2301      	movs	r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001816:	2305      	movs	r3, #5
 8001818:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	@ (8001840 <MX_ADC1_Init+0xdc>)
 8001828:	f001 fa30 	bl	8002c8c <HAL_ADC_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001832:	f000 fa31 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	@ 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000370 	.word	0x20000370

08001844 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	@ 0x38
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001864:	463b      	mov	r3, r7
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]
 8001872:	615a      	str	r2, [r3, #20]
 8001874:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001876:	4b33      	ldr	r3, [pc, #204]	@ (8001944 <MX_TIM2_Init+0x100>)
 8001878:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800187c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <MX_TIM2_Init+0x100>)
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	4b2f      	ldr	r3, [pc, #188]	@ (8001944 <MX_TIM2_Init+0x100>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6399;
 800188a:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <MX_TIM2_Init+0x100>)
 800188c:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8001890:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001892:	4b2c      	ldr	r3, [pc, #176]	@ (8001944 <MX_TIM2_Init+0x100>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001898:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <MX_TIM2_Init+0x100>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800189e:	4829      	ldr	r0, [pc, #164]	@ (8001944 <MX_TIM2_Init+0x100>)
 80018a0:	f003 ff34 	bl	800570c <HAL_TIM_Base_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80018aa:	f000 f9f5 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018b8:	4619      	mov	r1, r3
 80018ba:	4822      	ldr	r0, [pc, #136]	@ (8001944 <MX_TIM2_Init+0x100>)
 80018bc:	f004 fa52 	bl	8005d64 <HAL_TIM_ConfigClockSource>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80018c6:	f000 f9e7 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018ca:	481e      	ldr	r0, [pc, #120]	@ (8001944 <MX_TIM2_Init+0x100>)
 80018cc:	f003 ffd2 	bl	8005874 <HAL_TIM_PWM_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80018d6:	f000 f9df 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	4816      	ldr	r0, [pc, #88]	@ (8001944 <MX_TIM2_Init+0x100>)
 80018ea:	f004 fef1 	bl	80066d0 <HAL_TIMEx_MasterConfigSynchronization>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018f4:	f000 f9d0 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f8:	2360      	movs	r3, #96	@ 0x60
 80018fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001908:	463b      	mov	r3, r7
 800190a:	2204      	movs	r2, #4
 800190c:	4619      	mov	r1, r3
 800190e:	480d      	ldr	r0, [pc, #52]	@ (8001944 <MX_TIM2_Init+0x100>)
 8001910:	f004 f914 	bl	8005b3c <HAL_TIM_PWM_ConfigChannel>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800191a:	f000 f9bd 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	220c      	movs	r2, #12
 8001922:	4619      	mov	r1, r3
 8001924:	4807      	ldr	r0, [pc, #28]	@ (8001944 <MX_TIM2_Init+0x100>)
 8001926:	f004 f909 	bl	8005b3c <HAL_TIM_PWM_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001930:	f000 f9b2 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001934:	4803      	ldr	r0, [pc, #12]	@ (8001944 <MX_TIM2_Init+0x100>)
 8001936:	f000 fb75 	bl	8002024 <HAL_TIM_MspPostInit>

}
 800193a:	bf00      	nop
 800193c:	3738      	adds	r7, #56	@ 0x38
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200003c0 	.word	0x200003c0

08001948 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08e      	sub	sp, #56	@ 0x38
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800197a:	4b32      	ldr	r3, [pc, #200]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 800197c:	4a32      	ldr	r2, [pc, #200]	@ (8001a48 <MX_TIM3_Init+0x100>)
 800197e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001980:	4b30      	ldr	r3, [pc, #192]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6399;
 800198c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 800198e:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8001992:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b2b      	ldr	r3, [pc, #172]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019a0:	4828      	ldr	r0, [pc, #160]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 80019a2:	f003 feb3 	bl	800570c <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80019ac:	f000 f974 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4821      	ldr	r0, [pc, #132]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 80019be:	f004 f9d1 	bl	8005d64 <HAL_TIM_ConfigClockSource>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80019c8:	f000 f966 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019cc:	481d      	ldr	r0, [pc, #116]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 80019ce:	f003 ff51 	bl	8005874 <HAL_TIM_PWM_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80019d8:	f000 f95e 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4816      	ldr	r0, [pc, #88]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 80019ec:	f004 fe70 	bl	80066d0 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019f6:	f000 f94f 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2360      	movs	r3, #96	@ 0x60
 80019fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 8001a12:	f004 f893 	bl	8005b3c <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001a1c:	f000 f93c 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a20:	463b      	mov	r3, r7
 8001a22:	2204      	movs	r2, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4807      	ldr	r0, [pc, #28]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 8001a28:	f004 f888 	bl	8005b3c <HAL_TIM_PWM_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001a32:	f000 f931 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a36:	4803      	ldr	r0, [pc, #12]	@ (8001a44 <MX_TIM3_Init+0xfc>)
 8001a38:	f000 faf4 	bl	8002024 <HAL_TIM_MspPostInit>

}
 8001a3c:	bf00      	nop
 8001a3e:	3738      	adds	r7, #56	@ 0x38
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000040c 	.word	0x2000040c
 8001a48:	40000400 	.word	0x40000400

08001a4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <MX_TIM6_Init+0x64>)
 8001a5e:	4a15      	ldr	r2, [pc, #84]	@ (8001ab4 <MX_TIM6_Init+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <MX_TIM6_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <MX_TIM6_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <MX_TIM6_Init+0x64>)
 8001a70:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001a74:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <MX_TIM6_Init+0x64>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a7c:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <MX_TIM6_Init+0x64>)
 8001a7e:	f003 fe45 	bl	800570c <HAL_TIM_Base_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001a88:	f000 f906 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <MX_TIM6_Init+0x64>)
 8001a9a:	f004 fe19 	bl	80066d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001aa4:	f000 f8f8 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000458 	.word	0x20000458
 8001ab4:	40001000 	.word	0x40001000

08001ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <MX_USART2_UART_Init+0x58>)
 8001abe:	4a15      	ldr	r2, [pc, #84]	@ (8001b14 <MX_USART2_UART_Init+0x5c>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ac4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <MX_USART2_UART_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <MX_USART2_UART_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <MX_USART2_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <MX_USART2_UART_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <MX_USART2_UART_Init+0x58>)
 8001afc:	f004 fe74 	bl	80067e8 <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b06:	f000 f8c7 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200004a4 	.word	0x200004a4
 8001b14:	40004400 	.word	0x40004400

08001b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <MX_DMA_Init+0x48>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4a0f      	ldr	r2, [pc, #60]	@ (8001b60 <MX_DMA_Init+0x48>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6153      	str	r3, [r2, #20]
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <MX_DMA_Init+0x48>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2010      	movs	r0, #16
 8001b3c:	f001 fe85 	bl	800384a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001b40:	2010      	movs	r0, #16
 8001b42:	f001 fe9e 	bl	8003882 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2011      	movs	r0, #17
 8001b4c:	f001 fe7d 	bl	800384a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001b50:	2011      	movs	r0, #17
 8001b52:	f001 fe96 	bl	8003882 <HAL_NVIC_EnableIRQ>

}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000

08001b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b7a:	4b44      	ldr	r3, [pc, #272]	@ (8001c8c <MX_GPIO_Init+0x128>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	4a43      	ldr	r2, [pc, #268]	@ (8001c8c <MX_GPIO_Init+0x128>)
 8001b80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b84:	6153      	str	r3, [r2, #20]
 8001b86:	4b41      	ldr	r3, [pc, #260]	@ (8001c8c <MX_GPIO_Init+0x128>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4b3e      	ldr	r3, [pc, #248]	@ (8001c8c <MX_GPIO_Init+0x128>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	4a3d      	ldr	r2, [pc, #244]	@ (8001c8c <MX_GPIO_Init+0x128>)
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b9c:	6153      	str	r3, [r2, #20]
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c8c <MX_GPIO_Init+0x128>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <MX_GPIO_Init+0x128>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4a37      	ldr	r2, [pc, #220]	@ (8001c8c <MX_GPIO_Init+0x128>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb4:	6153      	str	r3, [r2, #20]
 8001bb6:	4b35      	ldr	r3, [pc, #212]	@ (8001c8c <MX_GPIO_Init+0x128>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2108      	movs	r1, #8
 8001bc6:	4832      	ldr	r0, [pc, #200]	@ (8001c90 <MX_GPIO_Init+0x12c>)
 8001bc8:	f002 fa12 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : QEI_R_B_Pin */
  GPIO_InitStruct.Pin = QEI_R_B_Pin;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bd0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(QEI_R_B_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	4619      	mov	r1, r3
 8001be0:	482c      	ldr	r0, [pc, #176]	@ (8001c94 <MX_GPIO_Init+0x130>)
 8001be2:	f002 f87b 	bl	8003cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_R_Pin */
  GPIO_InitStruct.Pin = Button_R_Pin;
 8001be6:	2301      	movs	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_R_GPIO_Port, &GPIO_InitStruct);
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4825      	ldr	r0, [pc, #148]	@ (8001c90 <MX_GPIO_Init+0x12c>)
 8001bfa:	f002 f86f 	bl	8003cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : QEI_L_A_Pin */
  GPIO_InitStruct.Pin = QEI_L_A_Pin;
 8001bfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c04:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(QEI_L_A_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c18:	f002 f860 	bl	8003cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4619      	mov	r1, r3
 8001c32:	4817      	ldr	r0, [pc, #92]	@ (8001c90 <MX_GPIO_Init+0x12c>)
 8001c34:	f002 f852 	bl	8003cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : QEI_R_A_Pin QEI_L_B_Pin */
  GPIO_InitStruct.Pin = QEI_R_A_Pin|QEI_L_B_Pin;
 8001c38:	23c0      	movs	r3, #192	@ 0xc0
 8001c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c3c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4810      	ldr	r0, [pc, #64]	@ (8001c90 <MX_GPIO_Init+0x12c>)
 8001c4e:	f002 f845 	bl	8003cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2006      	movs	r0, #6
 8001c58:	f001 fdf7 	bl	800384a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c5c:	2006      	movs	r0, #6
 8001c5e:	f001 fe10 	bl	8003882 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2017      	movs	r0, #23
 8001c68:	f001 fdef 	bl	800384a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c6c:	2017      	movs	r0, #23
 8001c6e:	f001 fe08 	bl	8003882 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	2028      	movs	r0, #40	@ 0x28
 8001c78:	f001 fde7 	bl	800384a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c7c:	2028      	movs	r0, #40	@ 0x28
 8001c7e:	f001 fe00 	bl	8003882 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	48000400 	.word	0x48000400
 8001c94:	48001400 	.word	0x48001400

08001c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9c:	b672      	cpsid	i
}
 8001c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <Error_Handler+0x8>

08001ca4 <QEI_Init>:
#define QEI_PREV_MASK 0x1
#define QEI_CURR_MASK 0x2

void QEI_Init(QEI_HandleTypeDef *hqei, GPIO_TypeDef *chanA_port,
		uint16_t chanA_pin, GPIO_TypeDef *chanB_port, uint16_t chanB_pin,
		int pulses_per_rev, QEI_Encoding encoding) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	80fb      	strh	r3, [r7, #6]
	hqei->chanA_port = chanA_port;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	601a      	str	r2, [r3, #0]
	hqei->chanA_pin = chanA_pin;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	88fa      	ldrh	r2, [r7, #6]
 8001cbe:	809a      	strh	r2, [r3, #4]
	hqei->chanB_port = chanB_port;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	609a      	str	r2, [r3, #8]
	hqei->chanB_pin = chanB_pin;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8c3a      	ldrh	r2, [r7, #32]
 8001cca:	819a      	strh	r2, [r3, #12]
	hqei->pulses = 0;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
	hqei->revolutions = 0;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
	hqei->pulses_per_rev = pulses_per_rev;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cdc:	619a      	str	r2, [r3, #24]
	hqei->encoding = encoding;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001ce4:	771a      	strb	r2, [r3, #28]

	// 現在の状態を算出
	int chanA = HAL_GPIO_ReadPin(chanA_port, chanA_pin);
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	68b8      	ldr	r0, [r7, #8]
 8001cec:	f002 f968 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	617b      	str	r3, [r7, #20]
	int chanB = HAL_GPIO_ReadPin(chanB_port, chanB_pin);
 8001cf4:	8c3b      	ldrh	r3, [r7, #32]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6838      	ldr	r0, [r7, #0]
 8001cfa:	f002 f961 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	613b      	str	r3, [r7, #16]

	hqei->curr_state = (chanA << 1) | chanB;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005a      	lsls	r2, r3, #1
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	621a      	str	r2, [r3, #32]
	hqei->prev_state = hqei->curr_state;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a1a      	ldr	r2, [r3, #32]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <QEI_Reset>:

void QEI_Reset(QEI_HandleTypeDef *hqei) {
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
	hqei->pulses = 0;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
	hqei->revolutions = 0;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	615a      	str	r2, [r3, #20]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <QEI_GetPulses>:

int QEI_GetPulses(QEI_HandleTypeDef *hqei) {
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	return hqei->pulses;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <QEI_ReadChan>:
int QEI_GetCurrentState(QEI_HandleTypeDef *hqei) {
	return hqei->curr_state;
}

// レジスタ直読専用関数
static inline int QEI_ReadChan(GPIO_TypeDef *port, uint16_t pin) {
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	807b      	strh	r3, [r7, #2]
	return ((port->IDR & pin) ? 1 : 0);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <QEI_Encode>:

void QEI_Encode(QEI_HandleTypeDef *hqei) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	int change = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
	int chanA = QEI_ReadChan(hqei->chanA_port, hqei->chanA_pin);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	889b      	ldrh	r3, [r3, #4]
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f7ff ffdd 	bl	8001d56 <QEI_ReadChan>
 8001d9c:	6138      	str	r0, [r7, #16]
	int chanB = QEI_ReadChan(hqei->chanB_port, hqei->chanB_pin);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	899b      	ldrh	r3, [r3, #12]
 8001da6:	4619      	mov	r1, r3
 8001da8:	4610      	mov	r0, r2
 8001daa:	f7ff ffd4 	bl	8001d56 <QEI_ReadChan>
 8001dae:	60f8      	str	r0, [r7, #12]

	hqei->curr_state = (chanA << 1) | chanB;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	005a      	lsls	r2, r3, #1
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	621a      	str	r2, [r3, #32]

	if (hqei->encoding == QEI_X2_ENCODING) {
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7f1b      	ldrb	r3, [r3, #28]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d12b      	bne.n	8001e1c <QEI_Encode+0x9c>
		if ((hqei->prev_state == 0x3 && hqei->curr_state == 0x0)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d103      	bne.n	8001dd4 <QEI_Encode+0x54>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <QEI_Encode+0x64>
				|| (hqei->prev_state == 0x0 && hqei->curr_state == 0x3)) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <QEI_Encode+0x70>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d105      	bne.n	8001df0 <QEI_Encode+0x70>
			hqei->pulses++;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	e03b      	b.n	8001e68 <QEI_Encode+0xe8>
		} else if ((hqei->prev_state == 0x2 && hqei->curr_state == 0x1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d103      	bne.n	8001e00 <QEI_Encode+0x80>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d007      	beq.n	8001e10 <QEI_Encode+0x90>
				|| (hqei->prev_state == 0x1 && hqei->curr_state == 0x2)) {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d12f      	bne.n	8001e68 <QEI_Encode+0xe8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d12b      	bne.n	8001e68 <QEI_Encode+0xe8>
			hqei->pulses--;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	611a      	str	r2, [r3, #16]
 8001e1a:	e025      	b.n	8001e68 <QEI_Encode+0xe8>
		}
	} else if (hqei->encoding == QEI_X4_ENCODING) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7f1b      	ldrb	r3, [r3, #28]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d121      	bne.n	8001e68 <QEI_Encode+0xe8>
		if (((hqei->curr_state ^ hqei->prev_state) != QEI_INVALID)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1a      	ldr	r2, [r3, #32]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2c:	4053      	eors	r3, r2
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d01a      	beq.n	8001e68 <QEI_Encode+0xe8>
				&& (hqei->curr_state != hqei->prev_state)) {
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1a      	ldr	r2, [r3, #32]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d014      	beq.n	8001e68 <QEI_Encode+0xe8>
			change = (hqei->prev_state & QEI_PREV_MASK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
					^ ((hqei->curr_state & QEI_CURR_MASK) >> 1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	105b      	asrs	r3, r3, #1
 8001e48:	4053      	eors	r3, r2
			change = (hqei->prev_state & QEI_PREV_MASK)
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
			if (change == 0)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <QEI_Encode+0xdc>
				change = -1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	617b      	str	r3, [r7, #20]
			hqei->pulses -= change;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	1ad2      	subs	r2, r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	611a      	str	r2, [r3, #16]
		}
	}

	// 1回転判定
	if (hqei->pulses_per_rev > 0) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	dd25      	ble.n	8001ebc <QEI_Encode+0x13c>
		if (hqei->pulses >= hqei->pulses_per_rev) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	db0c      	blt.n	8001e96 <QEI_Encode+0x116>
			hqei->revolutions++;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	615a      	str	r2, [r3, #20]
			hqei->pulses -= hqei->pulses_per_rev;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	1ad2      	subs	r2, r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	611a      	str	r2, [r3, #16]
 8001e94:	e012      	b.n	8001ebc <QEI_Encode+0x13c>
		} else if (hqei->pulses <= -hqei->pulses_per_rev) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	425b      	negs	r3, r3
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	dc0b      	bgt.n	8001ebc <QEI_Encode+0x13c>
			hqei->revolutions--;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	1e5a      	subs	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	615a      	str	r2, [r3, #20]
			hqei->pulses += hqei->pulses_per_rev;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	611a      	str	r2, [r3, #16]
		}
	}
	hqei->prev_state = hqei->curr_state;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001ec4:	bf00      	nop
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <HAL_MspInit+0x44>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f10 <HAL_MspInit+0x44>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6193      	str	r3, [r2, #24]
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <HAL_MspInit+0x44>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_MspInit+0x44>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <HAL_MspInit+0x44>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_MspInit+0x44>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f34:	d124      	bne.n	8001f80 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f36:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <HAL_ADC_MspInit+0x74>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4a13      	ldr	r2, [pc, #76]	@ (8001f88 <HAL_ADC_MspInit+0x74>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	6153      	str	r3, [r2, #20]
 8001f42:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <HAL_ADC_MspInit+0x74>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <HAL_ADC_MspInit+0x74>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4a0d      	ldr	r2, [pc, #52]	@ (8001f88 <HAL_ADC_MspInit+0x74>)
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f58:	6153      	str	r3, [r2, #20]
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <HAL_ADC_MspInit+0x74>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8001f66:	2301      	movs	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f7c:	f001 feae 	bl	8003cdc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f80:	bf00      	nop
 8001f82:	3728      	adds	r7, #40	@ 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000

08001f8c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002018 <HAL_TIM_Base_MspInit+0x8c>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8002018 <HAL_TIM_Base_MspInit+0x8c>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	61d3      	str	r3, [r2, #28]
 8001faa:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <HAL_TIM_Base_MspInit+0x8c>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001fb6:	e02a      	b.n	800200e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a17      	ldr	r2, [pc, #92]	@ (800201c <HAL_TIM_Base_MspInit+0x90>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10c      	bne.n	8001fdc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <HAL_TIM_Base_MspInit+0x8c>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a14      	ldr	r2, [pc, #80]	@ (8002018 <HAL_TIM_Base_MspInit+0x8c>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	61d3      	str	r3, [r2, #28]
 8001fce:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <HAL_TIM_Base_MspInit+0x8c>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
}
 8001fda:	e018      	b.n	800200e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <HAL_TIM_Base_MspInit+0x94>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d113      	bne.n	800200e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <HAL_TIM_Base_MspInit+0x8c>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4a0b      	ldr	r2, [pc, #44]	@ (8002018 <HAL_TIM_Base_MspInit+0x8c>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	61d3      	str	r3, [r2, #28]
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_TIM_Base_MspInit+0x8c>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2036      	movs	r0, #54	@ 0x36
 8002004:	f001 fc21 	bl	800384a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002008:	2036      	movs	r0, #54	@ 0x36
 800200a:	f001 fc3a 	bl	8003882 <HAL_NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	40000400 	.word	0x40000400
 8002020:	40001000 	.word	0x40001000

08002024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	@ 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002044:	d11d      	bne.n	8002082 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <HAL_TIM_MspPostInit+0xa8>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4a20      	ldr	r2, [pc, #128]	@ (80020cc <HAL_TIM_MspPostInit+0xa8>)
 800204c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002050:	6153      	str	r3, [r2, #20]
 8002052:	4b1e      	ldr	r3, [pc, #120]	@ (80020cc <HAL_TIM_MspPostInit+0xa8>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MD_In3_Pin|MD_In4_Pin;
 800205e:	230a      	movs	r3, #10
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800206e:	2301      	movs	r3, #1
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800207c:	f001 fe2e 	bl	8003cdc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002080:	e020      	b.n	80020c4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <HAL_TIM_MspPostInit+0xac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208c:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <HAL_TIM_MspPostInit+0xa8>)
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	4a0e      	ldr	r2, [pc, #56]	@ (80020cc <HAL_TIM_MspPostInit+0xa8>)
 8002092:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002096:	6153      	str	r3, [r2, #20]
 8002098:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <HAL_TIM_MspPostInit+0xa8>)
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MD_In1_Pin|MD_In2_Pin;
 80020a4:	2330      	movs	r3, #48	@ 0x30
 80020a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020b4:	2302      	movs	r3, #2
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	4805      	ldr	r0, [pc, #20]	@ (80020d4 <HAL_TIM_MspPostInit+0xb0>)
 80020c0:	f001 fe0c 	bl	8003cdc <HAL_GPIO_Init>
}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	@ 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	48000400 	.word	0x48000400

080020d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	@ 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a42      	ldr	r2, [pc, #264]	@ (8002200 <HAL_UART_MspInit+0x128>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d17d      	bne.n	80021f6 <HAL_UART_MspInit+0x11e>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020fa:	4b42      	ldr	r3, [pc, #264]	@ (8002204 <HAL_UART_MspInit+0x12c>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a41      	ldr	r2, [pc, #260]	@ (8002204 <HAL_UART_MspInit+0x12c>)
 8002100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b3f      	ldr	r3, [pc, #252]	@ (8002204 <HAL_UART_MspInit+0x12c>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b3c      	ldr	r3, [pc, #240]	@ (8002204 <HAL_UART_MspInit+0x12c>)
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4a3b      	ldr	r2, [pc, #236]	@ (8002204 <HAL_UART_MspInit+0x12c>)
 8002118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800211c:	6153      	str	r3, [r2, #20]
 800211e:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <HAL_UART_MspInit+0x12c>)
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800212a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213c:	2307      	movs	r3, #7
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800214a:	f001 fdc7 	bl	8003cdc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800214e:	4b2e      	ldr	r3, [pc, #184]	@ (8002208 <HAL_UART_MspInit+0x130>)
 8002150:	4a2e      	ldr	r2, [pc, #184]	@ (800220c <HAL_UART_MspInit+0x134>)
 8002152:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002154:	4b2c      	ldr	r3, [pc, #176]	@ (8002208 <HAL_UART_MspInit+0x130>)
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800215a:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <HAL_UART_MspInit+0x130>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002160:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <HAL_UART_MspInit+0x130>)
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002166:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <HAL_UART_MspInit+0x130>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216c:	4b26      	ldr	r3, [pc, #152]	@ (8002208 <HAL_UART_MspInit+0x130>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <HAL_UART_MspInit+0x130>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002178:	4b23      	ldr	r3, [pc, #140]	@ (8002208 <HAL_UART_MspInit+0x130>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800217e:	4822      	ldr	r0, [pc, #136]	@ (8002208 <HAL_UART_MspInit+0x130>)
 8002180:	f001 fb99 	bl	80038b6 <HAL_DMA_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800218a:	f7ff fd85 	bl	8001c98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a1d      	ldr	r2, [pc, #116]	@ (8002208 <HAL_UART_MspInit+0x130>)
 8002192:	675a      	str	r2, [r3, #116]	@ 0x74
 8002194:	4a1c      	ldr	r2, [pc, #112]	@ (8002208 <HAL_UART_MspInit+0x130>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800219a:	4b1d      	ldr	r3, [pc, #116]	@ (8002210 <HAL_UART_MspInit+0x138>)
 800219c:	4a1d      	ldr	r2, [pc, #116]	@ (8002214 <HAL_UART_MspInit+0x13c>)
 800219e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <HAL_UART_MspInit+0x138>)
 80021a2:	2210      	movs	r2, #16
 80021a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <HAL_UART_MspInit+0x138>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <HAL_UART_MspInit+0x138>)
 80021ae:	2280      	movs	r2, #128	@ 0x80
 80021b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_UART_MspInit+0x138>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b8:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <HAL_UART_MspInit+0x138>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021be:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_UART_MspInit+0x138>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021c4:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_UART_MspInit+0x138>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021ca:	4811      	ldr	r0, [pc, #68]	@ (8002210 <HAL_UART_MspInit+0x138>)
 80021cc:	f001 fb73 	bl	80038b6 <HAL_DMA_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80021d6:	f7ff fd5f 	bl	8001c98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002210 <HAL_UART_MspInit+0x138>)
 80021de:	671a      	str	r2, [r3, #112]	@ 0x70
 80021e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002210 <HAL_UART_MspInit+0x138>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2026      	movs	r0, #38	@ 0x26
 80021ec:	f001 fb2d 	bl	800384a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021f0:	2026      	movs	r0, #38	@ 0x26
 80021f2:	f001 fb46 	bl	8003882 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80021f6:	bf00      	nop
 80021f8:	3728      	adds	r7, #40	@ 0x28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40004400 	.word	0x40004400
 8002204:	40021000 	.word	0x40021000
 8002208:	2000052c 	.word	0x2000052c
 800220c:	4002006c 	.word	0x4002006c
 8002210:	20000570 	.word	0x20000570
 8002214:	40020080 	.word	0x40020080

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <NMI_Handler+0x4>

08002220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <MemManage_Handler+0x4>

08002230 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <UsageFault_Handler+0x4>

08002240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226e:	f000 f96f 	bl	8002550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}

08002276 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QEI_R_B_Pin);
 800227a:	2001      	movs	r0, #1
 800227c:	f001 feea 	bl	8004054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <DMA1_Channel6_IRQHandler+0x10>)
 800228a:	f001 fc36 	bl	8003afa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000052c 	.word	0x2000052c

08002298 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <DMA1_Channel7_IRQHandler+0x10>)
 800229e:	f001 fc2c 	bl	8003afa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000570 	.word	0x20000570

080022ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QEI_R_A_Pin);
 80022b0:	2040      	movs	r0, #64	@ 0x40
 80022b2:	f001 fecf 	bl	8004054 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QEI_L_B_Pin);
 80022b6:	2080      	movs	r0, #128	@ 0x80
 80022b8:	f001 fecc 	bl	8004054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}

080022c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <USART2_IRQHandler+0x10>)
 80022c6:	f004 fbab 	bl	8006a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200004a4 	.word	0x200004a4

080022d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QEI_L_A_Pin);
 80022d8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80022dc:	f001 feba 	bl	8004054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022e8:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <TIM6_DAC1_IRQHandler+0x10>)
 80022ea:	f003 fb24 	bl	8005936 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000458 	.word	0x20000458

080022f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return 1;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_kill>:

int _kill(int pid, int sig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002312:	f006 fa5b 	bl	80087cc <__errno>
 8002316:	4603      	mov	r3, r0
 8002318:	2216      	movs	r2, #22
 800231a:	601a      	str	r2, [r3, #0]
  return -1;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_exit>:

void _exit (int status)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ffe7 	bl	8002308 <_kill>
  while (1) {}    /* Make sure we hang here */
 800233a:	bf00      	nop
 800233c:	e7fd      	b.n	800233a <_exit+0x12>

0800233e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e00a      	b.n	8002366 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002350:	f3af 8000 	nop.w
 8002354:	4601      	mov	r1, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	60ba      	str	r2, [r7, #8]
 800235c:	b2ca      	uxtb	r2, r1
 800235e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3301      	adds	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	429a      	cmp	r2, r3
 800236c:	dbf0      	blt.n	8002350 <_read+0x12>
  }

  return len;
 800236e:	687b      	ldr	r3, [r7, #4]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023a0:	605a      	str	r2, [r3, #4]
  return 0;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_isatty>:

int _isatty(int file)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023b8:	2301      	movs	r3, #1
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e8:	4a14      	ldr	r2, [pc, #80]	@ (800243c <_sbrk+0x5c>)
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <_sbrk+0x60>)
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f4:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023fc:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <_sbrk+0x64>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	@ (8002448 <_sbrk+0x68>)
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002402:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d207      	bcs.n	8002420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002410:	f006 f9dc 	bl	80087cc <__errno>
 8002414:	4603      	mov	r3, r0
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	e009      	b.n	8002434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002420:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002426:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	4a05      	ldr	r2, [pc, #20]	@ (8002444 <_sbrk+0x64>)
 8002430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20003000 	.word	0x20003000
 8002440:	00000400 	.word	0x00000400
 8002444:	20000638 	.word	0x20000638
 8002448:	20000790 	.word	0x20000790

0800244c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002450:	4b06      	ldr	r3, [pc, #24]	@ (800246c <SystemInit+0x20>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002456:	4a05      	ldr	r2, [pc, #20]	@ (800246c <SystemInit+0x20>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002474:	f7ff ffea 	bl	800244c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002478:	480c      	ldr	r0, [pc, #48]	@ (80024ac <LoopForever+0x6>)
  ldr r1, =_edata
 800247a:	490d      	ldr	r1, [pc, #52]	@ (80024b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800247c:	4a0d      	ldr	r2, [pc, #52]	@ (80024b4 <LoopForever+0xe>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002490:	4c0a      	ldr	r4, [pc, #40]	@ (80024bc <LoopForever+0x16>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249e:	f006 f99b 	bl	80087d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024a2:	f7ff f879 	bl	8001598 <main>

080024a6 <LoopForever>:

LoopForever:
    b LoopForever
 80024a6:	e7fe      	b.n	80024a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024a8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80024b4:	0800ab14 	.word	0x0800ab14
  ldr r2, =_sbss
 80024b8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80024bc:	2000078c 	.word	0x2000078c

080024c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC1_2_IRQHandler>
	...

080024c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_Init+0x28>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a07      	ldr	r2, [pc, #28]	@ (80024ec <HAL_Init+0x28>)
 80024ce:	f043 0310 	orr.w	r3, r3, #16
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d4:	2003      	movs	r0, #3
 80024d6:	f001 f9ad 	bl	8003834 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024da:	2000      	movs	r0, #0
 80024dc:	f000 f808 	bl	80024f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e0:	f7ff fcf4 	bl	8001ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40022000 	.word	0x40022000

080024f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f8:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <HAL_InitTick+0x54>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <HAL_InitTick+0x58>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002506:	fbb3 f3f1 	udiv	r3, r3, r1
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	4618      	mov	r0, r3
 8002510:	f001 f9c5 	bl	800389e <HAL_SYSTICK_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e00e      	b.n	800253c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b0f      	cmp	r3, #15
 8002522:	d80a      	bhi.n	800253a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002524:	2200      	movs	r2, #0
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f001 f98d 	bl	800384a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002530:	4a06      	ldr	r2, [pc, #24]	@ (800254c <HAL_InitTick+0x5c>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e000      	b.n	800253c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000000 	.word	0x20000000
 8002548:	20000008 	.word	0x20000008
 800254c:	20000004 	.word	0x20000004

08002550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002554:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_IncTick+0x20>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b06      	ldr	r3, [pc, #24]	@ (8002574 <HAL_IncTick+0x24>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4413      	add	r3, r2
 8002560:	4a04      	ldr	r2, [pc, #16]	@ (8002574 <HAL_IncTick+0x24>)
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000008 	.word	0x20000008
 8002574:	2000063c 	.word	0x2000063c

08002578 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return uwTick;  
 800257c:	4b03      	ldr	r3, [pc, #12]	@ (800258c <HAL_GetTick+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	2000063c 	.word	0x2000063c

08002590 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002598:	f7ff ffee 	bl	8002578 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d005      	beq.n	80025b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025aa:	4b0a      	ldr	r3, [pc, #40]	@ (80025d4 <HAL_Delay+0x44>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025b6:	bf00      	nop
 80025b8:	f7ff ffde 	bl	8002578 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d8f7      	bhi.n	80025b8 <HAL_Delay+0x28>
  {
  }
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000008 	.word	0x20000008

080025d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b09a      	sub	sp, #104	@ 0x68
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e172      	b.n	80028de <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d176      	bne.n	80026f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d152      	bne.n	80026b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fc71 	bl	8001f14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d13b      	bne.n	80026b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 ff0b 	bl	800345c <ADC_Disable>
 8002646:	4603      	mov	r3, r0
 8002648:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	d12f      	bne.n	80026b8 <HAL_ADC_Init+0xe0>
 8002658:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800265c:	2b00      	cmp	r3, #0
 800265e:	d12b      	bne.n	80026b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002668:	f023 0302 	bic.w	r3, r3, #2
 800266c:	f043 0202 	orr.w	r2, r3, #2
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002682:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002692:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002694:	4b94      	ldr	r3, [pc, #592]	@ (80028e8 <HAL_ADC_Init+0x310>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a94      	ldr	r2, [pc, #592]	@ (80028ec <HAL_ADC_Init+0x314>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0c9a      	lsrs	r2, r3, #18
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026aa:	e002      	b.n	80026b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f9      	bne.n	80026ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026d4:	d110      	bne.n	80026f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	f023 0312 	bic.w	r3, r3, #18
 80026de:	f043 0210 	orr.w	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	f040 80df 	bne.w	80028c4 <HAL_ADC_Init+0x2ec>
 8002706:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 80da 	bne.w	80028c4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 80d2 	bne.w	80028c4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002728:	f043 0202 	orr.w	r2, r3, #2
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002730:	4b6f      	ldr	r3, [pc, #444]	@ (80028f0 <HAL_ADC_Init+0x318>)
 8002732:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800273c:	d102      	bne.n	8002744 <HAL_ADC_Init+0x16c>
 800273e:	4b6d      	ldr	r3, [pc, #436]	@ (80028f4 <HAL_ADC_Init+0x31c>)
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e002      	b.n	800274a <HAL_ADC_Init+0x172>
 8002744:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002748:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d108      	bne.n	800276a <HAL_ADC_Init+0x192>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_ADC_Init+0x192>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_ADC_Init+0x194>
 800276a:	2300      	movs	r3, #0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d11c      	bne.n	80027aa <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002770:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_ADC_Init+0x1ba>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_ADC_Init+0x1ba>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_ADC_Init+0x1bc>
 8002792:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002794:	2b00      	cmp	r3, #0
 8002796:	d108      	bne.n	80027aa <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002798:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	7e5b      	ldrb	r3, [r3, #25]
 80027ae:	035b      	lsls	r3, r3, #13
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027b4:	2a01      	cmp	r2, #1
 80027b6:	d002      	beq.n	80027be <HAL_ADC_Init+0x1e6>
 80027b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027bc:	e000      	b.n	80027c0 <HAL_ADC_Init+0x1e8>
 80027be:	2200      	movs	r2, #0
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027d0:	4313      	orrs	r3, r2
 80027d2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d11b      	bne.n	8002816 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7e5b      	ldrb	r3, [r3, #25]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	3b01      	subs	r3, #1
 80027ec:	045a      	lsls	r2, r3, #17
 80027ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80027f8:	e00d      	b.n	8002816 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	2b01      	cmp	r3, #1
 800281c:	d007      	beq.n	800282e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002826:	4313      	orrs	r3, r2
 8002828:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800282a:	4313      	orrs	r3, r2
 800282c:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b00      	cmp	r3, #0
 800283a:	d114      	bne.n	8002866 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800284a:	f023 0302 	bic.w	r3, r3, #2
 800284e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7e1b      	ldrb	r3, [r3, #24]
 8002854:	039a      	lsls	r2, r3, #14
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4313      	orrs	r3, r2
 8002860:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002862:	4313      	orrs	r3, r2
 8002864:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	4b22      	ldr	r3, [pc, #136]	@ (80028f8 <HAL_ADC_Init+0x320>)
 800286e:	4013      	ands	r3, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002876:	430b      	orrs	r3, r1
 8002878:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10c      	bne.n	800289c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	f023 010f 	bic.w	r1, r3, #15
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	631a      	str	r2, [r3, #48]	@ 0x30
 800289a:	e007      	b.n	80028ac <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 020f 	bic.w	r2, r2, #15
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f023 0303 	bic.w	r3, r3, #3
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80028c2:	e00a      	b.n	80028da <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c8:	f023 0312 	bic.w	r3, r3, #18
 80028cc:	f043 0210 	orr.w	r2, r3, #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80028da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3768      	adds	r7, #104	@ 0x68
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000000 	.word	0x20000000
 80028ec:	431bde83 	.word	0x431bde83
 80028f0:	50000300 	.word	0x50000300
 80028f4:	50000100 	.word	0x50000100
 80028f8:	fff0c007 	.word	0xfff0c007

080028fc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 809c 	bne.w	8002a50 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_ADC_Start+0x2a>
 8002922:	2302      	movs	r3, #2
 8002924:	e097      	b.n	8002a56 <HAL_ADC_Start+0x15a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fd30 	bl	8003394 <ADC_Enable>
 8002934:	4603      	mov	r3, r0
 8002936:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 8083 	bne.w	8002a46 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002954:	4b42      	ldr	r3, [pc, #264]	@ (8002a60 <HAL_ADC_Start+0x164>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <HAL_ADC_Start+0x6e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002968:	d115      	bne.n	8002996 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d027      	beq.n	80029d4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800298c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002994:	e01e      	b.n	80029d4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029aa:	d004      	beq.n	80029b6 <HAL_ADC_Start+0xba>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002a64 <HAL_ADC_Start+0x168>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10e      	bne.n	80029d4 <HAL_ADC_Start+0xd8>
 80029b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029e0:	d106      	bne.n	80029f0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	f023 0206 	bic.w	r2, r3, #6
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80029ee:	e002      	b.n	80029f6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	221c      	movs	r2, #28
 8002a04:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a06:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <HAL_ADC_Start+0x164>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d010      	beq.n	8002a34 <HAL_ADC_Start+0x138>
 8002a12:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <HAL_ADC_Start+0x164>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d00a      	beq.n	8002a34 <HAL_ADC_Start+0x138>
 8002a1e:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <HAL_ADC_Start+0x164>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2b09      	cmp	r3, #9
 8002a28:	d004      	beq.n	8002a34 <HAL_ADC_Start+0x138>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a32:	d10f      	bne.n	8002a54 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0204 	orr.w	r2, r2, #4
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	e006      	b.n	8002a54 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002a4e:	e001      	b.n	8002a54 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
 8002a52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	50000300 	.word	0x50000300
 8002a64:	50000100 	.word	0x50000100

08002a68 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_Stop+0x1a>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e023      	b.n	8002aca <HAL_ADC_Stop+0x62>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a8a:	216c      	movs	r1, #108	@ 0x6c
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fd4b 	bl	8003528 <ADC_ConversionStop>
 8002a92:	4603      	mov	r3, r0
 8002a94:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d111      	bne.n	8002ac0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fcdd 	bl	800345c <ADC_Disable>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d102      	bne.n	8002af0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002aea:	2308      	movs	r3, #8
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e02e      	b.n	8002b4e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c6c <HAL_ADC_PollForConversion+0x198>)
 8002af2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d112      	bne.n	8002b26 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d11d      	bne.n	8002b4a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e09d      	b.n	8002c62 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e08b      	b.n	8002c62 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002b4a:	230c      	movs	r3, #12
 8002b4c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b4e:	4b47      	ldr	r3, [pc, #284]	@ (8002c6c <HAL_ADC_PollForConversion+0x198>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_ADC_PollForConversion+0x90>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b62:	d104      	bne.n	8002b6e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002b76:	f7ff fcff 	bl	8002578 <HAL_GetTick>
 8002b7a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b7c:	e021      	b.n	8002bc2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d01d      	beq.n	8002bc2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_ADC_PollForConversion+0xc8>
 8002b8c:	f7ff fcf4 	bl	8002578 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d212      	bcs.n	8002bc2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f043 0204 	orr.w	r2, r3, #4
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e04f      	b.n	8002c62 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0d6      	beq.n	8002b7e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d131      	bne.n	8002c4e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d12c      	bne.n	8002c4e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d125      	bne.n	8002c4e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d112      	bne.n	8002c36 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d112      	bne.n	8002c4e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	f043 0201 	orr.w	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c34:	e00b      	b.n	8002c4e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	f043 0220 	orr.w	r2, r3, #32
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	50000300 	.word	0x50000300

08002c70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b09b      	sub	sp, #108	@ 0x6c
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x22>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e2a1      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x566>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 8285 	bne.w	80031d0 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d81c      	bhi.n	8002d08 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	231f      	movs	r3, #31
 8002ce4:	4093      	lsls	r3, r2
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	4019      	ands	r1, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d06:	e063      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b09      	cmp	r3, #9
 8002d0e:	d81e      	bhi.n	8002d4e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	3b1e      	subs	r3, #30
 8002d24:	221f      	movs	r2, #31
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	4019      	ands	r1, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	3b1e      	subs	r3, #30
 8002d40:	fa00 f203 	lsl.w	r2, r0, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d4c:	e040      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b0e      	cmp	r3, #14
 8002d54:	d81e      	bhi.n	8002d94 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	3b3c      	subs	r3, #60	@ 0x3c
 8002d6a:	221f      	movs	r2, #31
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	4019      	ands	r1, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	3b3c      	subs	r3, #60	@ 0x3c
 8002d86:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d92:	e01d      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	3b5a      	subs	r3, #90	@ 0x5a
 8002da8:	221f      	movs	r2, #31
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	4019      	ands	r1, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	3b5a      	subs	r3, #90	@ 0x5a
 8002dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 80e5 	bne.w	8002faa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b09      	cmp	r3, #9
 8002de6:	d91c      	bls.n	8002e22 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6999      	ldr	r1, [r3, #24]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	3b1e      	subs	r3, #30
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4019      	ands	r1, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	6898      	ldr	r0, [r3, #8]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	3b1e      	subs	r3, #30
 8002e14:	fa00 f203 	lsl.w	r2, r0, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	619a      	str	r2, [r3, #24]
 8002e20:	e019      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6959      	ldr	r1, [r3, #20]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	2207      	movs	r2, #7
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	4019      	ands	r1, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6898      	ldr	r0, [r3, #8]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	08db      	lsrs	r3, r3, #3
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d84f      	bhi.n	8002f18 <HAL_ADC_ConfigChannel+0x28c>
 8002e78:	a201      	add	r2, pc, #4	@ (adr r2, 8002e80 <HAL_ADC_ConfigChannel+0x1f4>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002e91 	.word	0x08002e91
 8002e84:	08002eb3 	.word	0x08002eb3
 8002e88:	08002ed5 	.word	0x08002ed5
 8002e8c:	08002ef7 	.word	0x08002ef7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e96:	4b9c      	ldr	r3, [pc, #624]	@ (8003108 <HAL_ADC_ConfigChannel+0x47c>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	0691      	lsls	r1, r2, #26
 8002ea0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002eae:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002eb0:	e07b      	b.n	8002faa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002eb8:	4b93      	ldr	r3, [pc, #588]	@ (8003108 <HAL_ADC_ConfigChannel+0x47c>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	0691      	lsls	r1, r2, #26
 8002ec2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002ed0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ed2:	e06a      	b.n	8002faa <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002eda:	4b8b      	ldr	r3, [pc, #556]	@ (8003108 <HAL_ADC_ConfigChannel+0x47c>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	0691      	lsls	r1, r2, #26
 8002ee4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002ef2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ef4:	e059      	b.n	8002faa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002efc:	4b82      	ldr	r3, [pc, #520]	@ (8003108 <HAL_ADC_ConfigChannel+0x47c>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	0691      	lsls	r1, r2, #26
 8002f06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002f14:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f16:	e048      	b.n	8002faa <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	069b      	lsls	r3, r3, #26
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d107      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002f3a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	069b      	lsls	r3, r3, #26
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d107      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002f5e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	069b      	lsls	r3, r3, #26
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d107      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002f82:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	069b      	lsls	r3, r3, #26
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d107      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002fa8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d108      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x33e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x33e>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x340>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f040 810a 	bne.w	80031e6 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d00f      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43da      	mvns	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002ff8:	e049      	b.n	800308e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2201      	movs	r2, #1
 8003008:	409a      	lsls	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b09      	cmp	r3, #9
 800301a:	d91c      	bls.n	8003056 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6999      	ldr	r1, [r3, #24]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	3b1b      	subs	r3, #27
 800302e:	2207      	movs	r2, #7
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	4019      	ands	r1, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6898      	ldr	r0, [r3, #8]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	3b1b      	subs	r3, #27
 8003048:	fa00 f203 	lsl.w	r2, r0, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	619a      	str	r2, [r3, #24]
 8003054:	e01b      	b.n	800308e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6959      	ldr	r1, [r3, #20]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	2207      	movs	r2, #7
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	4019      	ands	r1, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6898      	ldr	r0, [r3, #8]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	fa00 f203 	lsl.w	r2, r0, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800308e:	4b1f      	ldr	r3, [pc, #124]	@ (800310c <HAL_ADC_ConfigChannel+0x480>)
 8003090:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b10      	cmp	r3, #16
 8003098:	d105      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800309a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d015      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030aa:	2b11      	cmp	r3, #17
 80030ac:	d105      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80030ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80030be:	2b12      	cmp	r3, #18
 80030c0:	f040 8091 	bne.w	80031e6 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80030c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f040 808a 	bne.w	80031e6 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030da:	d102      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x456>
 80030dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <HAL_ADC_ConfigChannel+0x484>)
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e002      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x45c>
 80030e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030e6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10e      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x488>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d107      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x488>
 8003104:	2301      	movs	r3, #1
 8003106:	e006      	b.n	8003116 <HAL_ADC_ConfigChannel+0x48a>
 8003108:	83fff000 	.word	0x83fff000
 800310c:	50000300 	.word	0x50000300
 8003110:	50000100 	.word	0x50000100
 8003114:	2300      	movs	r3, #0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d150      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800311a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d010      	beq.n	8003142 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d107      	bne.n	800313c <HAL_ADC_ConfigChannel+0x4b0>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_ADC_ConfigChannel+0x4b0>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_ADC_ConfigChannel+0x4b2>
 800313c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800313e:	2b00      	cmp	r3, #0
 8003140:	d13c      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b10      	cmp	r3, #16
 8003148:	d11d      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x4fa>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003152:	d118      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800315c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800315e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003160:	4b27      	ldr	r3, [pc, #156]	@ (8003200 <HAL_ADC_ConfigChannel+0x574>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a27      	ldr	r2, [pc, #156]	@ (8003204 <HAL_ADC_ConfigChannel+0x578>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0c9a      	lsrs	r2, r3, #18
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003176:	e002      	b.n	800317e <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	3b01      	subs	r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f9      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003184:	e02e      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b11      	cmp	r3, #17
 800318c:	d10b      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x51a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003196:	d106      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80031a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031a2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031a4:	e01e      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b12      	cmp	r3, #18
 80031ac:	d11a      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80031ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80031b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031b8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031ba:	e013      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80031ce:	e00a      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80031e2:	e000      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031e4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	376c      	adds	r7, #108	@ 0x6c
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000000 	.word	0x20000000
 8003204:	431bde83 	.word	0x431bde83

08003208 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003208:	b480      	push	{r7}
 800320a:	b099      	sub	sp, #100	@ 0x64
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003220:	d102      	bne.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003222:	4b5a      	ldr	r3, [pc, #360]	@ (800338c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	e002      	b.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8003228:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800322c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0a2      	b.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003242:	2302      	movs	r3, #2
 8003244:	e09b      	b.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d17f      	bne.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d179      	bne.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003268:	4b49      	ldr	r3, [pc, #292]	@ (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800326a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d040      	beq.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003286:	035b      	lsls	r3, r3, #13
 8003288:	430b      	orrs	r3, r1
 800328a:	431a      	orrs	r2, r3
 800328c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800328e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d108      	bne.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80032b0:	2300      	movs	r3, #0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d15c      	bne.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80032d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d14b      	bne.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032e0:	f023 030f 	bic.w	r3, r3, #15
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	6811      	ldr	r1, [r2, #0]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	6892      	ldr	r2, [r2, #8]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f4:	e03c      	b.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003300:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d108      	bne.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d123      	bne.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d107      	bne.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003344:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003346:	2b00      	cmp	r3, #0
 8003348:	d112      	bne.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800334a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003352:	f023 030f 	bic.w	r3, r3, #15
 8003356:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003358:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800335a:	e009      	b.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800336e:	e000      	b.n	8003372 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003370:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800337a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800337e:	4618      	mov	r0, r3
 8003380:	3764      	adds	r7, #100	@ 0x64
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	50000100 	.word	0x50000100
 8003390:	50000300 	.word	0x50000300

08003394 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d108      	bne.n	80033c0 <ADC_Enable+0x2c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <ADC_Enable+0x2c>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <ADC_Enable+0x2e>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d143      	bne.n	800344e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	4b22      	ldr	r3, [pc, #136]	@ (8003458 <ADC_Enable+0xc4>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00d      	beq.n	80033f0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	f043 0210 	orr.w	r2, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e4:	f043 0201 	orr.w	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e02f      	b.n	8003450 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003400:	f7ff f8ba 	bl	8002578 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003406:	e01b      	b.n	8003440 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003408:	f7ff f8b6 	bl	8002578 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d914      	bls.n	8003440 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d00d      	beq.n	8003440 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	f043 0210 	orr.w	r2, r3, #16
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003434:	f043 0201 	orr.w	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e007      	b.n	8003450 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d1dc      	bne.n	8003408 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	8000003f 	.word	0x8000003f

0800345c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d108      	bne.n	8003488 <ADC_Disable+0x2c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <ADC_Disable+0x2c>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <ADC_Disable+0x2e>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d047      	beq.n	800351e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030d 	and.w	r3, r3, #13
 8003498:	2b01      	cmp	r3, #1
 800349a:	d10f      	bne.n	80034bc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0202 	orr.w	r2, r2, #2
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2203      	movs	r2, #3
 80034b2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80034b4:	f7ff f860 	bl	8002578 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034ba:	e029      	b.n	8003510 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	f043 0210 	orr.w	r2, r3, #16
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e023      	b.n	8003520 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034d8:	f7ff f84e 	bl	8002578 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d914      	bls.n	8003510 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10d      	bne.n	8003510 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f043 0210 	orr.w	r2, r3, #16
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003504:	f043 0201 	orr.w	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e007      	b.n	8003520 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d0dc      	beq.n	80034d8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 809b 	beq.w	8003684 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003558:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800355c:	d12a      	bne.n	80035b4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003562:	2b01      	cmp	r3, #1
 8003564:	d126      	bne.n	80035b4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800356a:	2b01      	cmp	r3, #1
 800356c:	d122      	bne.n	80035b4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800356e:	230c      	movs	r3, #12
 8003570:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003572:	e014      	b.n	800359e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4a46      	ldr	r2, [pc, #280]	@ (8003690 <ADC_ConversionStop+0x168>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d90d      	bls.n	8003598 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	f043 0210 	orr.w	r2, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e076      	b.n	8003686 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	3301      	adds	r3, #1
 800359c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a8:	2b40      	cmp	r3, #64	@ 0x40
 80035aa:	d1e3      	bne.n	8003574 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2240      	movs	r2, #64	@ 0x40
 80035b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b60      	cmp	r3, #96	@ 0x60
 80035b8:	d015      	beq.n	80035e6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d10e      	bne.n	80035e6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d107      	bne.n	80035e6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0210 	orr.w	r2, r2, #16
 80035e4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d015      	beq.n	8003618 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d10e      	bne.n	8003618 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0220 	orr.w	r2, r2, #32
 8003616:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b60      	cmp	r3, #96	@ 0x60
 800361c:	d005      	beq.n	800362a <ADC_ConversionStop+0x102>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b6c      	cmp	r3, #108	@ 0x6c
 8003622:	d105      	bne.n	8003630 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003624:	230c      	movs	r3, #12
 8003626:	617b      	str	r3, [r7, #20]
        break;
 8003628:	e005      	b.n	8003636 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800362a:	2308      	movs	r3, #8
 800362c:	617b      	str	r3, [r7, #20]
        break;
 800362e:	e002      	b.n	8003636 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003630:	2304      	movs	r3, #4
 8003632:	617b      	str	r3, [r7, #20]
        break;
 8003634:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003636:	f7fe ff9f 	bl	8002578 <HAL_GetTick>
 800363a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800363c:	e01b      	b.n	8003676 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800363e:	f7fe ff9b 	bl	8002578 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b0b      	cmp	r3, #11
 800364a:	d914      	bls.n	8003676 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00d      	beq.n	8003676 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f043 0210 	orr.w	r2, r3, #16
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e007      	b.n	8003686 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1dc      	bne.n	800363e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	000993ff 	.word	0x000993ff

08003694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036b0:	4013      	ands	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036c6:	4a04      	ldr	r2, [pc, #16]	@ (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	60d3      	str	r3, [r2, #12]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036e0:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <__NVIC_GetPriorityGrouping+0x18>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	f003 0307 	and.w	r3, r3, #7
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	2b00      	cmp	r3, #0
 8003708:	db0b      	blt.n	8003722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	4907      	ldr	r1, [pc, #28]	@ (8003730 <__NVIC_EnableIRQ+0x38>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2001      	movs	r0, #1
 800371a:	fa00 f202 	lsl.w	r2, r0, r2
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000e100 	.word	0xe000e100

08003734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003744:	2b00      	cmp	r3, #0
 8003746:	db0a      	blt.n	800375e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	490c      	ldr	r1, [pc, #48]	@ (8003780 <__NVIC_SetPriority+0x4c>)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	0112      	lsls	r2, r2, #4
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	440b      	add	r3, r1
 8003758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800375c:	e00a      	b.n	8003774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	4908      	ldr	r1, [pc, #32]	@ (8003784 <__NVIC_SetPriority+0x50>)
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	3b04      	subs	r3, #4
 800376c:	0112      	lsls	r2, r2, #4
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	440b      	add	r3, r1
 8003772:	761a      	strb	r2, [r3, #24]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000e100 	.word	0xe000e100
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003788:	b480      	push	{r7}
 800378a:	b089      	sub	sp, #36	@ 0x24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f1c3 0307 	rsb	r3, r3, #7
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	bf28      	it	cs
 80037a6:	2304      	movcs	r3, #4
 80037a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d902      	bls.n	80037b8 <NVIC_EncodePriority+0x30>
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3b03      	subs	r3, #3
 80037b6:	e000      	b.n	80037ba <NVIC_EncodePriority+0x32>
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	401a      	ands	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d0:	f04f 31ff 	mov.w	r1, #4294967295
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	43d9      	mvns	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	4313      	orrs	r3, r2
         );
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3724      	adds	r7, #36	@ 0x24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003800:	d301      	bcc.n	8003806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003802:	2301      	movs	r3, #1
 8003804:	e00f      	b.n	8003826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003806:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <SysTick_Config+0x40>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3b01      	subs	r3, #1
 800380c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800380e:	210f      	movs	r1, #15
 8003810:	f04f 30ff 	mov.w	r0, #4294967295
 8003814:	f7ff ff8e 	bl	8003734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003818:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <SysTick_Config+0x40>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800381e:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <SysTick_Config+0x40>)
 8003820:	2207      	movs	r2, #7
 8003822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	e000e010 	.word	0xe000e010

08003834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ff29 	bl	8003694 <__NVIC_SetPriorityGrouping>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b086      	sub	sp, #24
 800384e:	af00      	add	r7, sp, #0
 8003850:	4603      	mov	r3, r0
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800385c:	f7ff ff3e 	bl	80036dc <__NVIC_GetPriorityGrouping>
 8003860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	6978      	ldr	r0, [r7, #20]
 8003868:	f7ff ff8e 	bl	8003788 <NVIC_EncodePriority>
 800386c:	4602      	mov	r2, r0
 800386e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff5d 	bl	8003734 <__NVIC_SetPriority>
}
 800387a:	bf00      	nop
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	4603      	mov	r3, r0
 800388a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800388c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff31 	bl	80036f8 <__NVIC_EnableIRQ>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ffa2 	bl	80037f0 <SysTick_Config>
 80038ac:	4603      	mov	r3, r0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e037      	b.n	800393c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80038e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80038e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9bc 	bl	8003c9c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_DMA_Start_IT+0x20>
 8003960:	2302      	movs	r3, #2
 8003962:	e04a      	b.n	80039fa <HAL_DMA_Start_IT+0xb6>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003972:	2b01      	cmp	r3, #1
 8003974:	d13a      	bne.n	80039ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2202      	movs	r2, #2
 800397a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0201 	bic.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f950 	bl	8003c40 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 020e 	orr.w	r2, r2, #14
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e00f      	b.n	80039da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 020a 	orr.w	r2, r2, #10
 80039c8:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0204 	bic.w	r2, r2, #4
 80039d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0201 	orr.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e005      	b.n	80039f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
 80039f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e02e      	b.n	8003a72 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d008      	beq.n	8003a30 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2204      	movs	r2, #4
 8003a22:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e020      	b.n	8003a72 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 020e 	bic.w	r2, r2, #14
 8003a3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a58:	2101      	movs	r1, #1
 8003a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d005      	beq.n	8003aa0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
 8003a9e:	e027      	b.n	8003af0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 020e 	bic.w	r2, r2, #14
 8003aae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ace:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
    }
  }
  return status;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	2204      	movs	r2, #4
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d024      	beq.n	8003b6c <HAL_DMA_IRQHandler+0x72>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01f      	beq.n	8003b6c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0204 	bic.w	r2, r2, #4
 8003b48:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	2104      	movs	r1, #4
 8003b54:	fa01 f202 	lsl.w	r2, r1, r2
 8003b58:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d06a      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b6a:	e065      	b.n	8003c38 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	2202      	movs	r2, #2
 8003b72:	409a      	lsls	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02c      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xdc>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d027      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 020a 	bic.w	r2, r2, #10
 8003ba2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d035      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bd4:	e030      	b.n	8003c38 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	2208      	movs	r2, #8
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d028      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x13e>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d023      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 020e 	bic.w	r2, r2, #14
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c08:	2101      	movs	r1, #1
 8003c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	4798      	blx	r3
    }
  }
}
 8003c36:	e7ff      	b.n	8003c38 <HAL_DMA_IRQHandler+0x13e>
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c56:	2101      	movs	r1, #1
 8003c58:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d108      	bne.n	8003c80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c7e:	e007      	b.n	8003c90 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	60da      	str	r2, [r3, #12]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <DMA_CalcBaseAndBitshift+0x34>)
 8003cac:	4413      	add	r3, r2
 8003cae:	4a09      	ldr	r2, [pc, #36]	@ (8003cd4 <DMA_CalcBaseAndBitshift+0x38>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	009a      	lsls	r2, r3, #2
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a06      	ldr	r2, [pc, #24]	@ (8003cd8 <DMA_CalcBaseAndBitshift+0x3c>)
 8003cc0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	bffdfff8 	.word	0xbffdfff8
 8003cd4:	cccccccd 	.word	0xcccccccd
 8003cd8:	40020000 	.word	0x40020000

08003cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cea:	e14e      	b.n	8003f8a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8140 	beq.w	8003f84 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d005      	beq.n	8003d1c <HAL_GPIO_Init+0x40>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d130      	bne.n	8003d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	2203      	movs	r2, #3
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d52:	2201      	movs	r2, #1
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f003 0201 	and.w	r2, r3, #1
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d017      	beq.n	8003dba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	2203      	movs	r2, #3
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d123      	bne.n	8003e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	08da      	lsrs	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3208      	adds	r2, #8
 8003dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	220f      	movs	r2, #15
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	08da      	lsrs	r2, r3, #3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3208      	adds	r2, #8
 8003e08:	6939      	ldr	r1, [r7, #16]
 8003e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	2203      	movs	r2, #3
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 0203 	and.w	r2, r3, #3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 809a 	beq.w	8003f84 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e50:	4b55      	ldr	r3, [pc, #340]	@ (8003fa8 <HAL_GPIO_Init+0x2cc>)
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	4a54      	ldr	r2, [pc, #336]	@ (8003fa8 <HAL_GPIO_Init+0x2cc>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6193      	str	r3, [r2, #24]
 8003e5c:	4b52      	ldr	r3, [pc, #328]	@ (8003fa8 <HAL_GPIO_Init+0x2cc>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e68:	4a50      	ldr	r2, [pc, #320]	@ (8003fac <HAL_GPIO_Init+0x2d0>)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	089b      	lsrs	r3, r3, #2
 8003e6e:	3302      	adds	r3, #2
 8003e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	220f      	movs	r2, #15
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e92:	d013      	beq.n	8003ebc <HAL_GPIO_Init+0x1e0>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a46      	ldr	r2, [pc, #280]	@ (8003fb0 <HAL_GPIO_Init+0x2d4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_GPIO_Init+0x1dc>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a45      	ldr	r2, [pc, #276]	@ (8003fb4 <HAL_GPIO_Init+0x2d8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <HAL_GPIO_Init+0x1d8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a44      	ldr	r2, [pc, #272]	@ (8003fb8 <HAL_GPIO_Init+0x2dc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d101      	bne.n	8003eb0 <HAL_GPIO_Init+0x1d4>
 8003eac:	2303      	movs	r3, #3
 8003eae:	e006      	b.n	8003ebe <HAL_GPIO_Init+0x1e2>
 8003eb0:	2305      	movs	r3, #5
 8003eb2:	e004      	b.n	8003ebe <HAL_GPIO_Init+0x1e2>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e002      	b.n	8003ebe <HAL_GPIO_Init+0x1e2>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <HAL_GPIO_Init+0x1e2>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	f002 0203 	and.w	r2, r2, #3
 8003ec4:	0092      	lsls	r2, r2, #2
 8003ec6:	4093      	lsls	r3, r2
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ece:	4937      	ldr	r1, [pc, #220]	@ (8003fac <HAL_GPIO_Init+0x2d0>)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	089b      	lsrs	r3, r3, #2
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003edc:	4b37      	ldr	r3, [pc, #220]	@ (8003fbc <HAL_GPIO_Init+0x2e0>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f00:	4a2e      	ldr	r2, [pc, #184]	@ (8003fbc <HAL_GPIO_Init+0x2e0>)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f06:	4b2d      	ldr	r3, [pc, #180]	@ (8003fbc <HAL_GPIO_Init+0x2e0>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f2a:	4a24      	ldr	r2, [pc, #144]	@ (8003fbc <HAL_GPIO_Init+0x2e0>)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f30:	4b22      	ldr	r3, [pc, #136]	@ (8003fbc <HAL_GPIO_Init+0x2e0>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f54:	4a19      	ldr	r2, [pc, #100]	@ (8003fbc <HAL_GPIO_Init+0x2e0>)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f5a:	4b18      	ldr	r3, [pc, #96]	@ (8003fbc <HAL_GPIO_Init+0x2e0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8003fbc <HAL_GPIO_Init+0x2e0>)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	3301      	adds	r3, #1
 8003f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f47f aea9 	bne.w	8003cec <HAL_GPIO_Init+0x10>
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40010000 	.word	0x40010000
 8003fb0:	48000400 	.word	0x48000400
 8003fb4:	48000800 	.word	0x48000800
 8003fb8:	48000c00 	.word	0x48000c00
 8003fbc:	40010400 	.word	0x40010400

08003fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
 8003fdc:	e001      	b.n	8003fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004000:	787b      	ldrb	r3, [r7, #1]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800400c:	e002      	b.n	8004014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4013      	ands	r3, r2
 8004038:	041a      	lsls	r2, r3, #16
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	43d9      	mvns	r1, r3
 800403e:	887b      	ldrh	r3, [r7, #2]
 8004040:	400b      	ands	r3, r1
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800405e:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d006      	beq.n	8004078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800406a:	4a05      	ldr	r2, [pc, #20]	@ (8004080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fd f8e8 	bl	8001248 <HAL_GPIO_EXTI_Callback>
  }
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40010400 	.word	0x40010400

08004084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800408a:	af00      	add	r7, sp, #0
 800408c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004090:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004094:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f000 bff4 	b.w	8005092 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 816d 	beq.w	800439a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80040c0:	4bb4      	ldr	r3, [pc, #720]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d00c      	beq.n	80040e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040cc:	4bb1      	ldr	r3, [pc, #708]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d157      	bne.n	8004188 <HAL_RCC_OscConfig+0x104>
 80040d8:	4bae      	ldr	r3, [pc, #696]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e4:	d150      	bne.n	8004188 <HAL_RCC_OscConfig+0x104>
 80040e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040ea:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fe:	fab3 f383 	clz	r3, r3
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b3f      	cmp	r3, #63	@ 0x3f
 8004106:	d802      	bhi.n	800410e <HAL_RCC_OscConfig+0x8a>
 8004108:	4ba2      	ldr	r3, [pc, #648]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	e015      	b.n	800413a <HAL_RCC_OscConfig+0xb6>
 800410e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004112:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004122:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004126:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800412a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004136:	4b97      	ldr	r3, [pc, #604]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800413e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004142:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004146:	fa92 f2a2 	rbit	r2, r2
 800414a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800414e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004152:	fab2 f282 	clz	r2, r2
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	f042 0220 	orr.w	r2, r2, #32
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	f002 021f 	and.w	r2, r2, #31
 8004162:	2101      	movs	r1, #1
 8004164:	fa01 f202 	lsl.w	r2, r1, r2
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8114 	beq.w	8004398 <HAL_RCC_OscConfig+0x314>
 8004170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004174:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 810b 	bne.w	8004398 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f000 bf85 	b.w	8005092 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004198:	d106      	bne.n	80041a8 <HAL_RCC_OscConfig+0x124>
 800419a:	4b7e      	ldr	r3, [pc, #504]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7d      	ldr	r2, [pc, #500]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80041a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e036      	b.n	8004216 <HAL_RCC_OscConfig+0x192>
 80041a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10c      	bne.n	80041d2 <HAL_RCC_OscConfig+0x14e>
 80041b8:	4b76      	ldr	r3, [pc, #472]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a75      	ldr	r2, [pc, #468]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80041be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4b73      	ldr	r3, [pc, #460]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a72      	ldr	r2, [pc, #456]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80041ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e021      	b.n	8004216 <HAL_RCC_OscConfig+0x192>
 80041d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041e2:	d10c      	bne.n	80041fe <HAL_RCC_OscConfig+0x17a>
 80041e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a6a      	ldr	r2, [pc, #424]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80041ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b68      	ldr	r3, [pc, #416]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a67      	ldr	r2, [pc, #412]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e00b      	b.n	8004216 <HAL_RCC_OscConfig+0x192>
 80041fe:	4b65      	ldr	r3, [pc, #404]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a64      	ldr	r2, [pc, #400]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 8004204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4b62      	ldr	r3, [pc, #392]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a61      	ldr	r2, [pc, #388]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 8004210:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004214:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004216:	4b5f      	ldr	r3, [pc, #380]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 8004218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421a:	f023 020f 	bic.w	r2, r3, #15
 800421e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004222:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	495a      	ldr	r1, [pc, #360]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 800422c:	4313      	orrs	r3, r2
 800422e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004234:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d054      	beq.n	80042ea <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fe f99a 	bl	8002578 <HAL_GetTick>
 8004244:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800424a:	f7fe f995 	bl	8002578 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	@ 0x64
 8004258:	d902      	bls.n	8004260 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	f000 bf19 	b.w	8005092 <HAL_RCC_OscConfig+0x100e>
 8004260:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004264:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800426c:	fa93 f3a3 	rbit	r3, r3
 8004270:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8004274:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004278:	fab3 f383 	clz	r3, r3
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004280:	d802      	bhi.n	8004288 <HAL_RCC_OscConfig+0x204>
 8004282:	4b44      	ldr	r3, [pc, #272]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	e015      	b.n	80042b4 <HAL_RCC_OscConfig+0x230>
 8004288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800428c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800429c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042a0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80042a4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80042b0:	4b38      	ldr	r3, [pc, #224]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042b8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80042bc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80042c0:	fa92 f2a2 	rbit	r2, r2
 80042c4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80042c8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80042cc:	fab2 f282 	clz	r2, r2
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	f042 0220 	orr.w	r2, r2, #32
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	f002 021f 	and.w	r2, r2, #31
 80042dc:	2101      	movs	r1, #1
 80042de:	fa01 f202 	lsl.w	r2, r1, r2
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0b0      	beq.n	800424a <HAL_RCC_OscConfig+0x1c6>
 80042e8:	e057      	b.n	800439a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ea:	f7fe f945 	bl	8002578 <HAL_GetTick>
 80042ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f2:	e00a      	b.n	800430a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fe f940 	bl	8002578 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b64      	cmp	r3, #100	@ 0x64
 8004302:	d902      	bls.n	800430a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	f000 bec4 	b.w	8005092 <HAL_RCC_OscConfig+0x100e>
 800430a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800430e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800431e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004322:	fab3 f383 	clz	r3, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b3f      	cmp	r3, #63	@ 0x3f
 800432a:	d802      	bhi.n	8004332 <HAL_RCC_OscConfig+0x2ae>
 800432c:	4b19      	ldr	r3, [pc, #100]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	e015      	b.n	800435e <HAL_RCC_OscConfig+0x2da>
 8004332:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004336:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800433e:	fa93 f3a3 	rbit	r3, r3
 8004342:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004346:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800434a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800434e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800435a:	4b0e      	ldr	r3, [pc, #56]	@ (8004394 <HAL_RCC_OscConfig+0x310>)
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004362:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004366:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800436a:	fa92 f2a2 	rbit	r2, r2
 800436e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004372:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004376:	fab2 f282 	clz	r2, r2
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	f042 0220 	orr.w	r2, r2, #32
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	f002 021f 	and.w	r2, r2, #31
 8004386:	2101      	movs	r1, #1
 8004388:	fa01 f202 	lsl.w	r2, r1, r2
 800438c:	4013      	ands	r3, r2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1b0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x270>
 8004392:	e002      	b.n	800439a <HAL_RCC_OscConfig+0x316>
 8004394:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800439e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 816c 	beq.w	8004688 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043b0:	4bcc      	ldr	r3, [pc, #816]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80043bc:	4bc9      	ldr	r3, [pc, #804]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d16d      	bne.n	80044a4 <HAL_RCC_OscConfig+0x420>
 80043c8:	4bc6      	ldr	r3, [pc, #792]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d167      	bne.n	80044a4 <HAL_RCC_OscConfig+0x420>
 80043d4:	2302      	movs	r3, #2
 80043d6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80043e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80043f2:	d802      	bhi.n	80043fa <HAL_RCC_OscConfig+0x376>
 80043f4:	4bbb      	ldr	r3, [pc, #748]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	e013      	b.n	8004422 <HAL_RCC_OscConfig+0x39e>
 80043fa:	2302      	movs	r3, #2
 80043fc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004404:	fa93 f3a3 	rbit	r3, r3
 8004408:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800440c:	2302      	movs	r3, #2
 800440e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004412:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800441e:	4bb1      	ldr	r3, [pc, #708]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	2202      	movs	r2, #2
 8004424:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004428:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800442c:	fa92 f2a2 	rbit	r2, r2
 8004430:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004434:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004438:	fab2 f282 	clz	r2, r2
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	f042 0220 	orr.w	r2, r2, #32
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	f002 021f 	and.w	r2, r2, #31
 8004448:	2101      	movs	r1, #1
 800444a:	fa01 f202 	lsl.w	r2, r1, r2
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCC_OscConfig+0x3e6>
 8004454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004458:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d002      	beq.n	800446a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f000 be14 	b.w	8005092 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446a:	4b9e      	ldr	r3, [pc, #632]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004476:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	21f8      	movs	r1, #248	@ 0xf8
 8004480:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004484:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004488:	fa91 f1a1 	rbit	r1, r1
 800448c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004490:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004494:	fab1 f181 	clz	r1, r1
 8004498:	b2c9      	uxtb	r1, r1
 800449a:	408b      	lsls	r3, r1
 800449c:	4991      	ldr	r1, [pc, #580]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	e0f1      	b.n	8004688 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8083 	beq.w	80045bc <HAL_RCC_OscConfig+0x538>
 80044b6:	2301      	movs	r3, #1
 80044b8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80044c0:	fa93 f3a3 	rbit	r3, r3
 80044c4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80044c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044cc:	fab3 f383 	clz	r3, r3
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80044d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	461a      	mov	r2, r3
 80044de:	2301      	movs	r3, #1
 80044e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e2:	f7fe f849 	bl	8002578 <HAL_GetTick>
 80044e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ec:	f7fe f844 	bl	8002578 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d902      	bls.n	8004502 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	f000 bdc8 	b.w	8005092 <HAL_RCC_OscConfig+0x100e>
 8004502:	2302      	movs	r3, #2
 8004504:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800450c:	fa93 f3a3 	rbit	r3, r3
 8004510:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004514:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004520:	d802      	bhi.n	8004528 <HAL_RCC_OscConfig+0x4a4>
 8004522:	4b70      	ldr	r3, [pc, #448]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	e013      	b.n	8004550 <HAL_RCC_OscConfig+0x4cc>
 8004528:	2302      	movs	r3, #2
 800452a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800453a:	2302      	movs	r3, #2
 800453c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004540:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004544:	fa93 f3a3 	rbit	r3, r3
 8004548:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800454c:	4b65      	ldr	r3, [pc, #404]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	2202      	movs	r2, #2
 8004552:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004556:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800455a:	fa92 f2a2 	rbit	r2, r2
 800455e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004562:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004566:	fab2 f282 	clz	r2, r2
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	f042 0220 	orr.w	r2, r2, #32
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	f002 021f 	and.w	r2, r2, #31
 8004576:	2101      	movs	r1, #1
 8004578:	fa01 f202 	lsl.w	r2, r1, r2
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0b4      	beq.n	80044ec <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004582:	4b58      	ldr	r3, [pc, #352]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800458a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800458e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	21f8      	movs	r1, #248	@ 0xf8
 8004598:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80045a0:	fa91 f1a1 	rbit	r1, r1
 80045a4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80045a8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80045ac:	fab1 f181 	clz	r1, r1
 80045b0:	b2c9      	uxtb	r1, r1
 80045b2:	408b      	lsls	r3, r1
 80045b4:	494b      	ldr	r1, [pc, #300]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]
 80045ba:	e065      	b.n	8004688 <HAL_RCC_OscConfig+0x604>
 80045bc:	2301      	movs	r3, #1
 80045be:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80045ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80045dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	461a      	mov	r2, r3
 80045e4:	2300      	movs	r3, #0
 80045e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7fd ffc6 	bl	8002578 <HAL_GetTick>
 80045ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f0:	e00a      	b.n	8004608 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f2:	f7fd ffc1 	bl	8002578 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d902      	bls.n	8004608 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	f000 bd45 	b.w	8005092 <HAL_RCC_OscConfig+0x100e>
 8004608:	2302      	movs	r3, #2
 800460a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800461a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b3f      	cmp	r3, #63	@ 0x3f
 8004626:	d802      	bhi.n	800462e <HAL_RCC_OscConfig+0x5aa>
 8004628:	4b2e      	ldr	r3, [pc, #184]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	e013      	b.n	8004656 <HAL_RCC_OscConfig+0x5d2>
 800462e:	2302      	movs	r3, #2
 8004630:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004638:	fa93 f3a3 	rbit	r3, r3
 800463c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004640:	2302      	movs	r3, #2
 8004642:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004646:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800464a:	fa93 f3a3 	rbit	r3, r3
 800464e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004652:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <HAL_RCC_OscConfig+0x660>)
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	2202      	movs	r2, #2
 8004658:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800465c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004660:	fa92 f2a2 	rbit	r2, r2
 8004664:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004668:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800466c:	fab2 f282 	clz	r2, r2
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	f042 0220 	orr.w	r2, r2, #32
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	f002 021f 	and.w	r2, r2, #31
 800467c:	2101      	movs	r1, #1
 800467e:	fa01 f202 	lsl.w	r2, r1, r2
 8004682:	4013      	ands	r3, r2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1b4      	bne.n	80045f2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800468c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8115 	beq.w	80048c8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800469e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d07e      	beq.n	80047ac <HAL_RCC_OscConfig+0x728>
 80046ae:	2301      	movs	r3, #1
 80046b0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80046c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c4:	fab3 f383 	clz	r3, r3
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <HAL_RCC_OscConfig+0x664>)
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	461a      	mov	r2, r3
 80046d4:	2301      	movs	r3, #1
 80046d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d8:	f7fd ff4e 	bl	8002578 <HAL_GetTick>
 80046dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e0:	e00f      	b.n	8004702 <HAL_RCC_OscConfig+0x67e>
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000
 80046e8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ec:	f7fd ff44 	bl	8002578 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d902      	bls.n	8004702 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	f000 bcc8 	b.w	8005092 <HAL_RCC_OscConfig+0x100e>
 8004702:	2302      	movs	r3, #2
 8004704:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800470c:	fa93 f3a3 	rbit	r3, r3
 8004710:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004718:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800471c:	2202      	movs	r2, #2
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004724:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	fa93 f2a3 	rbit	r2, r3
 800472e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004740:	2202      	movs	r2, #2
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	fa93 f2a3 	rbit	r2, r3
 8004752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004756:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800475a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475c:	4bb0      	ldr	r3, [pc, #704]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 800475e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004764:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004768:	2102      	movs	r1, #2
 800476a:	6019      	str	r1, [r3, #0]
 800476c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004770:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	fa93 f1a3 	rbit	r1, r3
 800477a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800477e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004782:	6019      	str	r1, [r3, #0]
  return result;
 8004784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004788:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	2101      	movs	r1, #1
 80047a0:	fa01 f303 	lsl.w	r3, r1, r3
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0a0      	beq.n	80046ec <HAL_RCC_OscConfig+0x668>
 80047aa:	e08d      	b.n	80048c8 <HAL_RCC_OscConfig+0x844>
 80047ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	fa93 f2a3 	rbit	r2, r3
 80047c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80047ce:	601a      	str	r2, [r3, #0]
  return result;
 80047d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80047d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047da:	fab3 f383 	clz	r3, r3
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	4b90      	ldr	r3, [pc, #576]	@ (8004a24 <HAL_RCC_OscConfig+0x9a0>)
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	461a      	mov	r2, r3
 80047ea:	2300      	movs	r3, #0
 80047ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ee:	f7fd fec3 	bl	8002578 <HAL_GetTick>
 80047f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f6:	e00a      	b.n	800480e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f8:	f7fd febe 	bl	8002578 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d902      	bls.n	800480e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	f000 bc42 	b.w	8005092 <HAL_RCC_OscConfig+0x100e>
 800480e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004812:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004816:	2202      	movs	r2, #2
 8004818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800481e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	fa93 f2a3 	rbit	r2, r3
 8004828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800482c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004836:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800483a:	2202      	movs	r2, #2
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004842:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	fa93 f2a3 	rbit	r2, r3
 800484c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004850:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800485a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800485e:	2202      	movs	r2, #2
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004866:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	fa93 f2a3 	rbit	r2, r3
 8004870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004874:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004878:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800487a:	4b69      	ldr	r3, [pc, #420]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 800487c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800487e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004882:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004886:	2102      	movs	r1, #2
 8004888:	6019      	str	r1, [r3, #0]
 800488a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800488e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	fa93 f1a3 	rbit	r1, r3
 8004898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800489c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80048a0:	6019      	str	r1, [r3, #0]
  return result;
 80048a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	2101      	movs	r1, #1
 80048be:	fa01 f303 	lsl.w	r3, r1, r3
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d197      	bne.n	80047f8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 819e 	beq.w	8004c1a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048de:	2300      	movs	r3, #0
 80048e0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d116      	bne.n	800491e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048fa:	61d3      	str	r3, [r2, #28]
 80048fc:	4b48      	ldr	r3, [pc, #288]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004908:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004912:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004916:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491e:	4b42      	ldr	r3, [pc, #264]	@ (8004a28 <HAL_RCC_OscConfig+0x9a4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d11a      	bne.n	8004960 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800492a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a28 <HAL_RCC_OscConfig+0x9a4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a28 <HAL_RCC_OscConfig+0x9a4>)
 8004930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004934:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004936:	f7fd fe1f 	bl	8002578 <HAL_GetTick>
 800493a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493e:	e009      	b.n	8004954 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004940:	f7fd fe1a 	bl	8002578 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b64      	cmp	r3, #100	@ 0x64
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e39e      	b.n	8005092 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	4b34      	ldr	r3, [pc, #208]	@ (8004a28 <HAL_RCC_OscConfig+0x9a4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0ef      	beq.n	8004940 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004964:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d106      	bne.n	800497e <HAL_RCC_OscConfig+0x8fa>
 8004970:	4b2b      	ldr	r3, [pc, #172]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	4a2a      	ldr	r2, [pc, #168]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6213      	str	r3, [r2, #32]
 800497c:	e035      	b.n	80049ea <HAL_RCC_OscConfig+0x966>
 800497e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004982:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x924>
 800498e:	4b24      	ldr	r3, [pc, #144]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	4a23      	ldr	r2, [pc, #140]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6213      	str	r3, [r2, #32]
 800499a:	4b21      	ldr	r3, [pc, #132]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	4a20      	ldr	r2, [pc, #128]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80049a0:	f023 0304 	bic.w	r3, r3, #4
 80049a4:	6213      	str	r3, [r2, #32]
 80049a6:	e020      	b.n	80049ea <HAL_RCC_OscConfig+0x966>
 80049a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	2b05      	cmp	r3, #5
 80049b6:	d10c      	bne.n	80049d2 <HAL_RCC_OscConfig+0x94e>
 80049b8:	4b19      	ldr	r3, [pc, #100]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	4a18      	ldr	r2, [pc, #96]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80049be:	f043 0304 	orr.w	r3, r3, #4
 80049c2:	6213      	str	r3, [r2, #32]
 80049c4:	4b16      	ldr	r3, [pc, #88]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	4a15      	ldr	r2, [pc, #84]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6213      	str	r3, [r2, #32]
 80049d0:	e00b      	b.n	80049ea <HAL_RCC_OscConfig+0x966>
 80049d2:	4b13      	ldr	r3, [pc, #76]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4a12      	ldr	r2, [pc, #72]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	6213      	str	r3, [r2, #32]
 80049de:	4b10      	ldr	r3, [pc, #64]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004a20 <HAL_RCC_OscConfig+0x99c>)
 80049e4:	f023 0304 	bic.w	r3, r3, #4
 80049e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 8087 	beq.w	8004b0a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fc:	f7fd fdbc 	bl	8002578 <HAL_GetTick>
 8004a00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	e012      	b.n	8004a2c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a06:	f7fd fdb7 	bl	8002578 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d908      	bls.n	8004a2c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e339      	b.n	8005092 <HAL_RCC_OscConfig+0x100e>
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	10908120 	.word	0x10908120
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a30:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004a34:	2202      	movs	r2, #2
 8004a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a3c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	fa93 f2a3 	rbit	r2, r3
 8004a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a54:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004a58:	2202      	movs	r2, #2
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a60:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	fa93 f2a3 	rbit	r2, r3
 8004a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a6e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004a72:	601a      	str	r2, [r3, #0]
  return result;
 8004a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a78:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004a7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <HAL_RCC_OscConfig+0xa10>
 8004a8e:	4b98      	ldr	r3, [pc, #608]	@ (8004cf0 <HAL_RCC_OscConfig+0xc6c>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	e013      	b.n	8004abc <HAL_RCC_OscConfig+0xa38>
 8004a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a98:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	fa93 f2a3 	rbit	r2, r3
 8004aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	4b8d      	ldr	r3, [pc, #564]	@ (8004cf0 <HAL_RCC_OscConfig+0xc6c>)
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ac0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	6011      	str	r1, [r2, #0]
 8004ac8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004acc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	fa92 f1a2 	rbit	r1, r2
 8004ad6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ada:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004ade:	6011      	str	r1, [r2, #0]
  return result;
 8004ae0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ae4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	fab2 f282 	clz	r2, r2
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	f002 021f 	and.w	r2, r2, #31
 8004afa:	2101      	movs	r1, #1
 8004afc:	fa01 f202 	lsl.w	r2, r1, r2
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f43f af7f 	beq.w	8004a06 <HAL_RCC_OscConfig+0x982>
 8004b08:	e07d      	b.n	8004c06 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0a:	f7fd fd35 	bl	8002578 <HAL_GetTick>
 8004b0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b12:	e00b      	b.n	8004b2c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b14:	f7fd fd30 	bl	8002578 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e2b2      	b.n	8005092 <HAL_RCC_OscConfig+0x100e>
 8004b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b30:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004b34:	2202      	movs	r2, #2
 8004b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b3c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	fa93 f2a3 	rbit	r2, r3
 8004b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b4a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b54:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004b58:	2202      	movs	r2, #2
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b60:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	fa93 f2a3 	rbit	r2, r3
 8004b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b6e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004b72:	601a      	str	r2, [r3, #0]
  return result;
 8004b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b78:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004b7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7e:	fab3 f383 	clz	r3, r3
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <HAL_RCC_OscConfig+0xb10>
 8004b8e:	4b58      	ldr	r3, [pc, #352]	@ (8004cf0 <HAL_RCC_OscConfig+0xc6c>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	e013      	b.n	8004bbc <HAL_RCC_OscConfig+0xb38>
 8004b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b98:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	fa93 f2a3 	rbit	r2, r3
 8004bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8004cf0 <HAL_RCC_OscConfig+0xc6c>)
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bc0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004bc4:	2102      	movs	r1, #2
 8004bc6:	6011      	str	r1, [r2, #0]
 8004bc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bcc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	fa92 f1a2 	rbit	r1, r2
 8004bd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bda:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004bde:	6011      	str	r1, [r2, #0]
  return result;
 8004be0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004be4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	fab2 f282 	clz	r2, r2
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	f002 021f 	and.w	r2, r2, #31
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d186      	bne.n	8004b14 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c06:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d105      	bne.n	8004c1a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c0e:	4b38      	ldr	r3, [pc, #224]	@ (8004cf0 <HAL_RCC_OscConfig+0xc6c>)
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	4a37      	ldr	r2, [pc, #220]	@ (8004cf0 <HAL_RCC_OscConfig+0xc6c>)
 8004c14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c18:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 8232 	beq.w	8005090 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c2c:	4b30      	ldr	r3, [pc, #192]	@ (8004cf0 <HAL_RCC_OscConfig+0xc6c>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	f000 8201 	beq.w	800503c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	f040 8157 	bne.w	8004efa <HAL_RCC_OscConfig+0xe76>
 8004c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c50:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004c54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c5e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	fa93 f2a3 	rbit	r2, r3
 8004c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c6c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004c70:	601a      	str	r2, [r3, #0]
  return result;
 8004c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c76:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004c7a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7c:	fab3 f383 	clz	r3, r3
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004c86:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c92:	f7fd fc71 	bl	8002578 <HAL_GetTick>
 8004c96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c9a:	e009      	b.n	8004cb0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c9c:	f7fd fc6c 	bl	8002578 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e1f0      	b.n	8005092 <HAL_RCC_OscConfig+0x100e>
 8004cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cb4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004cb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	fa93 f2a3 	rbit	r2, r3
 8004ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004cd4:	601a      	str	r2, [r3, #0]
  return result;
 8004cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cda:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004cde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce0:	fab3 f383 	clz	r3, r3
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ce8:	d804      	bhi.n	8004cf4 <HAL_RCC_OscConfig+0xc70>
 8004cea:	4b01      	ldr	r3, [pc, #4]	@ (8004cf0 <HAL_RCC_OscConfig+0xc6c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	e029      	b.n	8004d44 <HAL_RCC_OscConfig+0xcc0>
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cf8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004cfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d06:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	fa93 f2a3 	rbit	r2, r3
 8004d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d14:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004d22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d2c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	fa93 f2a3 	rbit	r2, r3
 8004d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d3a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	4bc3      	ldr	r3, [pc, #780]	@ (8005050 <HAL_RCC_OscConfig+0xfcc>)
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d48:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004d4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d56:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	fa92 f1a2 	rbit	r1, r2
 8004d60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d64:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004d68:	6011      	str	r1, [r2, #0]
  return result;
 8004d6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d6e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	fab2 f282 	clz	r2, r2
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	f042 0220 	orr.w	r2, r2, #32
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	f002 021f 	and.w	r2, r2, #31
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d185      	bne.n	8004c9c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d90:	4baf      	ldr	r3, [pc, #700]	@ (8005050 <HAL_RCC_OscConfig+0xfcc>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	430b      	orrs	r3, r1
 8004db2:	49a7      	ldr	r1, [pc, #668]	@ (8005050 <HAL_RCC_OscConfig+0xfcc>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	604b      	str	r3, [r1, #4]
 8004db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dbc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004dc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dca:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	fa93 f2a3 	rbit	r2, r3
 8004dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004ddc:	601a      	str	r2, [r3, #0]
  return result;
 8004dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004de2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004de6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de8:	fab3 f383 	clz	r3, r3
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004df2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfe:	f7fd fbbb 	bl	8002578 <HAL_GetTick>
 8004e02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e06:	e009      	b.n	8004e1c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e08:	f7fd fbb6 	bl	8002578 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e13a      	b.n	8005092 <HAL_RCC_OscConfig+0x100e>
 8004e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e20:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004e24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e2e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	fa93 f2a3 	rbit	r2, r3
 8004e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e3c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004e40:	601a      	str	r2, [r3, #0]
  return result;
 8004e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e46:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004e4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e4c:	fab3 f383 	clz	r3, r3
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e54:	d802      	bhi.n	8004e5c <HAL_RCC_OscConfig+0xdd8>
 8004e56:	4b7e      	ldr	r3, [pc, #504]	@ (8005050 <HAL_RCC_OscConfig+0xfcc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	e027      	b.n	8004eac <HAL_RCC_OscConfig+0xe28>
 8004e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e60:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004e64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e6e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	fa93 f2a3 	rbit	r2, r3
 8004e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e7c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e86:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004e8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e94:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	fa93 f2a3 	rbit	r2, r3
 8004e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ea2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	4b69      	ldr	r3, [pc, #420]	@ (8005050 <HAL_RCC_OscConfig+0xfcc>)
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004eb0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004eb4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004eb8:	6011      	str	r1, [r2, #0]
 8004eba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ebe:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	fa92 f1a2 	rbit	r1, r2
 8004ec8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ecc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ed0:	6011      	str	r1, [r2, #0]
  return result;
 8004ed2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ed6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	fab2 f282 	clz	r2, r2
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	f042 0220 	orr.w	r2, r2, #32
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	f002 021f 	and.w	r2, r2, #31
 8004eec:	2101      	movs	r1, #1
 8004eee:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d087      	beq.n	8004e08 <HAL_RCC_OscConfig+0xd84>
 8004ef8:	e0ca      	b.n	8005090 <HAL_RCC_OscConfig+0x100c>
 8004efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004efe:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f02:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f0c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	fa93 f2a3 	rbit	r2, r3
 8004f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f1a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004f1e:	601a      	str	r2, [r3, #0]
  return result;
 8004f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f24:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004f28:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2a:	fab3 f383 	clz	r3, r3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004f34:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f40:	f7fd fb1a 	bl	8002578 <HAL_GetTick>
 8004f44:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f48:	e009      	b.n	8004f5e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4a:	f7fd fb15 	bl	8002578 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e099      	b.n	8005092 <HAL_RCC_OscConfig+0x100e>
 8004f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f62:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004f66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f70:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	fa93 f2a3 	rbit	r2, r3
 8004f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f7e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004f82:	601a      	str	r2, [r3, #0]
  return result;
 8004f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f88:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004f8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f8e:	fab3 f383 	clz	r3, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b3f      	cmp	r3, #63	@ 0x3f
 8004f96:	d802      	bhi.n	8004f9e <HAL_RCC_OscConfig+0xf1a>
 8004f98:	4b2d      	ldr	r3, [pc, #180]	@ (8005050 <HAL_RCC_OscConfig+0xfcc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	e027      	b.n	8004fee <HAL_RCC_OscConfig+0xf6a>
 8004f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fa2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004fa6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fb0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	fa93 f2a3 	rbit	r2, r3
 8004fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fbe:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fc8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004fcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	fa93 f2a3 	rbit	r2, r3
 8004fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	4b19      	ldr	r3, [pc, #100]	@ (8005050 <HAL_RCC_OscConfig+0xfcc>)
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ff2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004ff6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004ffa:	6011      	str	r1, [r2, #0]
 8004ffc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005000:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	fa92 f1a2 	rbit	r1, r2
 800500a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800500e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005012:	6011      	str	r1, [r2, #0]
  return result;
 8005014:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005018:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	fab2 f282 	clz	r2, r2
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	f042 0220 	orr.w	r2, r2, #32
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	f002 021f 	and.w	r2, r2, #31
 800502e:	2101      	movs	r1, #1
 8005030:	fa01 f202 	lsl.w	r2, r1, r2
 8005034:	4013      	ands	r3, r2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d187      	bne.n	8004f4a <HAL_RCC_OscConfig+0xec6>
 800503a:	e029      	b.n	8005090 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800503c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005040:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d103      	bne.n	8005054 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e020      	b.n	8005092 <HAL_RCC_OscConfig+0x100e>
 8005050:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005054:	4b11      	ldr	r3, [pc, #68]	@ (800509c <HAL_RCC_OscConfig+0x1018>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800505c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005060:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005068:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	429a      	cmp	r2, r3
 8005072:	d10b      	bne.n	800508c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005074:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005078:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800507c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005080:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005088:	429a      	cmp	r2, r3
 800508a:	d001      	beq.n	8005090 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40021000 	.word	0x40021000

080050a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b09e      	sub	sp, #120	@ 0x78
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e154      	b.n	8005362 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b8:	4b89      	ldr	r3, [pc, #548]	@ (80052e0 <HAL_RCC_ClockConfig+0x240>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d910      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c6:	4b86      	ldr	r3, [pc, #536]	@ (80052e0 <HAL_RCC_ClockConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 0207 	bic.w	r2, r3, #7
 80050ce:	4984      	ldr	r1, [pc, #528]	@ (80052e0 <HAL_RCC_ClockConfig+0x240>)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b82      	ldr	r3, [pc, #520]	@ (80052e0 <HAL_RCC_ClockConfig+0x240>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e13c      	b.n	8005362 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f4:	4b7b      	ldr	r3, [pc, #492]	@ (80052e4 <HAL_RCC_ClockConfig+0x244>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4978      	ldr	r1, [pc, #480]	@ (80052e4 <HAL_RCC_ClockConfig+0x244>)
 8005102:	4313      	orrs	r3, r2
 8005104:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 80cd 	beq.w	80052ae <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d137      	bne.n	800518c <HAL_RCC_ClockConfig+0xec>
 800511c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005120:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005124:	fa93 f3a3 	rbit	r3, r3
 8005128:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800512a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512c:	fab3 f383 	clz	r3, r3
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b3f      	cmp	r3, #63	@ 0x3f
 8005134:	d802      	bhi.n	800513c <HAL_RCC_ClockConfig+0x9c>
 8005136:	4b6b      	ldr	r3, [pc, #428]	@ (80052e4 <HAL_RCC_ClockConfig+0x244>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	e00f      	b.n	800515c <HAL_RCC_ClockConfig+0xbc>
 800513c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005140:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005144:	fa93 f3a3 	rbit	r3, r3
 8005148:	667b      	str	r3, [r7, #100]	@ 0x64
 800514a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800514e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005150:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005152:	fa93 f3a3 	rbit	r3, r3
 8005156:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005158:	4b62      	ldr	r3, [pc, #392]	@ (80052e4 <HAL_RCC_ClockConfig+0x244>)
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005160:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005162:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005164:	fa92 f2a2 	rbit	r2, r2
 8005168:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800516a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800516c:	fab2 f282 	clz	r2, r2
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	f042 0220 	orr.w	r2, r2, #32
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	f002 021f 	and.w	r2, r2, #31
 800517c:	2101      	movs	r1, #1
 800517e:	fa01 f202 	lsl.w	r2, r1, r2
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d171      	bne.n	800526c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0ea      	b.n	8005362 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d137      	bne.n	8005204 <HAL_RCC_ClockConfig+0x164>
 8005194:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005198:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800519c:	fa93 f3a3 	rbit	r3, r3
 80051a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80051a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a4:	fab3 f383 	clz	r3, r3
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80051ac:	d802      	bhi.n	80051b4 <HAL_RCC_ClockConfig+0x114>
 80051ae:	4b4d      	ldr	r3, [pc, #308]	@ (80052e4 <HAL_RCC_ClockConfig+0x244>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	e00f      	b.n	80051d4 <HAL_RCC_ClockConfig+0x134>
 80051b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051bc:	fa93 f3a3 	rbit	r3, r3
 80051c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ca:	fa93 f3a3 	rbit	r3, r3
 80051ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051d0:	4b44      	ldr	r3, [pc, #272]	@ (80052e4 <HAL_RCC_ClockConfig+0x244>)
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051d8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80051da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051dc:	fa92 f2a2 	rbit	r2, r2
 80051e0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80051e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051e4:	fab2 f282 	clz	r2, r2
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	f042 0220 	orr.w	r2, r2, #32
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	f002 021f 	and.w	r2, r2, #31
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f202 	lsl.w	r2, r1, r2
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d135      	bne.n	800526c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0ae      	b.n	8005362 <HAL_RCC_ClockConfig+0x2c2>
 8005204:	2302      	movs	r3, #2
 8005206:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520a:	fa93 f3a3 	rbit	r3, r3
 800520e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005212:	fab3 f383 	clz	r3, r3
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b3f      	cmp	r3, #63	@ 0x3f
 800521a:	d802      	bhi.n	8005222 <HAL_RCC_ClockConfig+0x182>
 800521c:	4b31      	ldr	r3, [pc, #196]	@ (80052e4 <HAL_RCC_ClockConfig+0x244>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	e00d      	b.n	800523e <HAL_RCC_ClockConfig+0x19e>
 8005222:	2302      	movs	r3, #2
 8005224:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	fa93 f3a3 	rbit	r3, r3
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
 800522e:	2302      	movs	r3, #2
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	fa93 f3a3 	rbit	r3, r3
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	4b2a      	ldr	r3, [pc, #168]	@ (80052e4 <HAL_RCC_ClockConfig+0x244>)
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	2202      	movs	r2, #2
 8005240:	61ba      	str	r2, [r7, #24]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	fa92 f2a2 	rbit	r2, r2
 8005248:	617a      	str	r2, [r7, #20]
  return result;
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	fab2 f282 	clz	r2, r2
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	f042 0220 	orr.w	r2, r2, #32
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	f002 021f 	and.w	r2, r2, #31
 800525c:	2101      	movs	r1, #1
 800525e:	fa01 f202 	lsl.w	r2, r1, r2
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e07a      	b.n	8005362 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800526c:	4b1d      	ldr	r3, [pc, #116]	@ (80052e4 <HAL_RCC_ClockConfig+0x244>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f023 0203 	bic.w	r2, r3, #3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	491a      	ldr	r1, [pc, #104]	@ (80052e4 <HAL_RCC_ClockConfig+0x244>)
 800527a:	4313      	orrs	r3, r2
 800527c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800527e:	f7fd f97b 	bl	8002578 <HAL_GetTick>
 8005282:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005284:	e00a      	b.n	800529c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005286:	f7fd f977 	bl	8002578 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005294:	4293      	cmp	r3, r2
 8005296:	d901      	bls.n	800529c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e062      	b.n	8005362 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529c:	4b11      	ldr	r3, [pc, #68]	@ (80052e4 <HAL_RCC_ClockConfig+0x244>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 020c 	and.w	r2, r3, #12
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d1eb      	bne.n	8005286 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052ae:	4b0c      	ldr	r3, [pc, #48]	@ (80052e0 <HAL_RCC_ClockConfig+0x240>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d215      	bcs.n	80052e8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052bc:	4b08      	ldr	r3, [pc, #32]	@ (80052e0 <HAL_RCC_ClockConfig+0x240>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f023 0207 	bic.w	r2, r3, #7
 80052c4:	4906      	ldr	r1, [pc, #24]	@ (80052e0 <HAL_RCC_ClockConfig+0x240>)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052cc:	4b04      	ldr	r3, [pc, #16]	@ (80052e0 <HAL_RCC_ClockConfig+0x240>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d006      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e041      	b.n	8005362 <HAL_RCC_ClockConfig+0x2c2>
 80052de:	bf00      	nop
 80052e0:	40022000 	.word	0x40022000
 80052e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f4:	4b1d      	ldr	r3, [pc, #116]	@ (800536c <HAL_RCC_ClockConfig+0x2cc>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	491a      	ldr	r1, [pc, #104]	@ (800536c <HAL_RCC_ClockConfig+0x2cc>)
 8005302:	4313      	orrs	r3, r2
 8005304:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005312:	4b16      	ldr	r3, [pc, #88]	@ (800536c <HAL_RCC_ClockConfig+0x2cc>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4912      	ldr	r1, [pc, #72]	@ (800536c <HAL_RCC_ClockConfig+0x2cc>)
 8005322:	4313      	orrs	r3, r2
 8005324:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005326:	f000 f829 	bl	800537c <HAL_RCC_GetSysClockFreq>
 800532a:	4601      	mov	r1, r0
 800532c:	4b0f      	ldr	r3, [pc, #60]	@ (800536c <HAL_RCC_ClockConfig+0x2cc>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005334:	22f0      	movs	r2, #240	@ 0xf0
 8005336:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	fa92 f2a2 	rbit	r2, r2
 800533e:	60fa      	str	r2, [r7, #12]
  return result;
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	fab2 f282 	clz	r2, r2
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	40d3      	lsrs	r3, r2
 800534a:	4a09      	ldr	r2, [pc, #36]	@ (8005370 <HAL_RCC_ClockConfig+0x2d0>)
 800534c:	5cd3      	ldrb	r3, [r2, r3]
 800534e:	fa21 f303 	lsr.w	r3, r1, r3
 8005352:	4a08      	ldr	r2, [pc, #32]	@ (8005374 <HAL_RCC_ClockConfig+0x2d4>)
 8005354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005356:	4b08      	ldr	r3, [pc, #32]	@ (8005378 <HAL_RCC_ClockConfig+0x2d8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7fd f8c8 	bl	80024f0 <HAL_InitTick>
  
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3778      	adds	r7, #120	@ 0x78
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000
 8005370:	0800a758 	.word	0x0800a758
 8005374:	20000000 	.word	0x20000000
 8005378:	20000004 	.word	0x20000004

0800537c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005396:	4b1e      	ldr	r3, [pc, #120]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x94>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d002      	beq.n	80053ac <HAL_RCC_GetSysClockFreq+0x30>
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d003      	beq.n	80053b2 <HAL_RCC_GetSysClockFreq+0x36>
 80053aa:	e026      	b.n	80053fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053ac:	4b19      	ldr	r3, [pc, #100]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x98>)
 80053ae:	613b      	str	r3, [r7, #16]
      break;
 80053b0:	e026      	b.n	8005400 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	0c9b      	lsrs	r3, r3, #18
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	4a17      	ldr	r2, [pc, #92]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x9c>)
 80053bc:	5cd3      	ldrb	r3, [r2, r3]
 80053be:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80053c0:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x94>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	4a14      	ldr	r2, [pc, #80]	@ (800541c <HAL_RCC_GetSysClockFreq+0xa0>)
 80053ca:	5cd3      	ldrb	r3, [r2, r3]
 80053cc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x98>)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e004      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005420 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	613b      	str	r3, [r7, #16]
      break;
 80053f8:	e002      	b.n	8005400 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053fa:	4b06      	ldr	r3, [pc, #24]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x98>)
 80053fc:	613b      	str	r3, [r7, #16]
      break;
 80053fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005400:	693b      	ldr	r3, [r7, #16]
}
 8005402:	4618      	mov	r0, r3
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
 8005414:	007a1200 	.word	0x007a1200
 8005418:	0800a770 	.word	0x0800a770
 800541c:	0800a780 	.word	0x0800a780
 8005420:	003d0900 	.word	0x003d0900

08005424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005428:	4b03      	ldr	r3, [pc, #12]	@ (8005438 <HAL_RCC_GetHCLKFreq+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000000 	.word	0x20000000

0800543c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005442:	f7ff ffef 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005446:	4601      	mov	r1, r0
 8005448:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005450:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005454:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	fa92 f2a2 	rbit	r2, r2
 800545c:	603a      	str	r2, [r7, #0]
  return result;
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	fab2 f282 	clz	r2, r2
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	40d3      	lsrs	r3, r2
 8005468:	4a04      	ldr	r2, [pc, #16]	@ (800547c <HAL_RCC_GetPCLK1Freq+0x40>)
 800546a:	5cd3      	ldrb	r3, [r2, r3]
 800546c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40021000 	.word	0x40021000
 800547c:	0800a768 	.word	0x0800a768

08005480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005486:	f7ff ffcd 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 800548a:	4601      	mov	r1, r0
 800548c:	4b0b      	ldr	r3, [pc, #44]	@ (80054bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005494:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005498:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	fa92 f2a2 	rbit	r2, r2
 80054a0:	603a      	str	r2, [r7, #0]
  return result;
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	fab2 f282 	clz	r2, r2
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	40d3      	lsrs	r3, r2
 80054ac:	4a04      	ldr	r2, [pc, #16]	@ (80054c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80054ae:	5cd3      	ldrb	r3, [r2, r3]
 80054b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40021000 	.word	0x40021000
 80054c0:	0800a768 	.word	0x0800a768

080054c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b092      	sub	sp, #72	@ 0x48
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 80cb 	beq.w	800567e <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054e8:	4b85      	ldr	r3, [pc, #532]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10e      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054f4:	4b82      	ldr	r3, [pc, #520]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	4a81      	ldr	r2, [pc, #516]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054fe:	61d3      	str	r3, [r2, #28]
 8005500:	4b7f      	ldr	r3, [pc, #508]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005512:	4b7c      	ldr	r3, [pc, #496]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d118      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800551e:	4b79      	ldr	r3, [pc, #484]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a78      	ldr	r2, [pc, #480]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005528:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800552a:	f7fd f825 	bl	8002578 <HAL_GetTick>
 800552e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005530:	e008      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005532:	f7fd f821 	bl	8002578 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b64      	cmp	r3, #100	@ 0x64
 800553e:	d901      	bls.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e0d9      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005544:	4b6f      	ldr	r3, [pc, #444]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005550:	4b6b      	ldr	r3, [pc, #428]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005558:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800555a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d07b      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005568:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800556a:	429a      	cmp	r2, r3
 800556c:	d074      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800556e:	4b64      	ldr	r3, [pc, #400]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800557c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	fa93 f3a3 	rbit	r3, r3
 8005584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005588:	fab3 f383 	clz	r3, r3
 800558c:	b2db      	uxtb	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	4b5d      	ldr	r3, [pc, #372]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	461a      	mov	r2, r3
 8005598:	2301      	movs	r3, #1
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80055a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a4:	fa93 f3a3 	rbit	r3, r3
 80055a8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80055aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ac:	fab3 f383 	clz	r3, r3
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	4b54      	ldr	r3, [pc, #336]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	461a      	mov	r2, r3
 80055bc:	2300      	movs	r3, #0
 80055be:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055c0:	4a4f      	ldr	r2, [pc, #316]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80055c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d043      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fc ffd2 	bl	8002578 <HAL_GetTick>
 80055d4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d6:	e00a      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d8:	f7fc ffce 	bl	8002578 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e084      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80055ee:	2302      	movs	r3, #2
 80055f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f4:	fa93 f3a3 	rbit	r3, r3
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055fa:	2302      	movs	r3, #2
 80055fc:	623b      	str	r3, [r7, #32]
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	fa93 f3a3 	rbit	r3, r3
 8005604:	61fb      	str	r3, [r7, #28]
  return result;
 8005606:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005608:	fab3 f383 	clz	r3, r3
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005618:	4b39      	ldr	r3, [pc, #228]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	e007      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800561e:	2302      	movs	r3, #2
 8005620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	fa93 f3a3 	rbit	r3, r3
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	4b35      	ldr	r3, [pc, #212]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562e:	2202      	movs	r2, #2
 8005630:	613a      	str	r2, [r7, #16]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	fa92 f2a2 	rbit	r2, r2
 8005638:	60fa      	str	r2, [r7, #12]
  return result;
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	fab2 f282 	clz	r2, r2
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	f002 021f 	and.w	r2, r2, #31
 800564c:	2101      	movs	r1, #1
 800564e:	fa01 f202 	lsl.w	r2, r1, r2
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0bf      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005658:	4b29      	ldr	r3, [pc, #164]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4926      	ldr	r1, [pc, #152]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005666:	4313      	orrs	r3, r2
 8005668:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800566a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800566e:	2b01      	cmp	r3, #1
 8005670:	d105      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005672:	4b23      	ldr	r3, [pc, #140]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	4a22      	ldr	r2, [pc, #136]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005678:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800567c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800568a:	4b1d      	ldr	r3, [pc, #116]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568e:	f023 0203 	bic.w	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	491a      	ldr	r1, [pc, #104]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005698:	4313      	orrs	r3, r2
 800569a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056a8:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ac:	f023 0210 	bic.w	r2, r3, #16
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4912      	ldr	r1, [pc, #72]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	490b      	ldr	r1, [pc, #44]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80056e4:	4b06      	ldr	r3, [pc, #24]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	4903      	ldr	r1, [pc, #12]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3748      	adds	r7, #72	@ 0x48
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40021000 	.word	0x40021000
 8005704:	40007000 	.word	0x40007000
 8005708:	10908100 	.word	0x10908100

0800570c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e049      	b.n	80057b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc fc2a 	bl	8001f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3304      	adds	r3, #4
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f000 fbfc 	bl	8005f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d001      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e040      	b.n	8005856 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005864 <HAL_TIM_Base_Start_IT+0xa8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x58>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fe:	d009      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x58>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a18      	ldr	r2, [pc, #96]	@ (8005868 <HAL_TIM_Base_Start_IT+0xac>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x58>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a17      	ldr	r2, [pc, #92]	@ (800586c <HAL_TIM_Base_Start_IT+0xb0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d115      	bne.n	8005840 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	4b15      	ldr	r3, [pc, #84]	@ (8005870 <HAL_TIM_Base_Start_IT+0xb4>)
 800581c:	4013      	ands	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b06      	cmp	r3, #6
 8005824:	d015      	beq.n	8005852 <HAL_TIM_Base_Start_IT+0x96>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800582c:	d011      	beq.n	8005852 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583e:	e008      	b.n	8005852 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	e000      	b.n	8005854 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005852:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40012c00 	.word	0x40012c00
 8005868:	40000400 	.word	0x40000400
 800586c:	40014000 	.word	0x40014000
 8005870:	00010007 	.word	0x00010007

08005874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e049      	b.n	800591a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f841 	bl	8005922 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f000 fb48 	bl	8005f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d020      	beq.n	800599a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01b      	beq.n	800599a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f06f 0202 	mvn.w	r2, #2
 800596a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	f003 0303 	and.w	r3, r3, #3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fac2 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 8005986:	e005      	b.n	8005994 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fab4 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fac5 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d020      	beq.n	80059e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01b      	beq.n	80059e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f06f 0204 	mvn.w	r2, #4
 80059b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fa9c 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 80059d2:	e005      	b.n	80059e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fa8e 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa9f 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d020      	beq.n	8005a32 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01b      	beq.n	8005a32 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f06f 0208 	mvn.w	r2, #8
 8005a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2204      	movs	r2, #4
 8005a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fa76 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 8005a1e:	e005      	b.n	8005a2c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fa68 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa79 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d020      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01b      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0210 	mvn.w	r2, #16
 8005a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2208      	movs	r2, #8
 8005a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fa50 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 8005a6a:	e005      	b.n	8005a78 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fa42 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa53 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00c      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f06f 0201 	mvn.w	r2, #1
 8005a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7fb fbf3 	bl	8001288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00c      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fe7d 	bl	80067c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00c      	beq.n	8005aea <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fe75 	bl	80067d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00c      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fa12 	bl	8005f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00c      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f06f 0220 	mvn.w	r2, #32
 8005b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fe3d 	bl	80067ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b32:	bf00      	nop
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e0ff      	b.n	8005d5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b14      	cmp	r3, #20
 8005b66:	f200 80f0 	bhi.w	8005d4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005bc5 	.word	0x08005bc5
 8005b74:	08005d4b 	.word	0x08005d4b
 8005b78:	08005d4b 	.word	0x08005d4b
 8005b7c:	08005d4b 	.word	0x08005d4b
 8005b80:	08005c05 	.word	0x08005c05
 8005b84:	08005d4b 	.word	0x08005d4b
 8005b88:	08005d4b 	.word	0x08005d4b
 8005b8c:	08005d4b 	.word	0x08005d4b
 8005b90:	08005c47 	.word	0x08005c47
 8005b94:	08005d4b 	.word	0x08005d4b
 8005b98:	08005d4b 	.word	0x08005d4b
 8005b9c:	08005d4b 	.word	0x08005d4b
 8005ba0:	08005c87 	.word	0x08005c87
 8005ba4:	08005d4b 	.word	0x08005d4b
 8005ba8:	08005d4b 	.word	0x08005d4b
 8005bac:	08005d4b 	.word	0x08005d4b
 8005bb0:	08005cc9 	.word	0x08005cc9
 8005bb4:	08005d4b 	.word	0x08005d4b
 8005bb8:	08005d4b 	.word	0x08005d4b
 8005bbc:	08005d4b 	.word	0x08005d4b
 8005bc0:	08005d09 	.word	0x08005d09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fa40 	bl	8006050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0208 	orr.w	r2, r2, #8
 8005bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0204 	bic.w	r2, r2, #4
 8005bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6999      	ldr	r1, [r3, #24]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	619a      	str	r2, [r3, #24]
      break;
 8005c02:	e0a5      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 faa6 	bl	800615c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6999      	ldr	r1, [r3, #24]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	021a      	lsls	r2, r3, #8
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	619a      	str	r2, [r3, #24]
      break;
 8005c44:	e084      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fb05 	bl	800625c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69da      	ldr	r2, [r3, #28]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0208 	orr.w	r2, r2, #8
 8005c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0204 	bic.w	r2, r2, #4
 8005c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69d9      	ldr	r1, [r3, #28]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	61da      	str	r2, [r3, #28]
      break;
 8005c84:	e064      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fb63 	bl	8006358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69da      	ldr	r2, [r3, #28]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69d9      	ldr	r1, [r3, #28]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	021a      	lsls	r2, r3, #8
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	61da      	str	r2, [r3, #28]
      break;
 8005cc6:	e043      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fba6 	bl	8006420 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0208 	orr.w	r2, r2, #8
 8005ce2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0204 	bic.w	r2, r2, #4
 8005cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d06:	e023      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fbe4 	bl	80064dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	021a      	lsls	r2, r3, #8
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d48:	e002      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop

08005d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_TIM_ConfigClockSource+0x1c>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e0b6      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x18a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dbc:	d03e      	beq.n	8005e3c <HAL_TIM_ConfigClockSource+0xd8>
 8005dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc2:	f200 8087 	bhi.w	8005ed4 <HAL_TIM_ConfigClockSource+0x170>
 8005dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dca:	f000 8086 	beq.w	8005eda <HAL_TIM_ConfigClockSource+0x176>
 8005dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd2:	d87f      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x170>
 8005dd4:	2b70      	cmp	r3, #112	@ 0x70
 8005dd6:	d01a      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0xaa>
 8005dd8:	2b70      	cmp	r3, #112	@ 0x70
 8005dda:	d87b      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x170>
 8005ddc:	2b60      	cmp	r3, #96	@ 0x60
 8005dde:	d050      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x11e>
 8005de0:	2b60      	cmp	r3, #96	@ 0x60
 8005de2:	d877      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x170>
 8005de4:	2b50      	cmp	r3, #80	@ 0x50
 8005de6:	d03c      	beq.n	8005e62 <HAL_TIM_ConfigClockSource+0xfe>
 8005de8:	2b50      	cmp	r3, #80	@ 0x50
 8005dea:	d873      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x170>
 8005dec:	2b40      	cmp	r3, #64	@ 0x40
 8005dee:	d058      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0x13e>
 8005df0:	2b40      	cmp	r3, #64	@ 0x40
 8005df2:	d86f      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x170>
 8005df4:	2b30      	cmp	r3, #48	@ 0x30
 8005df6:	d064      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15e>
 8005df8:	2b30      	cmp	r3, #48	@ 0x30
 8005dfa:	d86b      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x170>
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d060      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15e>
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d867      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x170>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d05c      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15e>
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d05a      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15e>
 8005e0c:	e062      	b.n	8005ed4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e1e:	f000 fc37 	bl	8006690 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	609a      	str	r2, [r3, #8]
      break;
 8005e3a:	e04f      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e4c:	f000 fc20 	bl	8006690 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e5e:	609a      	str	r2, [r3, #8]
      break;
 8005e60:	e03c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f000 fb94 	bl	800659c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2150      	movs	r1, #80	@ 0x50
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fbed 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8005e80:	e02c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f000 fbb3 	bl	80065fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2160      	movs	r1, #96	@ 0x60
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fbdd 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8005ea0:	e01c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f000 fb74 	bl	800659c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2140      	movs	r1, #64	@ 0x40
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fbcd 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8005ec0:	e00c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f000 fbc4 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8005ed2:	e003      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed8:	e000      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a38      	ldr	r2, [pc, #224]	@ (800603c <TIM_Base_SetConfig+0xf4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d007      	beq.n	8005f70 <TIM_Base_SetConfig+0x28>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f66:	d003      	beq.n	8005f70 <TIM_Base_SetConfig+0x28>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a35      	ldr	r2, [pc, #212]	@ (8006040 <TIM_Base_SetConfig+0xf8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d108      	bne.n	8005f82 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a2d      	ldr	r2, [pc, #180]	@ (800603c <TIM_Base_SetConfig+0xf4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <TIM_Base_SetConfig+0x6a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f90:	d00f      	beq.n	8005fb2 <TIM_Base_SetConfig+0x6a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a2a      	ldr	r2, [pc, #168]	@ (8006040 <TIM_Base_SetConfig+0xf8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00b      	beq.n	8005fb2 <TIM_Base_SetConfig+0x6a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a29      	ldr	r2, [pc, #164]	@ (8006044 <TIM_Base_SetConfig+0xfc>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d007      	beq.n	8005fb2 <TIM_Base_SetConfig+0x6a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a28      	ldr	r2, [pc, #160]	@ (8006048 <TIM_Base_SetConfig+0x100>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d003      	beq.n	8005fb2 <TIM_Base_SetConfig+0x6a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a27      	ldr	r2, [pc, #156]	@ (800604c <TIM_Base_SetConfig+0x104>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d108      	bne.n	8005fc4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a14      	ldr	r2, [pc, #80]	@ (800603c <TIM_Base_SetConfig+0xf4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00b      	beq.n	8006008 <TIM_Base_SetConfig+0xc0>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a14      	ldr	r2, [pc, #80]	@ (8006044 <TIM_Base_SetConfig+0xfc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d007      	beq.n	8006008 <TIM_Base_SetConfig+0xc0>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a13      	ldr	r2, [pc, #76]	@ (8006048 <TIM_Base_SetConfig+0x100>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_Base_SetConfig+0xc0>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a12      	ldr	r2, [pc, #72]	@ (800604c <TIM_Base_SetConfig+0x104>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d103      	bne.n	8006010 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b01      	cmp	r3, #1
 8006020:	d105      	bne.n	800602e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f023 0201 	bic.w	r2, r3, #1
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	611a      	str	r2, [r3, #16]
  }
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40012c00 	.word	0x40012c00
 8006040:	40000400 	.word	0x40000400
 8006044:	40014000 	.word	0x40014000
 8006048:	40014400 	.word	0x40014400
 800604c:	40014800 	.word	0x40014800

08006050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f023 0201 	bic.w	r2, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800607e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0303 	bic.w	r3, r3, #3
 800608a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f023 0302 	bic.w	r3, r3, #2
 800609c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a28      	ldr	r2, [pc, #160]	@ (800614c <TIM_OC1_SetConfig+0xfc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00b      	beq.n	80060c8 <TIM_OC1_SetConfig+0x78>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a27      	ldr	r2, [pc, #156]	@ (8006150 <TIM_OC1_SetConfig+0x100>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d007      	beq.n	80060c8 <TIM_OC1_SetConfig+0x78>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a26      	ldr	r2, [pc, #152]	@ (8006154 <TIM_OC1_SetConfig+0x104>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_OC1_SetConfig+0x78>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a25      	ldr	r2, [pc, #148]	@ (8006158 <TIM_OC1_SetConfig+0x108>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d10c      	bne.n	80060e2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f023 0308 	bic.w	r3, r3, #8
 80060ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f023 0304 	bic.w	r3, r3, #4
 80060e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a19      	ldr	r2, [pc, #100]	@ (800614c <TIM_OC1_SetConfig+0xfc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00b      	beq.n	8006102 <TIM_OC1_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a18      	ldr	r2, [pc, #96]	@ (8006150 <TIM_OC1_SetConfig+0x100>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d007      	beq.n	8006102 <TIM_OC1_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a17      	ldr	r2, [pc, #92]	@ (8006154 <TIM_OC1_SetConfig+0x104>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d003      	beq.n	8006102 <TIM_OC1_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a16      	ldr	r2, [pc, #88]	@ (8006158 <TIM_OC1_SetConfig+0x108>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d111      	bne.n	8006126 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	621a      	str	r2, [r3, #32]
}
 8006140:	bf00      	nop
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	40012c00 	.word	0x40012c00
 8006150:	40014000 	.word	0x40014000
 8006154:	40014400 	.word	0x40014400
 8006158:	40014800 	.word	0x40014800

0800615c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f023 0210 	bic.w	r2, r3, #16
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0320 	bic.w	r3, r3, #32
 80061aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a24      	ldr	r2, [pc, #144]	@ (800624c <TIM_OC2_SetConfig+0xf0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d10d      	bne.n	80061dc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a1b      	ldr	r2, [pc, #108]	@ (800624c <TIM_OC2_SetConfig+0xf0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00b      	beq.n	80061fc <TIM_OC2_SetConfig+0xa0>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006250 <TIM_OC2_SetConfig+0xf4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d007      	beq.n	80061fc <TIM_OC2_SetConfig+0xa0>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a19      	ldr	r2, [pc, #100]	@ (8006254 <TIM_OC2_SetConfig+0xf8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d003      	beq.n	80061fc <TIM_OC2_SetConfig+0xa0>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a18      	ldr	r2, [pc, #96]	@ (8006258 <TIM_OC2_SetConfig+0xfc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d113      	bne.n	8006224 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006202:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800620a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	621a      	str	r2, [r3, #32]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40012c00 	.word	0x40012c00
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800

0800625c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800628a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800628e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a23      	ldr	r2, [pc, #140]	@ (8006348 <TIM_OC3_SetConfig+0xec>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d10d      	bne.n	80062da <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062d8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006348 <TIM_OC3_SetConfig+0xec>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00b      	beq.n	80062fa <TIM_OC3_SetConfig+0x9e>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a19      	ldr	r2, [pc, #100]	@ (800634c <TIM_OC3_SetConfig+0xf0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d007      	beq.n	80062fa <TIM_OC3_SetConfig+0x9e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a18      	ldr	r2, [pc, #96]	@ (8006350 <TIM_OC3_SetConfig+0xf4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d003      	beq.n	80062fa <TIM_OC3_SetConfig+0x9e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a17      	ldr	r2, [pc, #92]	@ (8006354 <TIM_OC3_SetConfig+0xf8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d113      	bne.n	8006322 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	621a      	str	r2, [r3, #32]
}
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40014000 	.word	0x40014000
 8006350:	40014400 	.word	0x40014400
 8006354:	40014800 	.word	0x40014800

08006358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	031b      	lsls	r3, r3, #12
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a16      	ldr	r2, [pc, #88]	@ (8006410 <TIM_OC4_SetConfig+0xb8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00b      	beq.n	80063d4 <TIM_OC4_SetConfig+0x7c>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a15      	ldr	r2, [pc, #84]	@ (8006414 <TIM_OC4_SetConfig+0xbc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d007      	beq.n	80063d4 <TIM_OC4_SetConfig+0x7c>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a14      	ldr	r2, [pc, #80]	@ (8006418 <TIM_OC4_SetConfig+0xc0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_OC4_SetConfig+0x7c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a13      	ldr	r2, [pc, #76]	@ (800641c <TIM_OC4_SetConfig+0xc4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d109      	bne.n	80063e8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	019b      	lsls	r3, r3, #6
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40014000 	.word	0x40014000
 8006418:	40014400 	.word	0x40014400
 800641c:	40014800 	.word	0x40014800

08006420 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800644e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006464:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	041b      	lsls	r3, r3, #16
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a15      	ldr	r2, [pc, #84]	@ (80064cc <TIM_OC5_SetConfig+0xac>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00b      	beq.n	8006492 <TIM_OC5_SetConfig+0x72>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a14      	ldr	r2, [pc, #80]	@ (80064d0 <TIM_OC5_SetConfig+0xb0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d007      	beq.n	8006492 <TIM_OC5_SetConfig+0x72>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a13      	ldr	r2, [pc, #76]	@ (80064d4 <TIM_OC5_SetConfig+0xb4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d003      	beq.n	8006492 <TIM_OC5_SetConfig+0x72>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a12      	ldr	r2, [pc, #72]	@ (80064d8 <TIM_OC5_SetConfig+0xb8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d109      	bne.n	80064a6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006498:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	621a      	str	r2, [r3, #32]
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	40012c00 	.word	0x40012c00
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800

080064dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800650a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800650e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	051b      	lsls	r3, r3, #20
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a16      	ldr	r2, [pc, #88]	@ (800658c <TIM_OC6_SetConfig+0xb0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00b      	beq.n	8006550 <TIM_OC6_SetConfig+0x74>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a15      	ldr	r2, [pc, #84]	@ (8006590 <TIM_OC6_SetConfig+0xb4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d007      	beq.n	8006550 <TIM_OC6_SetConfig+0x74>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a14      	ldr	r2, [pc, #80]	@ (8006594 <TIM_OC6_SetConfig+0xb8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_OC6_SetConfig+0x74>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a13      	ldr	r2, [pc, #76]	@ (8006598 <TIM_OC6_SetConfig+0xbc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d109      	bne.n	8006564 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006556:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	029b      	lsls	r3, r3, #10
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	621a      	str	r2, [r3, #32]
}
 800657e:	bf00      	nop
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40012c00 	.word	0x40012c00
 8006590:	40014000 	.word	0x40014000
 8006594:	40014400 	.word	0x40014400
 8006598:	40014800 	.word	0x40014800

0800659c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f023 0201 	bic.w	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f023 030a 	bic.w	r3, r3, #10
 80065d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f023 0210 	bic.w	r2, r3, #16
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	031b      	lsls	r3, r3, #12
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006636:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	f043 0307 	orr.w	r3, r3, #7
 800667c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	609a      	str	r2, [r3, #8]
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	021a      	lsls	r2, r3, #8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	609a      	str	r2, [r3, #8]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e054      	b.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a24      	ldr	r2, [pc, #144]	@ (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d108      	bne.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006718:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a17      	ldr	r2, [pc, #92]	@ (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006750:	d009      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a13      	ldr	r2, [pc, #76]	@ (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a11      	ldr	r2, [pc, #68]	@ (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d10c      	bne.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800676c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	4313      	orrs	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	40000400 	.word	0x40000400
 80067a8:	40014000 	.word	0x40014000

080067ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e040      	b.n	800687c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fb fc64 	bl	80020d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2224      	movs	r2, #36	@ 0x24
 8006814:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0201 	bic.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fd46 	bl	80072c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fc0d 	bl	8007054 <UART_SetConfig>
 800683a:	4603      	mov	r3, r0
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e01b      	b.n	800687c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fdc5 	bl	8007404 <UART_CheckIdleState>
 800687a:	4603      	mov	r3, r0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	@ 0x28
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	4613      	mov	r3, r2
 8006892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006898:	2b20      	cmp	r3, #32
 800689a:	d177      	bne.n	800698c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <HAL_UART_Transmit+0x24>
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e070      	b.n	800698e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2221      	movs	r2, #33	@ 0x21
 80068b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ba:	f7fb fe5d 	bl	8002578 <HAL_GetTick>
 80068be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	88fa      	ldrh	r2, [r7, #6]
 80068c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	88fa      	ldrh	r2, [r7, #6]
 80068cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d8:	d108      	bne.n	80068ec <HAL_UART_Transmit+0x68>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d104      	bne.n	80068ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e003      	b.n	80068f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068f4:	e02f      	b.n	8006956 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2200      	movs	r2, #0
 80068fe:	2180      	movs	r1, #128	@ 0x80
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 fe27 	bl	8007554 <UART_WaitOnFlagUntilTimeout>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e03b      	b.n	800698e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10b      	bne.n	8006934 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	881a      	ldrh	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006928:	b292      	uxth	r2, r2
 800692a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	3302      	adds	r3, #2
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	e007      	b.n	8006944 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	781a      	ldrb	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	3301      	adds	r3, #1
 8006942:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800695c:	b29b      	uxth	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1c9      	bne.n	80068f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2200      	movs	r2, #0
 800696a:	2140      	movs	r1, #64	@ 0x40
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fdf1 	bl	8007554 <UART_WaitOnFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e005      	b.n	800698e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2220      	movs	r2, #32
 8006986:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	e000      	b.n	800698e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800698c:	2302      	movs	r3, #2
  }
}
 800698e:	4618      	mov	r0, r3
 8006990:	3720      	adds	r7, #32
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b08a      	sub	sp, #40	@ 0x28
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	4613      	mov	r3, r2
 80069a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d132      	bne.n	8006a14 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_UART_Receive_DMA+0x24>
 80069b4:	88fb      	ldrh	r3, [r7, #6]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e02b      	b.n	8006a16 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d018      	beq.n	8006a04 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	613b      	str	r3, [r7, #16]
   return(result);
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	623b      	str	r3, [r7, #32]
 80069f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	69f9      	ldr	r1, [r7, #28]
 80069f6:	6a3a      	ldr	r2, [r7, #32]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e6      	bne.n	80069d2 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a04:	88fb      	ldrh	r3, [r7, #6]
 8006a06:	461a      	mov	r2, r3
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fe10 	bl	8007630 <UART_Start_Receive_DMA>
 8006a10:	4603      	mov	r3, r0
 8006a12:	e000      	b.n	8006a16 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006a14:	2302      	movs	r3, #2
  }
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3728      	adds	r7, #40	@ 0x28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b0ba      	sub	sp, #232	@ 0xe8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a4a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a4e:	4013      	ands	r3, r2
 8006a50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d115      	bne.n	8006a88 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00f      	beq.n	8006a88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d009      	beq.n	8006a88 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 82ab 	beq.w	8006fd4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
      }
      return;
 8006a86:	e2a5      	b.n	8006fd4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 8117 	beq.w	8006cc0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d106      	bne.n	8006aac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006aa2:	4b85      	ldr	r3, [pc, #532]	@ (8006cb8 <HAL_UART_IRQHandler+0x298>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 810a 	beq.w	8006cc0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d011      	beq.n	8006adc <HAL_UART_IRQHandler+0xbc>
 8006ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ad2:	f043 0201 	orr.w	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d011      	beq.n	8006b0c <HAL_UART_IRQHandler+0xec>
 8006ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2202      	movs	r2, #2
 8006afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b02:	f043 0204 	orr.w	r2, r3, #4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d011      	beq.n	8006b3c <HAL_UART_IRQHandler+0x11c>
 8006b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2204      	movs	r2, #4
 8006b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b32:	f043 0202 	orr.w	r2, r3, #2
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d017      	beq.n	8006b78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d105      	bne.n	8006b60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2208      	movs	r2, #8
 8006b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b6e:	f043 0208 	orr.w	r2, r3, #8
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d012      	beq.n	8006baa <HAL_UART_IRQHandler+0x18a>
 8006b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00c      	beq.n	8006baa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ba0:	f043 0220 	orr.w	r2, r3, #32
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8211 	beq.w	8006fd8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00d      	beq.n	8006bde <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d007      	beq.n	8006bde <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006be4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf2:	2b40      	cmp	r3, #64	@ 0x40
 8006bf4:	d005      	beq.n	8006c02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d04f      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fdda 	bl	80077bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c12:	2b40      	cmp	r3, #64	@ 0x40
 8006c14:	d141      	bne.n	8006c9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1d9      	bne.n	8006c16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d013      	beq.n	8006c92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c6e:	4a13      	ldr	r2, [pc, #76]	@ (8006cbc <HAL_UART_IRQHandler+0x29c>)
 8006c70:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fc ff01 	bl	8003a7e <HAL_DMA_Abort_IT>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d017      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c90:	e00f      	b.n	8006cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f9c8 	bl	8007028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	e00b      	b.n	8006cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f9c4 	bl	8007028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca0:	e007      	b.n	8006cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f9c0 	bl	8007028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006cb0:	e192      	b.n	8006fd8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb2:	bf00      	nop
    return;
 8006cb4:	e190      	b.n	8006fd8 <HAL_UART_IRQHandler+0x5b8>
 8006cb6:	bf00      	nop
 8006cb8:	04000120 	.word	0x04000120
 8006cbc:	08007a67 	.word	0x08007a67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	f040 814b 	bne.w	8006f60 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8144 	beq.w	8006f60 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cdc:	f003 0310 	and.w	r3, r3, #16
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 813d 	beq.w	8006f60 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2210      	movs	r2, #16
 8006cec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf8:	2b40      	cmp	r3, #64	@ 0x40
 8006cfa:	f040 80b5 	bne.w	8006e68 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 8164 	beq.w	8006fdc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	f080 815c 	bcs.w	8006fdc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	f000 8086 	beq.w	8006e46 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d68:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1da      	bne.n	8006d3a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3308      	adds	r3, #8
 8006d8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d96:	f023 0301 	bic.w	r3, r3, #1
 8006d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006da8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006dac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006db0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e1      	bne.n	8006d84 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006dd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006de4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006de6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006dea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006df2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e3      	bne.n	8006dc0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e16:	f023 0310 	bic.w	r3, r3, #16
 8006e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e2a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e4      	bne.n	8006e06 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fc fdde 	bl	8003a02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f8eb 	bl	800703c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e66:	e0b9      	b.n	8006fdc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 80ab 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006e8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80a6 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eb8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e4      	bne.n	8006e94 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3308      	adds	r3, #8
 8006ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006eee:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e3      	bne.n	8006eca <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0310 	bic.w	r3, r3, #16
 8006f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f38:	61fb      	str	r3, [r7, #28]
 8006f3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	69b9      	ldr	r1, [r7, #24]
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	617b      	str	r3, [r7, #20]
   return(result);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e4      	bne.n	8006f16 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f86f 	bl	800703c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f5e:	e03f      	b.n	8006fe0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00e      	beq.n	8006f8a <HAL_UART_IRQHandler+0x56a>
 8006f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006f80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fdaf 	bl	8007ae6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f88:	e02d      	b.n	8006fe6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00e      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d008      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01c      	beq.n	8006fe4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
    }
    return;
 8006fb2:	e017      	b.n	8006fe4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d012      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x5c6>
 8006fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00c      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fd60 	bl	8007a92 <UART_EndTransmit_IT>
    return;
 8006fd2:	e008      	b.n	8006fe6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006fd4:	bf00      	nop
 8006fd6:	e006      	b.n	8006fe6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006fd8:	bf00      	nop
 8006fda:	e004      	b.n	8006fe6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006fdc:	bf00      	nop
 8006fde:	e002      	b.n	8006fe6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006fe0:	bf00      	nop
 8006fe2:	e000      	b.n	8006fe6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006fe4:	bf00      	nop
  }

}
 8006fe6:	37e8      	adds	r7, #232	@ 0xe8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4b8a      	ldr	r3, [pc, #552]	@ (80072a8 <UART_SetConfig+0x254>)
 8007080:	4013      	ands	r3, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6812      	ldr	r2, [r2, #0]
 8007086:	6979      	ldr	r1, [r7, #20]
 8007088:	430b      	orrs	r3, r1
 800708a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a78      	ldr	r2, [pc, #480]	@ (80072ac <UART_SetConfig+0x258>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d120      	bne.n	8007112 <UART_SetConfig+0xbe>
 80070d0:	4b77      	ldr	r3, [pc, #476]	@ (80072b0 <UART_SetConfig+0x25c>)
 80070d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d4:	f003 0303 	and.w	r3, r3, #3
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d817      	bhi.n	800710c <UART_SetConfig+0xb8>
 80070dc:	a201      	add	r2, pc, #4	@ (adr r2, 80070e4 <UART_SetConfig+0x90>)
 80070de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e2:	bf00      	nop
 80070e4:	080070f5 	.word	0x080070f5
 80070e8:	08007101 	.word	0x08007101
 80070ec:	08007107 	.word	0x08007107
 80070f0:	080070fb 	.word	0x080070fb
 80070f4:	2300      	movs	r3, #0
 80070f6:	77fb      	strb	r3, [r7, #31]
 80070f8:	e01d      	b.n	8007136 <UART_SetConfig+0xe2>
 80070fa:	2302      	movs	r3, #2
 80070fc:	77fb      	strb	r3, [r7, #31]
 80070fe:	e01a      	b.n	8007136 <UART_SetConfig+0xe2>
 8007100:	2304      	movs	r3, #4
 8007102:	77fb      	strb	r3, [r7, #31]
 8007104:	e017      	b.n	8007136 <UART_SetConfig+0xe2>
 8007106:	2308      	movs	r3, #8
 8007108:	77fb      	strb	r3, [r7, #31]
 800710a:	e014      	b.n	8007136 <UART_SetConfig+0xe2>
 800710c:	2310      	movs	r3, #16
 800710e:	77fb      	strb	r3, [r7, #31]
 8007110:	e011      	b.n	8007136 <UART_SetConfig+0xe2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a67      	ldr	r2, [pc, #412]	@ (80072b4 <UART_SetConfig+0x260>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d102      	bne.n	8007122 <UART_SetConfig+0xce>
 800711c:	2300      	movs	r3, #0
 800711e:	77fb      	strb	r3, [r7, #31]
 8007120:	e009      	b.n	8007136 <UART_SetConfig+0xe2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a64      	ldr	r2, [pc, #400]	@ (80072b8 <UART_SetConfig+0x264>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d102      	bne.n	8007132 <UART_SetConfig+0xde>
 800712c:	2300      	movs	r3, #0
 800712e:	77fb      	strb	r3, [r7, #31]
 8007130:	e001      	b.n	8007136 <UART_SetConfig+0xe2>
 8007132:	2310      	movs	r3, #16
 8007134:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800713e:	d15a      	bne.n	80071f6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007140:	7ffb      	ldrb	r3, [r7, #31]
 8007142:	2b08      	cmp	r3, #8
 8007144:	d827      	bhi.n	8007196 <UART_SetConfig+0x142>
 8007146:	a201      	add	r2, pc, #4	@ (adr r2, 800714c <UART_SetConfig+0xf8>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	08007171 	.word	0x08007171
 8007150:	08007179 	.word	0x08007179
 8007154:	08007181 	.word	0x08007181
 8007158:	08007197 	.word	0x08007197
 800715c:	08007187 	.word	0x08007187
 8007160:	08007197 	.word	0x08007197
 8007164:	08007197 	.word	0x08007197
 8007168:	08007197 	.word	0x08007197
 800716c:	0800718f 	.word	0x0800718f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007170:	f7fe f964 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8007174:	61b8      	str	r0, [r7, #24]
        break;
 8007176:	e013      	b.n	80071a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007178:	f7fe f982 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 800717c:	61b8      	str	r0, [r7, #24]
        break;
 800717e:	e00f      	b.n	80071a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007180:	4b4e      	ldr	r3, [pc, #312]	@ (80072bc <UART_SetConfig+0x268>)
 8007182:	61bb      	str	r3, [r7, #24]
        break;
 8007184:	e00c      	b.n	80071a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007186:	f7fe f8f9 	bl	800537c <HAL_RCC_GetSysClockFreq>
 800718a:	61b8      	str	r0, [r7, #24]
        break;
 800718c:	e008      	b.n	80071a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800718e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007192:	61bb      	str	r3, [r7, #24]
        break;
 8007194:	e004      	b.n	80071a0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	77bb      	strb	r3, [r7, #30]
        break;
 800719e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d074      	beq.n	8007290 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	005a      	lsls	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	441a      	add	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2b0f      	cmp	r3, #15
 80071c0:	d916      	bls.n	80071f0 <UART_SetConfig+0x19c>
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071c8:	d212      	bcs.n	80071f0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	f023 030f 	bic.w	r3, r3, #15
 80071d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	b29a      	uxth	r2, r3
 80071e0:	89fb      	ldrh	r3, [r7, #14]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	89fa      	ldrh	r2, [r7, #14]
 80071ec:	60da      	str	r2, [r3, #12]
 80071ee:	e04f      	b.n	8007290 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	77bb      	strb	r3, [r7, #30]
 80071f4:	e04c      	b.n	8007290 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071f6:	7ffb      	ldrb	r3, [r7, #31]
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d828      	bhi.n	800724e <UART_SetConfig+0x1fa>
 80071fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007204 <UART_SetConfig+0x1b0>)
 80071fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007202:	bf00      	nop
 8007204:	08007229 	.word	0x08007229
 8007208:	08007231 	.word	0x08007231
 800720c:	08007239 	.word	0x08007239
 8007210:	0800724f 	.word	0x0800724f
 8007214:	0800723f 	.word	0x0800723f
 8007218:	0800724f 	.word	0x0800724f
 800721c:	0800724f 	.word	0x0800724f
 8007220:	0800724f 	.word	0x0800724f
 8007224:	08007247 	.word	0x08007247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007228:	f7fe f908 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 800722c:	61b8      	str	r0, [r7, #24]
        break;
 800722e:	e013      	b.n	8007258 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007230:	f7fe f926 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 8007234:	61b8      	str	r0, [r7, #24]
        break;
 8007236:	e00f      	b.n	8007258 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007238:	4b20      	ldr	r3, [pc, #128]	@ (80072bc <UART_SetConfig+0x268>)
 800723a:	61bb      	str	r3, [r7, #24]
        break;
 800723c:	e00c      	b.n	8007258 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800723e:	f7fe f89d 	bl	800537c <HAL_RCC_GetSysClockFreq>
 8007242:	61b8      	str	r0, [r7, #24]
        break;
 8007244:	e008      	b.n	8007258 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800724a:	61bb      	str	r3, [r7, #24]
        break;
 800724c:	e004      	b.n	8007258 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	77bb      	strb	r3, [r7, #30]
        break;
 8007256:	bf00      	nop
    }

    if (pclk != 0U)
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d018      	beq.n	8007290 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	085a      	lsrs	r2, r3, #1
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	441a      	add	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007270:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2b0f      	cmp	r3, #15
 8007276:	d909      	bls.n	800728c <UART_SetConfig+0x238>
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800727e:	d205      	bcs.n	800728c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	b29a      	uxth	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	e001      	b.n	8007290 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800729c:	7fbb      	ldrb	r3, [r7, #30]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3720      	adds	r7, #32
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	efff69f3 	.word	0xefff69f3
 80072ac:	40013800 	.word	0x40013800
 80072b0:	40021000 	.word	0x40021000
 80072b4:	40004400 	.word	0x40004400
 80072b8:	40004800 	.word	0x40004800
 80072bc:	007a1200 	.word	0x007a1200

080072c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	f003 0310 	and.w	r3, r3, #16
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01a      	beq.n	80073d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073be:	d10a      	bne.n	80073d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	605a      	str	r2, [r3, #4]
  }
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b098      	sub	sp, #96	@ 0x60
 8007408:	af02      	add	r7, sp, #8
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007414:	f7fb f8b0 	bl	8002578 <HAL_GetTick>
 8007418:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0308 	and.w	r3, r3, #8
 8007424:	2b08      	cmp	r3, #8
 8007426:	d12e      	bne.n	8007486 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007428:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007430:	2200      	movs	r2, #0
 8007432:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f88c 	bl	8007554 <UART_WaitOnFlagUntilTimeout>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d021      	beq.n	8007486 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007456:	653b      	str	r3, [r7, #80]	@ 0x50
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007460:	647b      	str	r3, [r7, #68]	@ 0x44
 8007462:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007466:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800746e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e6      	bne.n	8007442 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e062      	b.n	800754c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b04      	cmp	r3, #4
 8007492:	d149      	bne.n	8007528 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007494:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800749c:	2200      	movs	r2, #0
 800749e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f856 	bl	8007554 <UART_WaitOnFlagUntilTimeout>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d03c      	beq.n	8007528 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	623b      	str	r3, [r7, #32]
   return(result);
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80074ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e6      	bne.n	80074ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0301 	bic.w	r3, r3, #1
 80074f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007500:	61fa      	str	r2, [r7, #28]
 8007502:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	69b9      	ldr	r1, [r7, #24]
 8007506:	69fa      	ldr	r2, [r7, #28]
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	617b      	str	r3, [r7, #20]
   return(result);
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e5      	bne.n	80074e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e011      	b.n	800754c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3758      	adds	r7, #88	@ 0x58
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007564:	e04f      	b.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756c:	d04b      	beq.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756e:	f7fb f803 	bl	8002578 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	429a      	cmp	r2, r3
 800757c:	d302      	bcc.n	8007584 <UART_WaitOnFlagUntilTimeout+0x30>
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e04e      	b.n	8007626 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0304 	and.w	r3, r3, #4
 8007592:	2b00      	cmp	r3, #0
 8007594:	d037      	beq.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b80      	cmp	r3, #128	@ 0x80
 800759a:	d034      	beq.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b40      	cmp	r3, #64	@ 0x40
 80075a0:	d031      	beq.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d110      	bne.n	80075d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2208      	movs	r2, #8
 80075b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f8ff 	bl	80077bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2208      	movs	r2, #8
 80075c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e029      	b.n	8007626 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075e0:	d111      	bne.n	8007606 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 f8e5 	bl	80077bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e00f      	b.n	8007626 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69da      	ldr	r2, [r3, #28]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4013      	ands	r3, r2
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	429a      	cmp	r2, r3
 8007614:	bf0c      	ite	eq
 8007616:	2301      	moveq	r3, #1
 8007618:	2300      	movne	r3, #0
 800761a:	b2db      	uxtb	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	79fb      	ldrb	r3, [r7, #7]
 8007620:	429a      	cmp	r2, r3
 8007622:	d0a0      	beq.n	8007566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b096      	sub	sp, #88	@ 0x58
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	88fa      	ldrh	r2, [r7, #6]
 8007648:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2222      	movs	r2, #34	@ 0x22
 8007658:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007660:	2b00      	cmp	r3, #0
 8007662:	d028      	beq.n	80076b6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007668:	4a3e      	ldr	r2, [pc, #248]	@ (8007764 <UART_Start_Receive_DMA+0x134>)
 800766a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007670:	4a3d      	ldr	r2, [pc, #244]	@ (8007768 <UART_Start_Receive_DMA+0x138>)
 8007672:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007678:	4a3c      	ldr	r2, [pc, #240]	@ (800776c <UART_Start_Receive_DMA+0x13c>)
 800767a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007680:	2200      	movs	r2, #0
 8007682:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3324      	adds	r3, #36	@ 0x24
 800768e:	4619      	mov	r1, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007694:	461a      	mov	r2, r3
 8007696:	88fb      	ldrh	r3, [r7, #6]
 8007698:	f7fc f954 	bl	8003944 <HAL_DMA_Start_IT>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d009      	beq.n	80076b6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2210      	movs	r2, #16
 80076a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e051      	b.n	800775a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d018      	beq.n	80076f0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80076ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e6      	bne.n	80076be <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3308      	adds	r3, #8
 80076f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	f043 0301 	orr.w	r3, r3, #1
 8007706:	653b      	str	r3, [r7, #80]	@ 0x50
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3308      	adds	r3, #8
 800770e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007710:	637a      	str	r2, [r7, #52]	@ 0x34
 8007712:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007716:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800771e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e5      	bne.n	80076f0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	613b      	str	r3, [r7, #16]
   return(result);
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800773a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007744:	623a      	str	r2, [r7, #32]
 8007746:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	69f9      	ldr	r1, [r7, #28]
 800774a:	6a3a      	ldr	r2, [r7, #32]
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	61bb      	str	r3, [r7, #24]
   return(result);
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e5      	bne.n	8007724 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3758      	adds	r7, #88	@ 0x58
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	08007885 	.word	0x08007885
 8007768:	080079ab 	.word	0x080079ab
 800776c:	080079e9 	.word	0x080079e9

08007770 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007770:	b480      	push	{r7}
 8007772:	b089      	sub	sp, #36	@ 0x24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	60bb      	str	r3, [r7, #8]
   return(result);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800778c:	61fb      	str	r3, [r7, #28]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6979      	ldr	r1, [r7, #20]
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	613b      	str	r3, [r7, #16]
   return(result);
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e6      	bne.n	8007778 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80077b0:	bf00      	nop
 80077b2:	3724      	adds	r7, #36	@ 0x24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077bc:	b480      	push	{r7}
 80077be:	b095      	sub	sp, #84	@ 0x54
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80077e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e6      	bne.n	80077c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3308      	adds	r3, #8
 80077fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	61fb      	str	r3, [r7, #28]
   return(result);
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	f023 0301 	bic.w	r3, r3, #1
 800780c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3308      	adds	r3, #8
 8007814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007818:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800781c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e5      	bne.n	80077f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800782e:	2b01      	cmp	r3, #1
 8007830:	d118      	bne.n	8007864 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f023 0310 	bic.w	r3, r3, #16
 8007846:	647b      	str	r3, [r7, #68]	@ 0x44
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6979      	ldr	r1, [r7, #20]
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	613b      	str	r3, [r7, #16]
   return(result);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007878:	bf00      	nop
 800787a:	3754      	adds	r7, #84	@ 0x54
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b09c      	sub	sp, #112	@ 0x70
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007890:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	2b20      	cmp	r3, #32
 8007898:	d071      	beq.n	800797e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800789a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800789c:	2200      	movs	r2, #0
 800789e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078c2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e6      	bne.n	80078a2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3308      	adds	r3, #8
 80078da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e6:	f023 0301 	bic.w	r3, r3, #1
 80078ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80078ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80078f4:	647a      	str	r2, [r7, #68]	@ 0x44
 80078f6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e5      	bne.n	80078d4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3308      	adds	r3, #8
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	623b      	str	r3, [r7, #32]
   return(result);
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800791e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3308      	adds	r3, #8
 8007926:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007928:	633a      	str	r2, [r7, #48]	@ 0x30
 800792a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800792e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e5      	bne.n	8007908 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800793c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800793e:	2220      	movs	r2, #32
 8007940:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007948:	2b01      	cmp	r3, #1
 800794a:	d118      	bne.n	800797e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800794c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	60fb      	str	r3, [r7, #12]
   return(result);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f023 0310 	bic.w	r3, r3, #16
 8007960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	69b9      	ldr	r1, [r7, #24]
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	617b      	str	r3, [r7, #20]
   return(result);
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e6      	bne.n	800794c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800797e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007980:	2200      	movs	r2, #0
 8007982:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007988:	2b01      	cmp	r3, #1
 800798a:	d107      	bne.n	800799c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800798c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800798e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007992:	4619      	mov	r1, r3
 8007994:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007996:	f7ff fb51 	bl	800703c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800799a:	e002      	b.n	80079a2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800799c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800799e:	f7ff fb2f 	bl	8007000 <HAL_UART_RxCpltCallback>
}
 80079a2:	bf00      	nop
 80079a4:	3770      	adds	r7, #112	@ 0x70
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2201      	movs	r2, #1
 80079bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d109      	bne.n	80079da <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80079cc:	085b      	lsrs	r3, r3, #1
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4619      	mov	r1, r3
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f7ff fb32 	bl	800703c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079d8:	e002      	b.n	80079e0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f7ff fb1a 	bl	8007014 <HAL_UART_RxHalfCpltCallback>
}
 80079e0:	bf00      	nop
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a0e:	2b80      	cmp	r3, #128	@ 0x80
 8007a10:	d109      	bne.n	8007a26 <UART_DMAError+0x3e>
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b21      	cmp	r3, #33	@ 0x21
 8007a16:	d106      	bne.n	8007a26 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8007a20:	6978      	ldr	r0, [r7, #20]
 8007a22:	f7ff fea5 	bl	8007770 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a30:	2b40      	cmp	r3, #64	@ 0x40
 8007a32:	d109      	bne.n	8007a48 <UART_DMAError+0x60>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b22      	cmp	r3, #34	@ 0x22
 8007a38:	d106      	bne.n	8007a48 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007a42:	6978      	ldr	r0, [r7, #20]
 8007a44:	f7ff feba 	bl	80077bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a4e:	f043 0210 	orr.w	r2, r3, #16
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a58:	6978      	ldr	r0, [r7, #20]
 8007a5a:	f7ff fae5 	bl	8007028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a5e:	bf00      	nop
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f7ff facf 	bl	8007028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a8a:	bf00      	nop
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b088      	sub	sp, #32
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007aae:	61fb      	str	r3, [r7, #28]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6979      	ldr	r1, [r7, #20]
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff fa87 	bl	8006fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ade:	bf00      	nop
 8007ae0:	3720      	adds	r7, #32
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <__cvt>:
 8007afa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007afe:	ec57 6b10 	vmov	r6, r7, d0
 8007b02:	2f00      	cmp	r7, #0
 8007b04:	460c      	mov	r4, r1
 8007b06:	4619      	mov	r1, r3
 8007b08:	463b      	mov	r3, r7
 8007b0a:	bfbb      	ittet	lt
 8007b0c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007b10:	461f      	movlt	r7, r3
 8007b12:	2300      	movge	r3, #0
 8007b14:	232d      	movlt	r3, #45	@ 0x2d
 8007b16:	700b      	strb	r3, [r1, #0]
 8007b18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b1a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007b1e:	4691      	mov	r9, r2
 8007b20:	f023 0820 	bic.w	r8, r3, #32
 8007b24:	bfbc      	itt	lt
 8007b26:	4632      	movlt	r2, r6
 8007b28:	4616      	movlt	r6, r2
 8007b2a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b2e:	d005      	beq.n	8007b3c <__cvt+0x42>
 8007b30:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007b34:	d100      	bne.n	8007b38 <__cvt+0x3e>
 8007b36:	3401      	adds	r4, #1
 8007b38:	2102      	movs	r1, #2
 8007b3a:	e000      	b.n	8007b3e <__cvt+0x44>
 8007b3c:	2103      	movs	r1, #3
 8007b3e:	ab03      	add	r3, sp, #12
 8007b40:	9301      	str	r3, [sp, #4]
 8007b42:	ab02      	add	r3, sp, #8
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	ec47 6b10 	vmov	d0, r6, r7
 8007b4a:	4653      	mov	r3, sl
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	f000 fef3 	bl	8008938 <_dtoa_r>
 8007b52:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007b56:	4605      	mov	r5, r0
 8007b58:	d119      	bne.n	8007b8e <__cvt+0x94>
 8007b5a:	f019 0f01 	tst.w	r9, #1
 8007b5e:	d00e      	beq.n	8007b7e <__cvt+0x84>
 8007b60:	eb00 0904 	add.w	r9, r0, r4
 8007b64:	2200      	movs	r2, #0
 8007b66:	2300      	movs	r3, #0
 8007b68:	4630      	mov	r0, r6
 8007b6a:	4639      	mov	r1, r7
 8007b6c:	f7f8 ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b70:	b108      	cbz	r0, 8007b76 <__cvt+0x7c>
 8007b72:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b76:	2230      	movs	r2, #48	@ 0x30
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	454b      	cmp	r3, r9
 8007b7c:	d31e      	bcc.n	8007bbc <__cvt+0xc2>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b82:	1b5b      	subs	r3, r3, r5
 8007b84:	4628      	mov	r0, r5
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	b004      	add	sp, #16
 8007b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b92:	eb00 0904 	add.w	r9, r0, r4
 8007b96:	d1e5      	bne.n	8007b64 <__cvt+0x6a>
 8007b98:	7803      	ldrb	r3, [r0, #0]
 8007b9a:	2b30      	cmp	r3, #48	@ 0x30
 8007b9c:	d10a      	bne.n	8007bb4 <__cvt+0xba>
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	f7f8 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007baa:	b918      	cbnz	r0, 8007bb4 <__cvt+0xba>
 8007bac:	f1c4 0401 	rsb	r4, r4, #1
 8007bb0:	f8ca 4000 	str.w	r4, [sl]
 8007bb4:	f8da 3000 	ldr.w	r3, [sl]
 8007bb8:	4499      	add	r9, r3
 8007bba:	e7d3      	b.n	8007b64 <__cvt+0x6a>
 8007bbc:	1c59      	adds	r1, r3, #1
 8007bbe:	9103      	str	r1, [sp, #12]
 8007bc0:	701a      	strb	r2, [r3, #0]
 8007bc2:	e7d9      	b.n	8007b78 <__cvt+0x7e>

08007bc4 <__exponent>:
 8007bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	bfba      	itte	lt
 8007bca:	4249      	neglt	r1, r1
 8007bcc:	232d      	movlt	r3, #45	@ 0x2d
 8007bce:	232b      	movge	r3, #43	@ 0x2b
 8007bd0:	2909      	cmp	r1, #9
 8007bd2:	7002      	strb	r2, [r0, #0]
 8007bd4:	7043      	strb	r3, [r0, #1]
 8007bd6:	dd29      	ble.n	8007c2c <__exponent+0x68>
 8007bd8:	f10d 0307 	add.w	r3, sp, #7
 8007bdc:	461d      	mov	r5, r3
 8007bde:	270a      	movs	r7, #10
 8007be0:	461a      	mov	r2, r3
 8007be2:	fbb1 f6f7 	udiv	r6, r1, r7
 8007be6:	fb07 1416 	mls	r4, r7, r6, r1
 8007bea:	3430      	adds	r4, #48	@ 0x30
 8007bec:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	2c63      	cmp	r4, #99	@ 0x63
 8007bf4:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	dcf1      	bgt.n	8007be0 <__exponent+0x1c>
 8007bfc:	3130      	adds	r1, #48	@ 0x30
 8007bfe:	1e94      	subs	r4, r2, #2
 8007c00:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007c04:	1c41      	adds	r1, r0, #1
 8007c06:	4623      	mov	r3, r4
 8007c08:	42ab      	cmp	r3, r5
 8007c0a:	d30a      	bcc.n	8007c22 <__exponent+0x5e>
 8007c0c:	f10d 0309 	add.w	r3, sp, #9
 8007c10:	1a9b      	subs	r3, r3, r2
 8007c12:	42ac      	cmp	r4, r5
 8007c14:	bf88      	it	hi
 8007c16:	2300      	movhi	r3, #0
 8007c18:	3302      	adds	r3, #2
 8007c1a:	4403      	add	r3, r0
 8007c1c:	1a18      	subs	r0, r3, r0
 8007c1e:	b003      	add	sp, #12
 8007c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c22:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007c26:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007c2a:	e7ed      	b.n	8007c08 <__exponent+0x44>
 8007c2c:	2330      	movs	r3, #48	@ 0x30
 8007c2e:	3130      	adds	r1, #48	@ 0x30
 8007c30:	7083      	strb	r3, [r0, #2]
 8007c32:	70c1      	strb	r1, [r0, #3]
 8007c34:	1d03      	adds	r3, r0, #4
 8007c36:	e7f1      	b.n	8007c1c <__exponent+0x58>

08007c38 <_printf_float>:
 8007c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	b08d      	sub	sp, #52	@ 0x34
 8007c3e:	460c      	mov	r4, r1
 8007c40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007c44:	4616      	mov	r6, r2
 8007c46:	461f      	mov	r7, r3
 8007c48:	4605      	mov	r5, r0
 8007c4a:	f000 fd75 	bl	8008738 <_localeconv_r>
 8007c4e:	6803      	ldr	r3, [r0, #0]
 8007c50:	9304      	str	r3, [sp, #16]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7f8 fb0c 	bl	8000270 <strlen>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c60:	9005      	str	r0, [sp, #20]
 8007c62:	3307      	adds	r3, #7
 8007c64:	f023 0307 	bic.w	r3, r3, #7
 8007c68:	f103 0208 	add.w	r2, r3, #8
 8007c6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007c70:	f8d4 b000 	ldr.w	fp, [r4]
 8007c74:	f8c8 2000 	str.w	r2, [r8]
 8007c78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007c80:	9307      	str	r3, [sp, #28]
 8007c82:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c8e:	4b9c      	ldr	r3, [pc, #624]	@ (8007f00 <_printf_float+0x2c8>)
 8007c90:	f04f 32ff 	mov.w	r2, #4294967295
 8007c94:	f7f8 ff4a 	bl	8000b2c <__aeabi_dcmpun>
 8007c98:	bb70      	cbnz	r0, 8007cf8 <_printf_float+0xc0>
 8007c9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c9e:	4b98      	ldr	r3, [pc, #608]	@ (8007f00 <_printf_float+0x2c8>)
 8007ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca4:	f7f8 ff24 	bl	8000af0 <__aeabi_dcmple>
 8007ca8:	bb30      	cbnz	r0, 8007cf8 <_printf_float+0xc0>
 8007caa:	2200      	movs	r2, #0
 8007cac:	2300      	movs	r3, #0
 8007cae:	4640      	mov	r0, r8
 8007cb0:	4649      	mov	r1, r9
 8007cb2:	f7f8 ff13 	bl	8000adc <__aeabi_dcmplt>
 8007cb6:	b110      	cbz	r0, 8007cbe <_printf_float+0x86>
 8007cb8:	232d      	movs	r3, #45	@ 0x2d
 8007cba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cbe:	4a91      	ldr	r2, [pc, #580]	@ (8007f04 <_printf_float+0x2cc>)
 8007cc0:	4b91      	ldr	r3, [pc, #580]	@ (8007f08 <_printf_float+0x2d0>)
 8007cc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007cc6:	bf8c      	ite	hi
 8007cc8:	4690      	movhi	r8, r2
 8007cca:	4698      	movls	r8, r3
 8007ccc:	2303      	movs	r3, #3
 8007cce:	6123      	str	r3, [r4, #16]
 8007cd0:	f02b 0304 	bic.w	r3, fp, #4
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	f04f 0900 	mov.w	r9, #0
 8007cda:	9700      	str	r7, [sp, #0]
 8007cdc:	4633      	mov	r3, r6
 8007cde:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f000 f9d2 	bl	800808c <_printf_common>
 8007ce8:	3001      	adds	r0, #1
 8007cea:	f040 808d 	bne.w	8007e08 <_printf_float+0x1d0>
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	b00d      	add	sp, #52	@ 0x34
 8007cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf8:	4642      	mov	r2, r8
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	4649      	mov	r1, r9
 8007d00:	f7f8 ff14 	bl	8000b2c <__aeabi_dcmpun>
 8007d04:	b140      	cbz	r0, 8007d18 <_printf_float+0xe0>
 8007d06:	464b      	mov	r3, r9
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	bfbc      	itt	lt
 8007d0c:	232d      	movlt	r3, #45	@ 0x2d
 8007d0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007d12:	4a7e      	ldr	r2, [pc, #504]	@ (8007f0c <_printf_float+0x2d4>)
 8007d14:	4b7e      	ldr	r3, [pc, #504]	@ (8007f10 <_printf_float+0x2d8>)
 8007d16:	e7d4      	b.n	8007cc2 <_printf_float+0x8a>
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007d1e:	9206      	str	r2, [sp, #24]
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	d13b      	bne.n	8007d9c <_printf_float+0x164>
 8007d24:	2306      	movs	r3, #6
 8007d26:	6063      	str	r3, [r4, #4]
 8007d28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	6022      	str	r2, [r4, #0]
 8007d30:	9303      	str	r3, [sp, #12]
 8007d32:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007d38:	ab09      	add	r3, sp, #36	@ 0x24
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	6861      	ldr	r1, [r4, #4]
 8007d3e:	ec49 8b10 	vmov	d0, r8, r9
 8007d42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007d46:	4628      	mov	r0, r5
 8007d48:	f7ff fed7 	bl	8007afa <__cvt>
 8007d4c:	9b06      	ldr	r3, [sp, #24]
 8007d4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d50:	2b47      	cmp	r3, #71	@ 0x47
 8007d52:	4680      	mov	r8, r0
 8007d54:	d129      	bne.n	8007daa <_printf_float+0x172>
 8007d56:	1cc8      	adds	r0, r1, #3
 8007d58:	db02      	blt.n	8007d60 <_printf_float+0x128>
 8007d5a:	6863      	ldr	r3, [r4, #4]
 8007d5c:	4299      	cmp	r1, r3
 8007d5e:	dd41      	ble.n	8007de4 <_printf_float+0x1ac>
 8007d60:	f1aa 0a02 	sub.w	sl, sl, #2
 8007d64:	fa5f fa8a 	uxtb.w	sl, sl
 8007d68:	3901      	subs	r1, #1
 8007d6a:	4652      	mov	r2, sl
 8007d6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007d70:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d72:	f7ff ff27 	bl	8007bc4 <__exponent>
 8007d76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d78:	1813      	adds	r3, r2, r0
 8007d7a:	2a01      	cmp	r2, #1
 8007d7c:	4681      	mov	r9, r0
 8007d7e:	6123      	str	r3, [r4, #16]
 8007d80:	dc02      	bgt.n	8007d88 <_printf_float+0x150>
 8007d82:	6822      	ldr	r2, [r4, #0]
 8007d84:	07d2      	lsls	r2, r2, #31
 8007d86:	d501      	bpl.n	8007d8c <_printf_float+0x154>
 8007d88:	3301      	adds	r3, #1
 8007d8a:	6123      	str	r3, [r4, #16]
 8007d8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d0a2      	beq.n	8007cda <_printf_float+0xa2>
 8007d94:	232d      	movs	r3, #45	@ 0x2d
 8007d96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d9a:	e79e      	b.n	8007cda <_printf_float+0xa2>
 8007d9c:	9a06      	ldr	r2, [sp, #24]
 8007d9e:	2a47      	cmp	r2, #71	@ 0x47
 8007da0:	d1c2      	bne.n	8007d28 <_printf_float+0xf0>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1c0      	bne.n	8007d28 <_printf_float+0xf0>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e7bd      	b.n	8007d26 <_printf_float+0xee>
 8007daa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007dae:	d9db      	bls.n	8007d68 <_printf_float+0x130>
 8007db0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007db4:	d118      	bne.n	8007de8 <_printf_float+0x1b0>
 8007db6:	2900      	cmp	r1, #0
 8007db8:	6863      	ldr	r3, [r4, #4]
 8007dba:	dd0b      	ble.n	8007dd4 <_printf_float+0x19c>
 8007dbc:	6121      	str	r1, [r4, #16]
 8007dbe:	b913      	cbnz	r3, 8007dc6 <_printf_float+0x18e>
 8007dc0:	6822      	ldr	r2, [r4, #0]
 8007dc2:	07d0      	lsls	r0, r2, #31
 8007dc4:	d502      	bpl.n	8007dcc <_printf_float+0x194>
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	440b      	add	r3, r1
 8007dca:	6123      	str	r3, [r4, #16]
 8007dcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007dce:	f04f 0900 	mov.w	r9, #0
 8007dd2:	e7db      	b.n	8007d8c <_printf_float+0x154>
 8007dd4:	b913      	cbnz	r3, 8007ddc <_printf_float+0x1a4>
 8007dd6:	6822      	ldr	r2, [r4, #0]
 8007dd8:	07d2      	lsls	r2, r2, #31
 8007dda:	d501      	bpl.n	8007de0 <_printf_float+0x1a8>
 8007ddc:	3302      	adds	r3, #2
 8007dde:	e7f4      	b.n	8007dca <_printf_float+0x192>
 8007de0:	2301      	movs	r3, #1
 8007de2:	e7f2      	b.n	8007dca <_printf_float+0x192>
 8007de4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dea:	4299      	cmp	r1, r3
 8007dec:	db05      	blt.n	8007dfa <_printf_float+0x1c2>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	6121      	str	r1, [r4, #16]
 8007df2:	07d8      	lsls	r0, r3, #31
 8007df4:	d5ea      	bpl.n	8007dcc <_printf_float+0x194>
 8007df6:	1c4b      	adds	r3, r1, #1
 8007df8:	e7e7      	b.n	8007dca <_printf_float+0x192>
 8007dfa:	2900      	cmp	r1, #0
 8007dfc:	bfd4      	ite	le
 8007dfe:	f1c1 0202 	rsble	r2, r1, #2
 8007e02:	2201      	movgt	r2, #1
 8007e04:	4413      	add	r3, r2
 8007e06:	e7e0      	b.n	8007dca <_printf_float+0x192>
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	055a      	lsls	r2, r3, #21
 8007e0c:	d407      	bmi.n	8007e1e <_printf_float+0x1e6>
 8007e0e:	6923      	ldr	r3, [r4, #16]
 8007e10:	4642      	mov	r2, r8
 8007e12:	4631      	mov	r1, r6
 8007e14:	4628      	mov	r0, r5
 8007e16:	47b8      	blx	r7
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d12b      	bne.n	8007e74 <_printf_float+0x23c>
 8007e1c:	e767      	b.n	8007cee <_printf_float+0xb6>
 8007e1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e22:	f240 80dd 	bls.w	8007fe0 <_printf_float+0x3a8>
 8007e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f7f8 fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d033      	beq.n	8007e9e <_printf_float+0x266>
 8007e36:	4a37      	ldr	r2, [pc, #220]	@ (8007f14 <_printf_float+0x2dc>)
 8007e38:	2301      	movs	r3, #1
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b8      	blx	r7
 8007e40:	3001      	adds	r0, #1
 8007e42:	f43f af54 	beq.w	8007cee <_printf_float+0xb6>
 8007e46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007e4a:	4543      	cmp	r3, r8
 8007e4c:	db02      	blt.n	8007e54 <_printf_float+0x21c>
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	07d8      	lsls	r0, r3, #31
 8007e52:	d50f      	bpl.n	8007e74 <_printf_float+0x23c>
 8007e54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	47b8      	blx	r7
 8007e5e:	3001      	adds	r0, #1
 8007e60:	f43f af45 	beq.w	8007cee <_printf_float+0xb6>
 8007e64:	f04f 0900 	mov.w	r9, #0
 8007e68:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e6c:	f104 0a1a 	add.w	sl, r4, #26
 8007e70:	45c8      	cmp	r8, r9
 8007e72:	dc09      	bgt.n	8007e88 <_printf_float+0x250>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	079b      	lsls	r3, r3, #30
 8007e78:	f100 8103 	bmi.w	8008082 <_printf_float+0x44a>
 8007e7c:	68e0      	ldr	r0, [r4, #12]
 8007e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e80:	4298      	cmp	r0, r3
 8007e82:	bfb8      	it	lt
 8007e84:	4618      	movlt	r0, r3
 8007e86:	e734      	b.n	8007cf2 <_printf_float+0xba>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4628      	mov	r0, r5
 8007e90:	47b8      	blx	r7
 8007e92:	3001      	adds	r0, #1
 8007e94:	f43f af2b 	beq.w	8007cee <_printf_float+0xb6>
 8007e98:	f109 0901 	add.w	r9, r9, #1
 8007e9c:	e7e8      	b.n	8007e70 <_printf_float+0x238>
 8007e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dc39      	bgt.n	8007f18 <_printf_float+0x2e0>
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f14 <_printf_float+0x2dc>)
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f43f af1d 	beq.w	8007cee <_printf_float+0xb6>
 8007eb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007eb8:	ea59 0303 	orrs.w	r3, r9, r3
 8007ebc:	d102      	bne.n	8007ec4 <_printf_float+0x28c>
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	07d9      	lsls	r1, r3, #31
 8007ec2:	d5d7      	bpl.n	8007e74 <_printf_float+0x23c>
 8007ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b8      	blx	r7
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f43f af0d 	beq.w	8007cee <_printf_float+0xb6>
 8007ed4:	f04f 0a00 	mov.w	sl, #0
 8007ed8:	f104 0b1a 	add.w	fp, r4, #26
 8007edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ede:	425b      	negs	r3, r3
 8007ee0:	4553      	cmp	r3, sl
 8007ee2:	dc01      	bgt.n	8007ee8 <_printf_float+0x2b0>
 8007ee4:	464b      	mov	r3, r9
 8007ee6:	e793      	b.n	8007e10 <_printf_float+0x1d8>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	465a      	mov	r2, fp
 8007eec:	4631      	mov	r1, r6
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b8      	blx	r7
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f43f aefb 	beq.w	8007cee <_printf_float+0xb6>
 8007ef8:	f10a 0a01 	add.w	sl, sl, #1
 8007efc:	e7ee      	b.n	8007edc <_printf_float+0x2a4>
 8007efe:	bf00      	nop
 8007f00:	7fefffff 	.word	0x7fefffff
 8007f04:	0800a794 	.word	0x0800a794
 8007f08:	0800a790 	.word	0x0800a790
 8007f0c:	0800a79c 	.word	0x0800a79c
 8007f10:	0800a798 	.word	0x0800a798
 8007f14:	0800a7a0 	.word	0x0800a7a0
 8007f18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f1e:	4553      	cmp	r3, sl
 8007f20:	bfa8      	it	ge
 8007f22:	4653      	movge	r3, sl
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	4699      	mov	r9, r3
 8007f28:	dc36      	bgt.n	8007f98 <_printf_float+0x360>
 8007f2a:	f04f 0b00 	mov.w	fp, #0
 8007f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f32:	f104 021a 	add.w	r2, r4, #26
 8007f36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f38:	9306      	str	r3, [sp, #24]
 8007f3a:	eba3 0309 	sub.w	r3, r3, r9
 8007f3e:	455b      	cmp	r3, fp
 8007f40:	dc31      	bgt.n	8007fa6 <_printf_float+0x36e>
 8007f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f44:	459a      	cmp	sl, r3
 8007f46:	dc3a      	bgt.n	8007fbe <_printf_float+0x386>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	07da      	lsls	r2, r3, #31
 8007f4c:	d437      	bmi.n	8007fbe <_printf_float+0x386>
 8007f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f50:	ebaa 0903 	sub.w	r9, sl, r3
 8007f54:	9b06      	ldr	r3, [sp, #24]
 8007f56:	ebaa 0303 	sub.w	r3, sl, r3
 8007f5a:	4599      	cmp	r9, r3
 8007f5c:	bfa8      	it	ge
 8007f5e:	4699      	movge	r9, r3
 8007f60:	f1b9 0f00 	cmp.w	r9, #0
 8007f64:	dc33      	bgt.n	8007fce <_printf_float+0x396>
 8007f66:	f04f 0800 	mov.w	r8, #0
 8007f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f6e:	f104 0b1a 	add.w	fp, r4, #26
 8007f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f74:	ebaa 0303 	sub.w	r3, sl, r3
 8007f78:	eba3 0309 	sub.w	r3, r3, r9
 8007f7c:	4543      	cmp	r3, r8
 8007f7e:	f77f af79 	ble.w	8007e74 <_printf_float+0x23c>
 8007f82:	2301      	movs	r3, #1
 8007f84:	465a      	mov	r2, fp
 8007f86:	4631      	mov	r1, r6
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b8      	blx	r7
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	f43f aeae 	beq.w	8007cee <_printf_float+0xb6>
 8007f92:	f108 0801 	add.w	r8, r8, #1
 8007f96:	e7ec      	b.n	8007f72 <_printf_float+0x33a>
 8007f98:	4642      	mov	r2, r8
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47b8      	blx	r7
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d1c2      	bne.n	8007f2a <_printf_float+0x2f2>
 8007fa4:	e6a3      	b.n	8007cee <_printf_float+0xb6>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4628      	mov	r0, r5
 8007fac:	9206      	str	r2, [sp, #24]
 8007fae:	47b8      	blx	r7
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	f43f ae9c 	beq.w	8007cee <_printf_float+0xb6>
 8007fb6:	9a06      	ldr	r2, [sp, #24]
 8007fb8:	f10b 0b01 	add.w	fp, fp, #1
 8007fbc:	e7bb      	b.n	8007f36 <_printf_float+0x2fe>
 8007fbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	47b8      	blx	r7
 8007fc8:	3001      	adds	r0, #1
 8007fca:	d1c0      	bne.n	8007f4e <_printf_float+0x316>
 8007fcc:	e68f      	b.n	8007cee <_printf_float+0xb6>
 8007fce:	9a06      	ldr	r2, [sp, #24]
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	4442      	add	r2, r8
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	d1c3      	bne.n	8007f66 <_printf_float+0x32e>
 8007fde:	e686      	b.n	8007cee <_printf_float+0xb6>
 8007fe0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fe4:	f1ba 0f01 	cmp.w	sl, #1
 8007fe8:	dc01      	bgt.n	8007fee <_printf_float+0x3b6>
 8007fea:	07db      	lsls	r3, r3, #31
 8007fec:	d536      	bpl.n	800805c <_printf_float+0x424>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f ae78 	beq.w	8007cee <_printf_float+0xb6>
 8007ffe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008002:	4631      	mov	r1, r6
 8008004:	4628      	mov	r0, r5
 8008006:	47b8      	blx	r7
 8008008:	3001      	adds	r0, #1
 800800a:	f43f ae70 	beq.w	8007cee <_printf_float+0xb6>
 800800e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008012:	2200      	movs	r2, #0
 8008014:	2300      	movs	r3, #0
 8008016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800801a:	f7f8 fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 800801e:	b9c0      	cbnz	r0, 8008052 <_printf_float+0x41a>
 8008020:	4653      	mov	r3, sl
 8008022:	f108 0201 	add.w	r2, r8, #1
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	d10c      	bne.n	800804a <_printf_float+0x412>
 8008030:	e65d      	b.n	8007cee <_printf_float+0xb6>
 8008032:	2301      	movs	r3, #1
 8008034:	465a      	mov	r2, fp
 8008036:	4631      	mov	r1, r6
 8008038:	4628      	mov	r0, r5
 800803a:	47b8      	blx	r7
 800803c:	3001      	adds	r0, #1
 800803e:	f43f ae56 	beq.w	8007cee <_printf_float+0xb6>
 8008042:	f108 0801 	add.w	r8, r8, #1
 8008046:	45d0      	cmp	r8, sl
 8008048:	dbf3      	blt.n	8008032 <_printf_float+0x3fa>
 800804a:	464b      	mov	r3, r9
 800804c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008050:	e6df      	b.n	8007e12 <_printf_float+0x1da>
 8008052:	f04f 0800 	mov.w	r8, #0
 8008056:	f104 0b1a 	add.w	fp, r4, #26
 800805a:	e7f4      	b.n	8008046 <_printf_float+0x40e>
 800805c:	2301      	movs	r3, #1
 800805e:	4642      	mov	r2, r8
 8008060:	e7e1      	b.n	8008026 <_printf_float+0x3ee>
 8008062:	2301      	movs	r3, #1
 8008064:	464a      	mov	r2, r9
 8008066:	4631      	mov	r1, r6
 8008068:	4628      	mov	r0, r5
 800806a:	47b8      	blx	r7
 800806c:	3001      	adds	r0, #1
 800806e:	f43f ae3e 	beq.w	8007cee <_printf_float+0xb6>
 8008072:	f108 0801 	add.w	r8, r8, #1
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800807a:	1a5b      	subs	r3, r3, r1
 800807c:	4543      	cmp	r3, r8
 800807e:	dcf0      	bgt.n	8008062 <_printf_float+0x42a>
 8008080:	e6fc      	b.n	8007e7c <_printf_float+0x244>
 8008082:	f04f 0800 	mov.w	r8, #0
 8008086:	f104 0919 	add.w	r9, r4, #25
 800808a:	e7f4      	b.n	8008076 <_printf_float+0x43e>

0800808c <_printf_common>:
 800808c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008090:	4616      	mov	r6, r2
 8008092:	4698      	mov	r8, r3
 8008094:	688a      	ldr	r2, [r1, #8]
 8008096:	690b      	ldr	r3, [r1, #16]
 8008098:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800809c:	4293      	cmp	r3, r2
 800809e:	bfb8      	it	lt
 80080a0:	4613      	movlt	r3, r2
 80080a2:	6033      	str	r3, [r6, #0]
 80080a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80080a8:	4607      	mov	r7, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	b10a      	cbz	r2, 80080b2 <_printf_common+0x26>
 80080ae:	3301      	adds	r3, #1
 80080b0:	6033      	str	r3, [r6, #0]
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	0699      	lsls	r1, r3, #26
 80080b6:	bf42      	ittt	mi
 80080b8:	6833      	ldrmi	r3, [r6, #0]
 80080ba:	3302      	addmi	r3, #2
 80080bc:	6033      	strmi	r3, [r6, #0]
 80080be:	6825      	ldr	r5, [r4, #0]
 80080c0:	f015 0506 	ands.w	r5, r5, #6
 80080c4:	d106      	bne.n	80080d4 <_printf_common+0x48>
 80080c6:	f104 0a19 	add.w	sl, r4, #25
 80080ca:	68e3      	ldr	r3, [r4, #12]
 80080cc:	6832      	ldr	r2, [r6, #0]
 80080ce:	1a9b      	subs	r3, r3, r2
 80080d0:	42ab      	cmp	r3, r5
 80080d2:	dc26      	bgt.n	8008122 <_printf_common+0x96>
 80080d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080d8:	6822      	ldr	r2, [r4, #0]
 80080da:	3b00      	subs	r3, #0
 80080dc:	bf18      	it	ne
 80080de:	2301      	movne	r3, #1
 80080e0:	0692      	lsls	r2, r2, #26
 80080e2:	d42b      	bmi.n	800813c <_printf_common+0xb0>
 80080e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080e8:	4641      	mov	r1, r8
 80080ea:	4638      	mov	r0, r7
 80080ec:	47c8      	blx	r9
 80080ee:	3001      	adds	r0, #1
 80080f0:	d01e      	beq.n	8008130 <_printf_common+0xa4>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	6922      	ldr	r2, [r4, #16]
 80080f6:	f003 0306 	and.w	r3, r3, #6
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	bf02      	ittt	eq
 80080fe:	68e5      	ldreq	r5, [r4, #12]
 8008100:	6833      	ldreq	r3, [r6, #0]
 8008102:	1aed      	subeq	r5, r5, r3
 8008104:	68a3      	ldr	r3, [r4, #8]
 8008106:	bf0c      	ite	eq
 8008108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800810c:	2500      	movne	r5, #0
 800810e:	4293      	cmp	r3, r2
 8008110:	bfc4      	itt	gt
 8008112:	1a9b      	subgt	r3, r3, r2
 8008114:	18ed      	addgt	r5, r5, r3
 8008116:	2600      	movs	r6, #0
 8008118:	341a      	adds	r4, #26
 800811a:	42b5      	cmp	r5, r6
 800811c:	d11a      	bne.n	8008154 <_printf_common+0xc8>
 800811e:	2000      	movs	r0, #0
 8008120:	e008      	b.n	8008134 <_printf_common+0xa8>
 8008122:	2301      	movs	r3, #1
 8008124:	4652      	mov	r2, sl
 8008126:	4641      	mov	r1, r8
 8008128:	4638      	mov	r0, r7
 800812a:	47c8      	blx	r9
 800812c:	3001      	adds	r0, #1
 800812e:	d103      	bne.n	8008138 <_printf_common+0xac>
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008138:	3501      	adds	r5, #1
 800813a:	e7c6      	b.n	80080ca <_printf_common+0x3e>
 800813c:	18e1      	adds	r1, r4, r3
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	2030      	movs	r0, #48	@ 0x30
 8008142:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008146:	4422      	add	r2, r4
 8008148:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800814c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008150:	3302      	adds	r3, #2
 8008152:	e7c7      	b.n	80080e4 <_printf_common+0x58>
 8008154:	2301      	movs	r3, #1
 8008156:	4622      	mov	r2, r4
 8008158:	4641      	mov	r1, r8
 800815a:	4638      	mov	r0, r7
 800815c:	47c8      	blx	r9
 800815e:	3001      	adds	r0, #1
 8008160:	d0e6      	beq.n	8008130 <_printf_common+0xa4>
 8008162:	3601      	adds	r6, #1
 8008164:	e7d9      	b.n	800811a <_printf_common+0x8e>
	...

08008168 <_printf_i>:
 8008168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800816c:	7e0f      	ldrb	r7, [r1, #24]
 800816e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008170:	2f78      	cmp	r7, #120	@ 0x78
 8008172:	4691      	mov	r9, r2
 8008174:	4680      	mov	r8, r0
 8008176:	460c      	mov	r4, r1
 8008178:	469a      	mov	sl, r3
 800817a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800817e:	d807      	bhi.n	8008190 <_printf_i+0x28>
 8008180:	2f62      	cmp	r7, #98	@ 0x62
 8008182:	d80a      	bhi.n	800819a <_printf_i+0x32>
 8008184:	2f00      	cmp	r7, #0
 8008186:	f000 80d1 	beq.w	800832c <_printf_i+0x1c4>
 800818a:	2f58      	cmp	r7, #88	@ 0x58
 800818c:	f000 80b8 	beq.w	8008300 <_printf_i+0x198>
 8008190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008194:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008198:	e03a      	b.n	8008210 <_printf_i+0xa8>
 800819a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800819e:	2b15      	cmp	r3, #21
 80081a0:	d8f6      	bhi.n	8008190 <_printf_i+0x28>
 80081a2:	a101      	add	r1, pc, #4	@ (adr r1, 80081a8 <_printf_i+0x40>)
 80081a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081a8:	08008201 	.word	0x08008201
 80081ac:	08008215 	.word	0x08008215
 80081b0:	08008191 	.word	0x08008191
 80081b4:	08008191 	.word	0x08008191
 80081b8:	08008191 	.word	0x08008191
 80081bc:	08008191 	.word	0x08008191
 80081c0:	08008215 	.word	0x08008215
 80081c4:	08008191 	.word	0x08008191
 80081c8:	08008191 	.word	0x08008191
 80081cc:	08008191 	.word	0x08008191
 80081d0:	08008191 	.word	0x08008191
 80081d4:	08008313 	.word	0x08008313
 80081d8:	0800823f 	.word	0x0800823f
 80081dc:	080082cd 	.word	0x080082cd
 80081e0:	08008191 	.word	0x08008191
 80081e4:	08008191 	.word	0x08008191
 80081e8:	08008335 	.word	0x08008335
 80081ec:	08008191 	.word	0x08008191
 80081f0:	0800823f 	.word	0x0800823f
 80081f4:	08008191 	.word	0x08008191
 80081f8:	08008191 	.word	0x08008191
 80081fc:	080082d5 	.word	0x080082d5
 8008200:	6833      	ldr	r3, [r6, #0]
 8008202:	1d1a      	adds	r2, r3, #4
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6032      	str	r2, [r6, #0]
 8008208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800820c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008210:	2301      	movs	r3, #1
 8008212:	e09c      	b.n	800834e <_printf_i+0x1e6>
 8008214:	6833      	ldr	r3, [r6, #0]
 8008216:	6820      	ldr	r0, [r4, #0]
 8008218:	1d19      	adds	r1, r3, #4
 800821a:	6031      	str	r1, [r6, #0]
 800821c:	0606      	lsls	r6, r0, #24
 800821e:	d501      	bpl.n	8008224 <_printf_i+0xbc>
 8008220:	681d      	ldr	r5, [r3, #0]
 8008222:	e003      	b.n	800822c <_printf_i+0xc4>
 8008224:	0645      	lsls	r5, r0, #25
 8008226:	d5fb      	bpl.n	8008220 <_printf_i+0xb8>
 8008228:	f9b3 5000 	ldrsh.w	r5, [r3]
 800822c:	2d00      	cmp	r5, #0
 800822e:	da03      	bge.n	8008238 <_printf_i+0xd0>
 8008230:	232d      	movs	r3, #45	@ 0x2d
 8008232:	426d      	negs	r5, r5
 8008234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008238:	4858      	ldr	r0, [pc, #352]	@ (800839c <_printf_i+0x234>)
 800823a:	230a      	movs	r3, #10
 800823c:	e011      	b.n	8008262 <_printf_i+0xfa>
 800823e:	6821      	ldr	r1, [r4, #0]
 8008240:	6833      	ldr	r3, [r6, #0]
 8008242:	0608      	lsls	r0, r1, #24
 8008244:	f853 5b04 	ldr.w	r5, [r3], #4
 8008248:	d402      	bmi.n	8008250 <_printf_i+0xe8>
 800824a:	0649      	lsls	r1, r1, #25
 800824c:	bf48      	it	mi
 800824e:	b2ad      	uxthmi	r5, r5
 8008250:	2f6f      	cmp	r7, #111	@ 0x6f
 8008252:	4852      	ldr	r0, [pc, #328]	@ (800839c <_printf_i+0x234>)
 8008254:	6033      	str	r3, [r6, #0]
 8008256:	bf14      	ite	ne
 8008258:	230a      	movne	r3, #10
 800825a:	2308      	moveq	r3, #8
 800825c:	2100      	movs	r1, #0
 800825e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008262:	6866      	ldr	r6, [r4, #4]
 8008264:	60a6      	str	r6, [r4, #8]
 8008266:	2e00      	cmp	r6, #0
 8008268:	db05      	blt.n	8008276 <_printf_i+0x10e>
 800826a:	6821      	ldr	r1, [r4, #0]
 800826c:	432e      	orrs	r6, r5
 800826e:	f021 0104 	bic.w	r1, r1, #4
 8008272:	6021      	str	r1, [r4, #0]
 8008274:	d04b      	beq.n	800830e <_printf_i+0x1a6>
 8008276:	4616      	mov	r6, r2
 8008278:	fbb5 f1f3 	udiv	r1, r5, r3
 800827c:	fb03 5711 	mls	r7, r3, r1, r5
 8008280:	5dc7      	ldrb	r7, [r0, r7]
 8008282:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008286:	462f      	mov	r7, r5
 8008288:	42bb      	cmp	r3, r7
 800828a:	460d      	mov	r5, r1
 800828c:	d9f4      	bls.n	8008278 <_printf_i+0x110>
 800828e:	2b08      	cmp	r3, #8
 8008290:	d10b      	bne.n	80082aa <_printf_i+0x142>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	07df      	lsls	r7, r3, #31
 8008296:	d508      	bpl.n	80082aa <_printf_i+0x142>
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	6861      	ldr	r1, [r4, #4]
 800829c:	4299      	cmp	r1, r3
 800829e:	bfde      	ittt	le
 80082a0:	2330      	movle	r3, #48	@ 0x30
 80082a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082aa:	1b92      	subs	r2, r2, r6
 80082ac:	6122      	str	r2, [r4, #16]
 80082ae:	f8cd a000 	str.w	sl, [sp]
 80082b2:	464b      	mov	r3, r9
 80082b4:	aa03      	add	r2, sp, #12
 80082b6:	4621      	mov	r1, r4
 80082b8:	4640      	mov	r0, r8
 80082ba:	f7ff fee7 	bl	800808c <_printf_common>
 80082be:	3001      	adds	r0, #1
 80082c0:	d14a      	bne.n	8008358 <_printf_i+0x1f0>
 80082c2:	f04f 30ff 	mov.w	r0, #4294967295
 80082c6:	b004      	add	sp, #16
 80082c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	f043 0320 	orr.w	r3, r3, #32
 80082d2:	6023      	str	r3, [r4, #0]
 80082d4:	4832      	ldr	r0, [pc, #200]	@ (80083a0 <_printf_i+0x238>)
 80082d6:	2778      	movs	r7, #120	@ 0x78
 80082d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	6831      	ldr	r1, [r6, #0]
 80082e0:	061f      	lsls	r7, r3, #24
 80082e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80082e6:	d402      	bmi.n	80082ee <_printf_i+0x186>
 80082e8:	065f      	lsls	r7, r3, #25
 80082ea:	bf48      	it	mi
 80082ec:	b2ad      	uxthmi	r5, r5
 80082ee:	6031      	str	r1, [r6, #0]
 80082f0:	07d9      	lsls	r1, r3, #31
 80082f2:	bf44      	itt	mi
 80082f4:	f043 0320 	orrmi.w	r3, r3, #32
 80082f8:	6023      	strmi	r3, [r4, #0]
 80082fa:	b11d      	cbz	r5, 8008304 <_printf_i+0x19c>
 80082fc:	2310      	movs	r3, #16
 80082fe:	e7ad      	b.n	800825c <_printf_i+0xf4>
 8008300:	4826      	ldr	r0, [pc, #152]	@ (800839c <_printf_i+0x234>)
 8008302:	e7e9      	b.n	80082d8 <_printf_i+0x170>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	f023 0320 	bic.w	r3, r3, #32
 800830a:	6023      	str	r3, [r4, #0]
 800830c:	e7f6      	b.n	80082fc <_printf_i+0x194>
 800830e:	4616      	mov	r6, r2
 8008310:	e7bd      	b.n	800828e <_printf_i+0x126>
 8008312:	6833      	ldr	r3, [r6, #0]
 8008314:	6825      	ldr	r5, [r4, #0]
 8008316:	6961      	ldr	r1, [r4, #20]
 8008318:	1d18      	adds	r0, r3, #4
 800831a:	6030      	str	r0, [r6, #0]
 800831c:	062e      	lsls	r6, r5, #24
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	d501      	bpl.n	8008326 <_printf_i+0x1be>
 8008322:	6019      	str	r1, [r3, #0]
 8008324:	e002      	b.n	800832c <_printf_i+0x1c4>
 8008326:	0668      	lsls	r0, r5, #25
 8008328:	d5fb      	bpl.n	8008322 <_printf_i+0x1ba>
 800832a:	8019      	strh	r1, [r3, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	6123      	str	r3, [r4, #16]
 8008330:	4616      	mov	r6, r2
 8008332:	e7bc      	b.n	80082ae <_printf_i+0x146>
 8008334:	6833      	ldr	r3, [r6, #0]
 8008336:	1d1a      	adds	r2, r3, #4
 8008338:	6032      	str	r2, [r6, #0]
 800833a:	681e      	ldr	r6, [r3, #0]
 800833c:	6862      	ldr	r2, [r4, #4]
 800833e:	2100      	movs	r1, #0
 8008340:	4630      	mov	r0, r6
 8008342:	f7f7 ff45 	bl	80001d0 <memchr>
 8008346:	b108      	cbz	r0, 800834c <_printf_i+0x1e4>
 8008348:	1b80      	subs	r0, r0, r6
 800834a:	6060      	str	r0, [r4, #4]
 800834c:	6863      	ldr	r3, [r4, #4]
 800834e:	6123      	str	r3, [r4, #16]
 8008350:	2300      	movs	r3, #0
 8008352:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008356:	e7aa      	b.n	80082ae <_printf_i+0x146>
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	4632      	mov	r2, r6
 800835c:	4649      	mov	r1, r9
 800835e:	4640      	mov	r0, r8
 8008360:	47d0      	blx	sl
 8008362:	3001      	adds	r0, #1
 8008364:	d0ad      	beq.n	80082c2 <_printf_i+0x15a>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	079b      	lsls	r3, r3, #30
 800836a:	d413      	bmi.n	8008394 <_printf_i+0x22c>
 800836c:	68e0      	ldr	r0, [r4, #12]
 800836e:	9b03      	ldr	r3, [sp, #12]
 8008370:	4298      	cmp	r0, r3
 8008372:	bfb8      	it	lt
 8008374:	4618      	movlt	r0, r3
 8008376:	e7a6      	b.n	80082c6 <_printf_i+0x15e>
 8008378:	2301      	movs	r3, #1
 800837a:	4632      	mov	r2, r6
 800837c:	4649      	mov	r1, r9
 800837e:	4640      	mov	r0, r8
 8008380:	47d0      	blx	sl
 8008382:	3001      	adds	r0, #1
 8008384:	d09d      	beq.n	80082c2 <_printf_i+0x15a>
 8008386:	3501      	adds	r5, #1
 8008388:	68e3      	ldr	r3, [r4, #12]
 800838a:	9903      	ldr	r1, [sp, #12]
 800838c:	1a5b      	subs	r3, r3, r1
 800838e:	42ab      	cmp	r3, r5
 8008390:	dcf2      	bgt.n	8008378 <_printf_i+0x210>
 8008392:	e7eb      	b.n	800836c <_printf_i+0x204>
 8008394:	2500      	movs	r5, #0
 8008396:	f104 0619 	add.w	r6, r4, #25
 800839a:	e7f5      	b.n	8008388 <_printf_i+0x220>
 800839c:	0800a7a2 	.word	0x0800a7a2
 80083a0:	0800a7b3 	.word	0x0800a7b3

080083a4 <std>:
 80083a4:	2300      	movs	r3, #0
 80083a6:	b510      	push	{r4, lr}
 80083a8:	4604      	mov	r4, r0
 80083aa:	e9c0 3300 	strd	r3, r3, [r0]
 80083ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083b2:	6083      	str	r3, [r0, #8]
 80083b4:	8181      	strh	r1, [r0, #12]
 80083b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80083b8:	81c2      	strh	r2, [r0, #14]
 80083ba:	6183      	str	r3, [r0, #24]
 80083bc:	4619      	mov	r1, r3
 80083be:	2208      	movs	r2, #8
 80083c0:	305c      	adds	r0, #92	@ 0x5c
 80083c2:	f000 f9b0 	bl	8008726 <memset>
 80083c6:	4b0d      	ldr	r3, [pc, #52]	@ (80083fc <std+0x58>)
 80083c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80083ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008400 <std+0x5c>)
 80083cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008404 <std+0x60>)
 80083d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008408 <std+0x64>)
 80083d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80083d6:	4b0d      	ldr	r3, [pc, #52]	@ (800840c <std+0x68>)
 80083d8:	6224      	str	r4, [r4, #32]
 80083da:	429c      	cmp	r4, r3
 80083dc:	d006      	beq.n	80083ec <std+0x48>
 80083de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083e2:	4294      	cmp	r4, r2
 80083e4:	d002      	beq.n	80083ec <std+0x48>
 80083e6:	33d0      	adds	r3, #208	@ 0xd0
 80083e8:	429c      	cmp	r4, r3
 80083ea:	d105      	bne.n	80083f8 <std+0x54>
 80083ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f4:	f000 ba14 	b.w	8008820 <__retarget_lock_init_recursive>
 80083f8:	bd10      	pop	{r4, pc}
 80083fa:	bf00      	nop
 80083fc:	080086a1 	.word	0x080086a1
 8008400:	080086c3 	.word	0x080086c3
 8008404:	080086fb 	.word	0x080086fb
 8008408:	0800871f 	.word	0x0800871f
 800840c:	20000640 	.word	0x20000640

08008410 <stdio_exit_handler>:
 8008410:	4a02      	ldr	r2, [pc, #8]	@ (800841c <stdio_exit_handler+0xc>)
 8008412:	4903      	ldr	r1, [pc, #12]	@ (8008420 <stdio_exit_handler+0x10>)
 8008414:	4803      	ldr	r0, [pc, #12]	@ (8008424 <stdio_exit_handler+0x14>)
 8008416:	f000 b869 	b.w	80084ec <_fwalk_sglue>
 800841a:	bf00      	nop
 800841c:	2000000c 	.word	0x2000000c
 8008420:	08009ed5 	.word	0x08009ed5
 8008424:	2000001c 	.word	0x2000001c

08008428 <cleanup_stdio>:
 8008428:	6841      	ldr	r1, [r0, #4]
 800842a:	4b0c      	ldr	r3, [pc, #48]	@ (800845c <cleanup_stdio+0x34>)
 800842c:	4299      	cmp	r1, r3
 800842e:	b510      	push	{r4, lr}
 8008430:	4604      	mov	r4, r0
 8008432:	d001      	beq.n	8008438 <cleanup_stdio+0x10>
 8008434:	f001 fd4e 	bl	8009ed4 <_fflush_r>
 8008438:	68a1      	ldr	r1, [r4, #8]
 800843a:	4b09      	ldr	r3, [pc, #36]	@ (8008460 <cleanup_stdio+0x38>)
 800843c:	4299      	cmp	r1, r3
 800843e:	d002      	beq.n	8008446 <cleanup_stdio+0x1e>
 8008440:	4620      	mov	r0, r4
 8008442:	f001 fd47 	bl	8009ed4 <_fflush_r>
 8008446:	68e1      	ldr	r1, [r4, #12]
 8008448:	4b06      	ldr	r3, [pc, #24]	@ (8008464 <cleanup_stdio+0x3c>)
 800844a:	4299      	cmp	r1, r3
 800844c:	d004      	beq.n	8008458 <cleanup_stdio+0x30>
 800844e:	4620      	mov	r0, r4
 8008450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008454:	f001 bd3e 	b.w	8009ed4 <_fflush_r>
 8008458:	bd10      	pop	{r4, pc}
 800845a:	bf00      	nop
 800845c:	20000640 	.word	0x20000640
 8008460:	200006a8 	.word	0x200006a8
 8008464:	20000710 	.word	0x20000710

08008468 <global_stdio_init.part.0>:
 8008468:	b510      	push	{r4, lr}
 800846a:	4b0b      	ldr	r3, [pc, #44]	@ (8008498 <global_stdio_init.part.0+0x30>)
 800846c:	4c0b      	ldr	r4, [pc, #44]	@ (800849c <global_stdio_init.part.0+0x34>)
 800846e:	4a0c      	ldr	r2, [pc, #48]	@ (80084a0 <global_stdio_init.part.0+0x38>)
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	4620      	mov	r0, r4
 8008474:	2200      	movs	r2, #0
 8008476:	2104      	movs	r1, #4
 8008478:	f7ff ff94 	bl	80083a4 <std>
 800847c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008480:	2201      	movs	r2, #1
 8008482:	2109      	movs	r1, #9
 8008484:	f7ff ff8e 	bl	80083a4 <std>
 8008488:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800848c:	2202      	movs	r2, #2
 800848e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008492:	2112      	movs	r1, #18
 8008494:	f7ff bf86 	b.w	80083a4 <std>
 8008498:	20000778 	.word	0x20000778
 800849c:	20000640 	.word	0x20000640
 80084a0:	08008411 	.word	0x08008411

080084a4 <__sfp_lock_acquire>:
 80084a4:	4801      	ldr	r0, [pc, #4]	@ (80084ac <__sfp_lock_acquire+0x8>)
 80084a6:	f000 b9bc 	b.w	8008822 <__retarget_lock_acquire_recursive>
 80084aa:	bf00      	nop
 80084ac:	20000781 	.word	0x20000781

080084b0 <__sfp_lock_release>:
 80084b0:	4801      	ldr	r0, [pc, #4]	@ (80084b8 <__sfp_lock_release+0x8>)
 80084b2:	f000 b9b7 	b.w	8008824 <__retarget_lock_release_recursive>
 80084b6:	bf00      	nop
 80084b8:	20000781 	.word	0x20000781

080084bc <__sinit>:
 80084bc:	b510      	push	{r4, lr}
 80084be:	4604      	mov	r4, r0
 80084c0:	f7ff fff0 	bl	80084a4 <__sfp_lock_acquire>
 80084c4:	6a23      	ldr	r3, [r4, #32]
 80084c6:	b11b      	cbz	r3, 80084d0 <__sinit+0x14>
 80084c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084cc:	f7ff bff0 	b.w	80084b0 <__sfp_lock_release>
 80084d0:	4b04      	ldr	r3, [pc, #16]	@ (80084e4 <__sinit+0x28>)
 80084d2:	6223      	str	r3, [r4, #32]
 80084d4:	4b04      	ldr	r3, [pc, #16]	@ (80084e8 <__sinit+0x2c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f5      	bne.n	80084c8 <__sinit+0xc>
 80084dc:	f7ff ffc4 	bl	8008468 <global_stdio_init.part.0>
 80084e0:	e7f2      	b.n	80084c8 <__sinit+0xc>
 80084e2:	bf00      	nop
 80084e4:	08008429 	.word	0x08008429
 80084e8:	20000778 	.word	0x20000778

080084ec <_fwalk_sglue>:
 80084ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f0:	4607      	mov	r7, r0
 80084f2:	4688      	mov	r8, r1
 80084f4:	4614      	mov	r4, r2
 80084f6:	2600      	movs	r6, #0
 80084f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008500:	d505      	bpl.n	800850e <_fwalk_sglue+0x22>
 8008502:	6824      	ldr	r4, [r4, #0]
 8008504:	2c00      	cmp	r4, #0
 8008506:	d1f7      	bne.n	80084f8 <_fwalk_sglue+0xc>
 8008508:	4630      	mov	r0, r6
 800850a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800850e:	89ab      	ldrh	r3, [r5, #12]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d907      	bls.n	8008524 <_fwalk_sglue+0x38>
 8008514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008518:	3301      	adds	r3, #1
 800851a:	d003      	beq.n	8008524 <_fwalk_sglue+0x38>
 800851c:	4629      	mov	r1, r5
 800851e:	4638      	mov	r0, r7
 8008520:	47c0      	blx	r8
 8008522:	4306      	orrs	r6, r0
 8008524:	3568      	adds	r5, #104	@ 0x68
 8008526:	e7e9      	b.n	80084fc <_fwalk_sglue+0x10>

08008528 <setbuf>:
 8008528:	fab1 f281 	clz	r2, r1
 800852c:	0952      	lsrs	r2, r2, #5
 800852e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008532:	0052      	lsls	r2, r2, #1
 8008534:	f000 b800 	b.w	8008538 <setvbuf>

08008538 <setvbuf>:
 8008538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800853c:	461d      	mov	r5, r3
 800853e:	4b57      	ldr	r3, [pc, #348]	@ (800869c <setvbuf+0x164>)
 8008540:	681f      	ldr	r7, [r3, #0]
 8008542:	4604      	mov	r4, r0
 8008544:	460e      	mov	r6, r1
 8008546:	4690      	mov	r8, r2
 8008548:	b127      	cbz	r7, 8008554 <setvbuf+0x1c>
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	b913      	cbnz	r3, 8008554 <setvbuf+0x1c>
 800854e:	4638      	mov	r0, r7
 8008550:	f7ff ffb4 	bl	80084bc <__sinit>
 8008554:	f1b8 0f02 	cmp.w	r8, #2
 8008558:	d006      	beq.n	8008568 <setvbuf+0x30>
 800855a:	f1b8 0f01 	cmp.w	r8, #1
 800855e:	f200 809a 	bhi.w	8008696 <setvbuf+0x15e>
 8008562:	2d00      	cmp	r5, #0
 8008564:	f2c0 8097 	blt.w	8008696 <setvbuf+0x15e>
 8008568:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800856a:	07d9      	lsls	r1, r3, #31
 800856c:	d405      	bmi.n	800857a <setvbuf+0x42>
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	059a      	lsls	r2, r3, #22
 8008572:	d402      	bmi.n	800857a <setvbuf+0x42>
 8008574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008576:	f000 f954 	bl	8008822 <__retarget_lock_acquire_recursive>
 800857a:	4621      	mov	r1, r4
 800857c:	4638      	mov	r0, r7
 800857e:	f001 fca9 	bl	8009ed4 <_fflush_r>
 8008582:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008584:	b141      	cbz	r1, 8008598 <setvbuf+0x60>
 8008586:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800858a:	4299      	cmp	r1, r3
 800858c:	d002      	beq.n	8008594 <setvbuf+0x5c>
 800858e:	4638      	mov	r0, r7
 8008590:	f000 ffa2 	bl	80094d8 <_free_r>
 8008594:	2300      	movs	r3, #0
 8008596:	6363      	str	r3, [r4, #52]	@ 0x34
 8008598:	2300      	movs	r3, #0
 800859a:	61a3      	str	r3, [r4, #24]
 800859c:	6063      	str	r3, [r4, #4]
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	061b      	lsls	r3, r3, #24
 80085a2:	d503      	bpl.n	80085ac <setvbuf+0x74>
 80085a4:	6921      	ldr	r1, [r4, #16]
 80085a6:	4638      	mov	r0, r7
 80085a8:	f000 ff96 	bl	80094d8 <_free_r>
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80085b2:	f023 0303 	bic.w	r3, r3, #3
 80085b6:	f1b8 0f02 	cmp.w	r8, #2
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	d061      	beq.n	8008682 <setvbuf+0x14a>
 80085be:	ab01      	add	r3, sp, #4
 80085c0:	466a      	mov	r2, sp
 80085c2:	4621      	mov	r1, r4
 80085c4:	4638      	mov	r0, r7
 80085c6:	f001 fcad 	bl	8009f24 <__swhatbuf_r>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	4318      	orrs	r0, r3
 80085ce:	81a0      	strh	r0, [r4, #12]
 80085d0:	bb2d      	cbnz	r5, 800861e <setvbuf+0xe6>
 80085d2:	9d00      	ldr	r5, [sp, #0]
 80085d4:	4628      	mov	r0, r5
 80085d6:	f000 ffc9 	bl	800956c <malloc>
 80085da:	4606      	mov	r6, r0
 80085dc:	2800      	cmp	r0, #0
 80085de:	d152      	bne.n	8008686 <setvbuf+0x14e>
 80085e0:	f8dd 9000 	ldr.w	r9, [sp]
 80085e4:	45a9      	cmp	r9, r5
 80085e6:	d140      	bne.n	800866a <setvbuf+0x132>
 80085e8:	f04f 35ff 	mov.w	r5, #4294967295
 80085ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f0:	f043 0202 	orr.w	r2, r3, #2
 80085f4:	81a2      	strh	r2, [r4, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	60a2      	str	r2, [r4, #8]
 80085fa:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80085fe:	6022      	str	r2, [r4, #0]
 8008600:	6122      	str	r2, [r4, #16]
 8008602:	2201      	movs	r2, #1
 8008604:	6162      	str	r2, [r4, #20]
 8008606:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008608:	07d6      	lsls	r6, r2, #31
 800860a:	d404      	bmi.n	8008616 <setvbuf+0xde>
 800860c:	0598      	lsls	r0, r3, #22
 800860e:	d402      	bmi.n	8008616 <setvbuf+0xde>
 8008610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008612:	f000 f907 	bl	8008824 <__retarget_lock_release_recursive>
 8008616:	4628      	mov	r0, r5
 8008618:	b003      	add	sp, #12
 800861a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800861e:	2e00      	cmp	r6, #0
 8008620:	d0d8      	beq.n	80085d4 <setvbuf+0x9c>
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	b913      	cbnz	r3, 800862c <setvbuf+0xf4>
 8008626:	4638      	mov	r0, r7
 8008628:	f7ff ff48 	bl	80084bc <__sinit>
 800862c:	f1b8 0f01 	cmp.w	r8, #1
 8008630:	bf08      	it	eq
 8008632:	89a3      	ldrheq	r3, [r4, #12]
 8008634:	6026      	str	r6, [r4, #0]
 8008636:	bf04      	itt	eq
 8008638:	f043 0301 	orreq.w	r3, r3, #1
 800863c:	81a3      	strheq	r3, [r4, #12]
 800863e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008642:	f013 0208 	ands.w	r2, r3, #8
 8008646:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800864a:	d01e      	beq.n	800868a <setvbuf+0x152>
 800864c:	07d9      	lsls	r1, r3, #31
 800864e:	bf41      	itttt	mi
 8008650:	2200      	movmi	r2, #0
 8008652:	426d      	negmi	r5, r5
 8008654:	60a2      	strmi	r2, [r4, #8]
 8008656:	61a5      	strmi	r5, [r4, #24]
 8008658:	bf58      	it	pl
 800865a:	60a5      	strpl	r5, [r4, #8]
 800865c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800865e:	07d2      	lsls	r2, r2, #31
 8008660:	d401      	bmi.n	8008666 <setvbuf+0x12e>
 8008662:	059b      	lsls	r3, r3, #22
 8008664:	d513      	bpl.n	800868e <setvbuf+0x156>
 8008666:	2500      	movs	r5, #0
 8008668:	e7d5      	b.n	8008616 <setvbuf+0xde>
 800866a:	4648      	mov	r0, r9
 800866c:	f000 ff7e 	bl	800956c <malloc>
 8008670:	4606      	mov	r6, r0
 8008672:	2800      	cmp	r0, #0
 8008674:	d0b8      	beq.n	80085e8 <setvbuf+0xb0>
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800867c:	81a3      	strh	r3, [r4, #12]
 800867e:	464d      	mov	r5, r9
 8008680:	e7cf      	b.n	8008622 <setvbuf+0xea>
 8008682:	2500      	movs	r5, #0
 8008684:	e7b2      	b.n	80085ec <setvbuf+0xb4>
 8008686:	46a9      	mov	r9, r5
 8008688:	e7f5      	b.n	8008676 <setvbuf+0x13e>
 800868a:	60a2      	str	r2, [r4, #8]
 800868c:	e7e6      	b.n	800865c <setvbuf+0x124>
 800868e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008690:	f000 f8c8 	bl	8008824 <__retarget_lock_release_recursive>
 8008694:	e7e7      	b.n	8008666 <setvbuf+0x12e>
 8008696:	f04f 35ff 	mov.w	r5, #4294967295
 800869a:	e7bc      	b.n	8008616 <setvbuf+0xde>
 800869c:	20000018 	.word	0x20000018

080086a0 <__sread>:
 80086a0:	b510      	push	{r4, lr}
 80086a2:	460c      	mov	r4, r1
 80086a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a8:	f000 f86c 	bl	8008784 <_read_r>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	bfab      	itete	ge
 80086b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086b2:	89a3      	ldrhlt	r3, [r4, #12]
 80086b4:	181b      	addge	r3, r3, r0
 80086b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086ba:	bfac      	ite	ge
 80086bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086be:	81a3      	strhlt	r3, [r4, #12]
 80086c0:	bd10      	pop	{r4, pc}

080086c2 <__swrite>:
 80086c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c6:	461f      	mov	r7, r3
 80086c8:	898b      	ldrh	r3, [r1, #12]
 80086ca:	05db      	lsls	r3, r3, #23
 80086cc:	4605      	mov	r5, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	4616      	mov	r6, r2
 80086d2:	d505      	bpl.n	80086e0 <__swrite+0x1e>
 80086d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d8:	2302      	movs	r3, #2
 80086da:	2200      	movs	r2, #0
 80086dc:	f000 f840 	bl	8008760 <_lseek_r>
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086ea:	81a3      	strh	r3, [r4, #12]
 80086ec:	4632      	mov	r2, r6
 80086ee:	463b      	mov	r3, r7
 80086f0:	4628      	mov	r0, r5
 80086f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f6:	f000 b857 	b.w	80087a8 <_write_r>

080086fa <__sseek>:
 80086fa:	b510      	push	{r4, lr}
 80086fc:	460c      	mov	r4, r1
 80086fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008702:	f000 f82d 	bl	8008760 <_lseek_r>
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	bf15      	itete	ne
 800870c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800870e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008712:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008716:	81a3      	strheq	r3, [r4, #12]
 8008718:	bf18      	it	ne
 800871a:	81a3      	strhne	r3, [r4, #12]
 800871c:	bd10      	pop	{r4, pc}

0800871e <__sclose>:
 800871e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008722:	f000 b80d 	b.w	8008740 <_close_r>

08008726 <memset>:
 8008726:	4402      	add	r2, r0
 8008728:	4603      	mov	r3, r0
 800872a:	4293      	cmp	r3, r2
 800872c:	d100      	bne.n	8008730 <memset+0xa>
 800872e:	4770      	bx	lr
 8008730:	f803 1b01 	strb.w	r1, [r3], #1
 8008734:	e7f9      	b.n	800872a <memset+0x4>
	...

08008738 <_localeconv_r>:
 8008738:	4800      	ldr	r0, [pc, #0]	@ (800873c <_localeconv_r+0x4>)
 800873a:	4770      	bx	lr
 800873c:	20000158 	.word	0x20000158

08008740 <_close_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d06      	ldr	r5, [pc, #24]	@ (800875c <_close_r+0x1c>)
 8008744:	2300      	movs	r3, #0
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	602b      	str	r3, [r5, #0]
 800874c:	f7f9 fe14 	bl	8002378 <_close>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_close_r+0x1a>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_close_r+0x1a>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	2000077c 	.word	0x2000077c

08008760 <_lseek_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4d07      	ldr	r5, [pc, #28]	@ (8008780 <_lseek_r+0x20>)
 8008764:	4604      	mov	r4, r0
 8008766:	4608      	mov	r0, r1
 8008768:	4611      	mov	r1, r2
 800876a:	2200      	movs	r2, #0
 800876c:	602a      	str	r2, [r5, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	f7f9 fe29 	bl	80023c6 <_lseek>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d102      	bne.n	800877e <_lseek_r+0x1e>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	b103      	cbz	r3, 800877e <_lseek_r+0x1e>
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	2000077c 	.word	0x2000077c

08008784 <_read_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d07      	ldr	r5, [pc, #28]	@ (80087a4 <_read_r+0x20>)
 8008788:	4604      	mov	r4, r0
 800878a:	4608      	mov	r0, r1
 800878c:	4611      	mov	r1, r2
 800878e:	2200      	movs	r2, #0
 8008790:	602a      	str	r2, [r5, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	f7f9 fdd3 	bl	800233e <_read>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_read_r+0x1e>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_read_r+0x1e>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	2000077c 	.word	0x2000077c

080087a8 <_write_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d07      	ldr	r5, [pc, #28]	@ (80087c8 <_write_r+0x20>)
 80087ac:	4604      	mov	r4, r0
 80087ae:	4608      	mov	r0, r1
 80087b0:	4611      	mov	r1, r2
 80087b2:	2200      	movs	r2, #0
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f7f8 fc5e 	bl	8001078 <_write>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_write_r+0x1e>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_write_r+0x1e>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	2000077c 	.word	0x2000077c

080087cc <__errno>:
 80087cc:	4b01      	ldr	r3, [pc, #4]	@ (80087d4 <__errno+0x8>)
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	20000018 	.word	0x20000018

080087d8 <__libc_init_array>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	4d0d      	ldr	r5, [pc, #52]	@ (8008810 <__libc_init_array+0x38>)
 80087dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008814 <__libc_init_array+0x3c>)
 80087de:	1b64      	subs	r4, r4, r5
 80087e0:	10a4      	asrs	r4, r4, #2
 80087e2:	2600      	movs	r6, #0
 80087e4:	42a6      	cmp	r6, r4
 80087e6:	d109      	bne.n	80087fc <__libc_init_array+0x24>
 80087e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008818 <__libc_init_array+0x40>)
 80087ea:	4c0c      	ldr	r4, [pc, #48]	@ (800881c <__libc_init_array+0x44>)
 80087ec:	f001 fec0 	bl	800a570 <_init>
 80087f0:	1b64      	subs	r4, r4, r5
 80087f2:	10a4      	asrs	r4, r4, #2
 80087f4:	2600      	movs	r6, #0
 80087f6:	42a6      	cmp	r6, r4
 80087f8:	d105      	bne.n	8008806 <__libc_init_array+0x2e>
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008800:	4798      	blx	r3
 8008802:	3601      	adds	r6, #1
 8008804:	e7ee      	b.n	80087e4 <__libc_init_array+0xc>
 8008806:	f855 3b04 	ldr.w	r3, [r5], #4
 800880a:	4798      	blx	r3
 800880c:	3601      	adds	r6, #1
 800880e:	e7f2      	b.n	80087f6 <__libc_init_array+0x1e>
 8008810:	0800ab0c 	.word	0x0800ab0c
 8008814:	0800ab0c 	.word	0x0800ab0c
 8008818:	0800ab0c 	.word	0x0800ab0c
 800881c:	0800ab10 	.word	0x0800ab10

08008820 <__retarget_lock_init_recursive>:
 8008820:	4770      	bx	lr

08008822 <__retarget_lock_acquire_recursive>:
 8008822:	4770      	bx	lr

08008824 <__retarget_lock_release_recursive>:
 8008824:	4770      	bx	lr

08008826 <quorem>:
 8008826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882a:	6903      	ldr	r3, [r0, #16]
 800882c:	690c      	ldr	r4, [r1, #16]
 800882e:	42a3      	cmp	r3, r4
 8008830:	4607      	mov	r7, r0
 8008832:	db7e      	blt.n	8008932 <quorem+0x10c>
 8008834:	3c01      	subs	r4, #1
 8008836:	f101 0814 	add.w	r8, r1, #20
 800883a:	00a3      	lsls	r3, r4, #2
 800883c:	f100 0514 	add.w	r5, r0, #20
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800884c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008850:	3301      	adds	r3, #1
 8008852:	429a      	cmp	r2, r3
 8008854:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008858:	fbb2 f6f3 	udiv	r6, r2, r3
 800885c:	d32e      	bcc.n	80088bc <quorem+0x96>
 800885e:	f04f 0a00 	mov.w	sl, #0
 8008862:	46c4      	mov	ip, r8
 8008864:	46ae      	mov	lr, r5
 8008866:	46d3      	mov	fp, sl
 8008868:	f85c 3b04 	ldr.w	r3, [ip], #4
 800886c:	b298      	uxth	r0, r3
 800886e:	fb06 a000 	mla	r0, r6, r0, sl
 8008872:	0c02      	lsrs	r2, r0, #16
 8008874:	0c1b      	lsrs	r3, r3, #16
 8008876:	fb06 2303 	mla	r3, r6, r3, r2
 800887a:	f8de 2000 	ldr.w	r2, [lr]
 800887e:	b280      	uxth	r0, r0
 8008880:	b292      	uxth	r2, r2
 8008882:	1a12      	subs	r2, r2, r0
 8008884:	445a      	add	r2, fp
 8008886:	f8de 0000 	ldr.w	r0, [lr]
 800888a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800888e:	b29b      	uxth	r3, r3
 8008890:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008894:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008898:	b292      	uxth	r2, r2
 800889a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800889e:	45e1      	cmp	r9, ip
 80088a0:	f84e 2b04 	str.w	r2, [lr], #4
 80088a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80088a8:	d2de      	bcs.n	8008868 <quorem+0x42>
 80088aa:	9b00      	ldr	r3, [sp, #0]
 80088ac:	58eb      	ldr	r3, [r5, r3]
 80088ae:	b92b      	cbnz	r3, 80088bc <quorem+0x96>
 80088b0:	9b01      	ldr	r3, [sp, #4]
 80088b2:	3b04      	subs	r3, #4
 80088b4:	429d      	cmp	r5, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	d32f      	bcc.n	800891a <quorem+0xf4>
 80088ba:	613c      	str	r4, [r7, #16]
 80088bc:	4638      	mov	r0, r7
 80088be:	f001 f97d 	bl	8009bbc <__mcmp>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	db25      	blt.n	8008912 <quorem+0xec>
 80088c6:	4629      	mov	r1, r5
 80088c8:	2000      	movs	r0, #0
 80088ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80088ce:	f8d1 c000 	ldr.w	ip, [r1]
 80088d2:	fa1f fe82 	uxth.w	lr, r2
 80088d6:	fa1f f38c 	uxth.w	r3, ip
 80088da:	eba3 030e 	sub.w	r3, r3, lr
 80088de:	4403      	add	r3, r0
 80088e0:	0c12      	lsrs	r2, r2, #16
 80088e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80088e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088f0:	45c1      	cmp	r9, r8
 80088f2:	f841 3b04 	str.w	r3, [r1], #4
 80088f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80088fa:	d2e6      	bcs.n	80088ca <quorem+0xa4>
 80088fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008904:	b922      	cbnz	r2, 8008910 <quorem+0xea>
 8008906:	3b04      	subs	r3, #4
 8008908:	429d      	cmp	r5, r3
 800890a:	461a      	mov	r2, r3
 800890c:	d30b      	bcc.n	8008926 <quorem+0x100>
 800890e:	613c      	str	r4, [r7, #16]
 8008910:	3601      	adds	r6, #1
 8008912:	4630      	mov	r0, r6
 8008914:	b003      	add	sp, #12
 8008916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891a:	6812      	ldr	r2, [r2, #0]
 800891c:	3b04      	subs	r3, #4
 800891e:	2a00      	cmp	r2, #0
 8008920:	d1cb      	bne.n	80088ba <quorem+0x94>
 8008922:	3c01      	subs	r4, #1
 8008924:	e7c6      	b.n	80088b4 <quorem+0x8e>
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	3b04      	subs	r3, #4
 800892a:	2a00      	cmp	r2, #0
 800892c:	d1ef      	bne.n	800890e <quorem+0xe8>
 800892e:	3c01      	subs	r4, #1
 8008930:	e7ea      	b.n	8008908 <quorem+0xe2>
 8008932:	2000      	movs	r0, #0
 8008934:	e7ee      	b.n	8008914 <quorem+0xee>
	...

08008938 <_dtoa_r>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	69c7      	ldr	r7, [r0, #28]
 800893e:	b097      	sub	sp, #92	@ 0x5c
 8008940:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008944:	ec55 4b10 	vmov	r4, r5, d0
 8008948:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800894a:	9107      	str	r1, [sp, #28]
 800894c:	4681      	mov	r9, r0
 800894e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008950:	9311      	str	r3, [sp, #68]	@ 0x44
 8008952:	b97f      	cbnz	r7, 8008974 <_dtoa_r+0x3c>
 8008954:	2010      	movs	r0, #16
 8008956:	f000 fe09 	bl	800956c <malloc>
 800895a:	4602      	mov	r2, r0
 800895c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008960:	b920      	cbnz	r0, 800896c <_dtoa_r+0x34>
 8008962:	4ba9      	ldr	r3, [pc, #676]	@ (8008c08 <_dtoa_r+0x2d0>)
 8008964:	21ef      	movs	r1, #239	@ 0xef
 8008966:	48a9      	ldr	r0, [pc, #676]	@ (8008c0c <_dtoa_r+0x2d4>)
 8008968:	f001 fb7e 	bl	800a068 <__assert_func>
 800896c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008970:	6007      	str	r7, [r0, #0]
 8008972:	60c7      	str	r7, [r0, #12]
 8008974:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008978:	6819      	ldr	r1, [r3, #0]
 800897a:	b159      	cbz	r1, 8008994 <_dtoa_r+0x5c>
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	604a      	str	r2, [r1, #4]
 8008980:	2301      	movs	r3, #1
 8008982:	4093      	lsls	r3, r2
 8008984:	608b      	str	r3, [r1, #8]
 8008986:	4648      	mov	r0, r9
 8008988:	f000 fee6 	bl	8009758 <_Bfree>
 800898c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008990:	2200      	movs	r2, #0
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	1e2b      	subs	r3, r5, #0
 8008996:	bfb9      	ittee	lt
 8008998:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800899c:	9305      	strlt	r3, [sp, #20]
 800899e:	2300      	movge	r3, #0
 80089a0:	6033      	strge	r3, [r6, #0]
 80089a2:	9f05      	ldr	r7, [sp, #20]
 80089a4:	4b9a      	ldr	r3, [pc, #616]	@ (8008c10 <_dtoa_r+0x2d8>)
 80089a6:	bfbc      	itt	lt
 80089a8:	2201      	movlt	r2, #1
 80089aa:	6032      	strlt	r2, [r6, #0]
 80089ac:	43bb      	bics	r3, r7
 80089ae:	d112      	bne.n	80089d6 <_dtoa_r+0x9e>
 80089b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80089b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80089bc:	4323      	orrs	r3, r4
 80089be:	f000 855a 	beq.w	8009476 <_dtoa_r+0xb3e>
 80089c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008c24 <_dtoa_r+0x2ec>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 855c 	beq.w	8009486 <_dtoa_r+0xb4e>
 80089ce:	f10a 0303 	add.w	r3, sl, #3
 80089d2:	f000 bd56 	b.w	8009482 <_dtoa_r+0xb4a>
 80089d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80089da:	2200      	movs	r2, #0
 80089dc:	ec51 0b17 	vmov	r0, r1, d7
 80089e0:	2300      	movs	r3, #0
 80089e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80089e6:	f7f8 f86f 	bl	8000ac8 <__aeabi_dcmpeq>
 80089ea:	4680      	mov	r8, r0
 80089ec:	b158      	cbz	r0, 8008a06 <_dtoa_r+0xce>
 80089ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80089f0:	2301      	movs	r3, #1
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089f6:	b113      	cbz	r3, 80089fe <_dtoa_r+0xc6>
 80089f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80089fa:	4b86      	ldr	r3, [pc, #536]	@ (8008c14 <_dtoa_r+0x2dc>)
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008c28 <_dtoa_r+0x2f0>
 8008a02:	f000 bd40 	b.w	8009486 <_dtoa_r+0xb4e>
 8008a06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008a0a:	aa14      	add	r2, sp, #80	@ 0x50
 8008a0c:	a915      	add	r1, sp, #84	@ 0x54
 8008a0e:	4648      	mov	r0, r9
 8008a10:	f001 f984 	bl	8009d1c <__d2b>
 8008a14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008a18:	9002      	str	r0, [sp, #8]
 8008a1a:	2e00      	cmp	r6, #0
 8008a1c:	d078      	beq.n	8008b10 <_dtoa_r+0x1d8>
 8008a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008a30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008a34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a38:	4619      	mov	r1, r3
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	4b76      	ldr	r3, [pc, #472]	@ (8008c18 <_dtoa_r+0x2e0>)
 8008a3e:	f7f7 fc23 	bl	8000288 <__aeabi_dsub>
 8008a42:	a36b      	add	r3, pc, #428	@ (adr r3, 8008bf0 <_dtoa_r+0x2b8>)
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	f7f7 fdd6 	bl	80005f8 <__aeabi_dmul>
 8008a4c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008bf8 <_dtoa_r+0x2c0>)
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	f7f7 fc1b 	bl	800028c <__adddf3>
 8008a56:	4604      	mov	r4, r0
 8008a58:	4630      	mov	r0, r6
 8008a5a:	460d      	mov	r5, r1
 8008a5c:	f7f7 fd62 	bl	8000524 <__aeabi_i2d>
 8008a60:	a367      	add	r3, pc, #412	@ (adr r3, 8008c00 <_dtoa_r+0x2c8>)
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	f7f7 fdc7 	bl	80005f8 <__aeabi_dmul>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	4620      	mov	r0, r4
 8008a70:	4629      	mov	r1, r5
 8008a72:	f7f7 fc0b 	bl	800028c <__adddf3>
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	f7f8 f86d 	bl	8000b58 <__aeabi_d2iz>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4607      	mov	r7, r0
 8008a82:	2300      	movs	r3, #0
 8008a84:	4620      	mov	r0, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	f7f8 f828 	bl	8000adc <__aeabi_dcmplt>
 8008a8c:	b140      	cbz	r0, 8008aa0 <_dtoa_r+0x168>
 8008a8e:	4638      	mov	r0, r7
 8008a90:	f7f7 fd48 	bl	8000524 <__aeabi_i2d>
 8008a94:	4622      	mov	r2, r4
 8008a96:	462b      	mov	r3, r5
 8008a98:	f7f8 f816 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a9c:	b900      	cbnz	r0, 8008aa0 <_dtoa_r+0x168>
 8008a9e:	3f01      	subs	r7, #1
 8008aa0:	2f16      	cmp	r7, #22
 8008aa2:	d852      	bhi.n	8008b4a <_dtoa_r+0x212>
 8008aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8008c1c <_dtoa_r+0x2e4>)
 8008aa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ab2:	f7f8 f813 	bl	8000adc <__aeabi_dcmplt>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d049      	beq.n	8008b4e <_dtoa_r+0x216>
 8008aba:	3f01      	subs	r7, #1
 8008abc:	2300      	movs	r3, #0
 8008abe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ac0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ac2:	1b9b      	subs	r3, r3, r6
 8008ac4:	1e5a      	subs	r2, r3, #1
 8008ac6:	bf45      	ittet	mi
 8008ac8:	f1c3 0301 	rsbmi	r3, r3, #1
 8008acc:	9300      	strmi	r3, [sp, #0]
 8008ace:	2300      	movpl	r3, #0
 8008ad0:	2300      	movmi	r3, #0
 8008ad2:	9206      	str	r2, [sp, #24]
 8008ad4:	bf54      	ite	pl
 8008ad6:	9300      	strpl	r3, [sp, #0]
 8008ad8:	9306      	strmi	r3, [sp, #24]
 8008ada:	2f00      	cmp	r7, #0
 8008adc:	db39      	blt.n	8008b52 <_dtoa_r+0x21a>
 8008ade:	9b06      	ldr	r3, [sp, #24]
 8008ae0:	970d      	str	r7, [sp, #52]	@ 0x34
 8008ae2:	443b      	add	r3, r7
 8008ae4:	9306      	str	r3, [sp, #24]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	9308      	str	r3, [sp, #32]
 8008aea:	9b07      	ldr	r3, [sp, #28]
 8008aec:	2b09      	cmp	r3, #9
 8008aee:	d863      	bhi.n	8008bb8 <_dtoa_r+0x280>
 8008af0:	2b05      	cmp	r3, #5
 8008af2:	bfc4      	itt	gt
 8008af4:	3b04      	subgt	r3, #4
 8008af6:	9307      	strgt	r3, [sp, #28]
 8008af8:	9b07      	ldr	r3, [sp, #28]
 8008afa:	f1a3 0302 	sub.w	r3, r3, #2
 8008afe:	bfcc      	ite	gt
 8008b00:	2400      	movgt	r4, #0
 8008b02:	2401      	movle	r4, #1
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d863      	bhi.n	8008bd0 <_dtoa_r+0x298>
 8008b08:	e8df f003 	tbb	[pc, r3]
 8008b0c:	2b375452 	.word	0x2b375452
 8008b10:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008b14:	441e      	add	r6, r3
 8008b16:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b1a:	2b20      	cmp	r3, #32
 8008b1c:	bfc1      	itttt	gt
 8008b1e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b22:	409f      	lslgt	r7, r3
 8008b24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b28:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008b2c:	bfd6      	itet	le
 8008b2e:	f1c3 0320 	rsble	r3, r3, #32
 8008b32:	ea47 0003 	orrgt.w	r0, r7, r3
 8008b36:	fa04 f003 	lslle.w	r0, r4, r3
 8008b3a:	f7f7 fce3 	bl	8000504 <__aeabi_ui2d>
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b44:	3e01      	subs	r6, #1
 8008b46:	9212      	str	r2, [sp, #72]	@ 0x48
 8008b48:	e776      	b.n	8008a38 <_dtoa_r+0x100>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e7b7      	b.n	8008abe <_dtoa_r+0x186>
 8008b4e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008b50:	e7b6      	b.n	8008ac0 <_dtoa_r+0x188>
 8008b52:	9b00      	ldr	r3, [sp, #0]
 8008b54:	1bdb      	subs	r3, r3, r7
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	427b      	negs	r3, r7
 8008b5a:	9308      	str	r3, [sp, #32]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008b60:	e7c3      	b.n	8008aea <_dtoa_r+0x1b2>
 8008b62:	2301      	movs	r3, #1
 8008b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b68:	eb07 0b03 	add.w	fp, r7, r3
 8008b6c:	f10b 0301 	add.w	r3, fp, #1
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	9303      	str	r3, [sp, #12]
 8008b74:	bfb8      	it	lt
 8008b76:	2301      	movlt	r3, #1
 8008b78:	e006      	b.n	8008b88 <_dtoa_r+0x250>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	dd28      	ble.n	8008bd6 <_dtoa_r+0x29e>
 8008b84:	469b      	mov	fp, r3
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	2204      	movs	r2, #4
 8008b90:	f102 0514 	add.w	r5, r2, #20
 8008b94:	429d      	cmp	r5, r3
 8008b96:	d926      	bls.n	8008be6 <_dtoa_r+0x2ae>
 8008b98:	6041      	str	r1, [r0, #4]
 8008b9a:	4648      	mov	r0, r9
 8008b9c:	f000 fd9c 	bl	80096d8 <_Balloc>
 8008ba0:	4682      	mov	sl, r0
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d142      	bne.n	8008c2c <_dtoa_r+0x2f4>
 8008ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8008c20 <_dtoa_r+0x2e8>)
 8008ba8:	4602      	mov	r2, r0
 8008baa:	f240 11af 	movw	r1, #431	@ 0x1af
 8008bae:	e6da      	b.n	8008966 <_dtoa_r+0x2e>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	e7e3      	b.n	8008b7c <_dtoa_r+0x244>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	e7d5      	b.n	8008b64 <_dtoa_r+0x22c>
 8008bb8:	2401      	movs	r4, #1
 8008bba:	2300      	movs	r3, #0
 8008bbc:	9307      	str	r3, [sp, #28]
 8008bbe:	9409      	str	r4, [sp, #36]	@ 0x24
 8008bc0:	f04f 3bff 	mov.w	fp, #4294967295
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f8cd b00c 	str.w	fp, [sp, #12]
 8008bca:	2312      	movs	r3, #18
 8008bcc:	920c      	str	r2, [sp, #48]	@ 0x30
 8008bce:	e7db      	b.n	8008b88 <_dtoa_r+0x250>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bd4:	e7f4      	b.n	8008bc0 <_dtoa_r+0x288>
 8008bd6:	f04f 0b01 	mov.w	fp, #1
 8008bda:	f8cd b00c 	str.w	fp, [sp, #12]
 8008bde:	465b      	mov	r3, fp
 8008be0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008be4:	e7d0      	b.n	8008b88 <_dtoa_r+0x250>
 8008be6:	3101      	adds	r1, #1
 8008be8:	0052      	lsls	r2, r2, #1
 8008bea:	e7d1      	b.n	8008b90 <_dtoa_r+0x258>
 8008bec:	f3af 8000 	nop.w
 8008bf0:	636f4361 	.word	0x636f4361
 8008bf4:	3fd287a7 	.word	0x3fd287a7
 8008bf8:	8b60c8b3 	.word	0x8b60c8b3
 8008bfc:	3fc68a28 	.word	0x3fc68a28
 8008c00:	509f79fb 	.word	0x509f79fb
 8008c04:	3fd34413 	.word	0x3fd34413
 8008c08:	0800a7d1 	.word	0x0800a7d1
 8008c0c:	0800a7e8 	.word	0x0800a7e8
 8008c10:	7ff00000 	.word	0x7ff00000
 8008c14:	0800a7a1 	.word	0x0800a7a1
 8008c18:	3ff80000 	.word	0x3ff80000
 8008c1c:	0800a938 	.word	0x0800a938
 8008c20:	0800a840 	.word	0x0800a840
 8008c24:	0800a7cd 	.word	0x0800a7cd
 8008c28:	0800a7a0 	.word	0x0800a7a0
 8008c2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c30:	6018      	str	r0, [r3, #0]
 8008c32:	9b03      	ldr	r3, [sp, #12]
 8008c34:	2b0e      	cmp	r3, #14
 8008c36:	f200 80a1 	bhi.w	8008d7c <_dtoa_r+0x444>
 8008c3a:	2c00      	cmp	r4, #0
 8008c3c:	f000 809e 	beq.w	8008d7c <_dtoa_r+0x444>
 8008c40:	2f00      	cmp	r7, #0
 8008c42:	dd33      	ble.n	8008cac <_dtoa_r+0x374>
 8008c44:	4b9c      	ldr	r3, [pc, #624]	@ (8008eb8 <_dtoa_r+0x580>)
 8008c46:	f007 020f 	and.w	r2, r7, #15
 8008c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c4e:	ed93 7b00 	vldr	d7, [r3]
 8008c52:	05f8      	lsls	r0, r7, #23
 8008c54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008c58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c5c:	d516      	bpl.n	8008c8c <_dtoa_r+0x354>
 8008c5e:	4b97      	ldr	r3, [pc, #604]	@ (8008ebc <_dtoa_r+0x584>)
 8008c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c68:	f7f7 fdf0 	bl	800084c <__aeabi_ddiv>
 8008c6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c70:	f004 040f 	and.w	r4, r4, #15
 8008c74:	2603      	movs	r6, #3
 8008c76:	4d91      	ldr	r5, [pc, #580]	@ (8008ebc <_dtoa_r+0x584>)
 8008c78:	b954      	cbnz	r4, 8008c90 <_dtoa_r+0x358>
 8008c7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c82:	f7f7 fde3 	bl	800084c <__aeabi_ddiv>
 8008c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c8a:	e028      	b.n	8008cde <_dtoa_r+0x3a6>
 8008c8c:	2602      	movs	r6, #2
 8008c8e:	e7f2      	b.n	8008c76 <_dtoa_r+0x33e>
 8008c90:	07e1      	lsls	r1, r4, #31
 8008c92:	d508      	bpl.n	8008ca6 <_dtoa_r+0x36e>
 8008c94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008c98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c9c:	f7f7 fcac 	bl	80005f8 <__aeabi_dmul>
 8008ca0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ca4:	3601      	adds	r6, #1
 8008ca6:	1064      	asrs	r4, r4, #1
 8008ca8:	3508      	adds	r5, #8
 8008caa:	e7e5      	b.n	8008c78 <_dtoa_r+0x340>
 8008cac:	f000 80af 	beq.w	8008e0e <_dtoa_r+0x4d6>
 8008cb0:	427c      	negs	r4, r7
 8008cb2:	4b81      	ldr	r3, [pc, #516]	@ (8008eb8 <_dtoa_r+0x580>)
 8008cb4:	4d81      	ldr	r5, [pc, #516]	@ (8008ebc <_dtoa_r+0x584>)
 8008cb6:	f004 020f 	and.w	r2, r4, #15
 8008cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cc6:	f7f7 fc97 	bl	80005f8 <__aeabi_dmul>
 8008cca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cce:	1124      	asrs	r4, r4, #4
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	2602      	movs	r6, #2
 8008cd4:	2c00      	cmp	r4, #0
 8008cd6:	f040 808f 	bne.w	8008df8 <_dtoa_r+0x4c0>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1d3      	bne.n	8008c86 <_dtoa_r+0x34e>
 8008cde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ce0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 8094 	beq.w	8008e12 <_dtoa_r+0x4da>
 8008cea:	4b75      	ldr	r3, [pc, #468]	@ (8008ec0 <_dtoa_r+0x588>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	f7f7 fef3 	bl	8000adc <__aeabi_dcmplt>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	f000 808b 	beq.w	8008e12 <_dtoa_r+0x4da>
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 8087 	beq.w	8008e12 <_dtoa_r+0x4da>
 8008d04:	f1bb 0f00 	cmp.w	fp, #0
 8008d08:	dd34      	ble.n	8008d74 <_dtoa_r+0x43c>
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	4b6d      	ldr	r3, [pc, #436]	@ (8008ec4 <_dtoa_r+0x58c>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	4629      	mov	r1, r5
 8008d12:	f7f7 fc71 	bl	80005f8 <__aeabi_dmul>
 8008d16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d1a:	f107 38ff 	add.w	r8, r7, #4294967295
 8008d1e:	3601      	adds	r6, #1
 8008d20:	465c      	mov	r4, fp
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7f7 fbfe 	bl	8000524 <__aeabi_i2d>
 8008d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d2c:	f7f7 fc64 	bl	80005f8 <__aeabi_dmul>
 8008d30:	4b65      	ldr	r3, [pc, #404]	@ (8008ec8 <_dtoa_r+0x590>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	f7f7 faaa 	bl	800028c <__adddf3>
 8008d38:	4605      	mov	r5, r0
 8008d3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008d3e:	2c00      	cmp	r4, #0
 8008d40:	d16a      	bne.n	8008e18 <_dtoa_r+0x4e0>
 8008d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d46:	4b61      	ldr	r3, [pc, #388]	@ (8008ecc <_dtoa_r+0x594>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f7f7 fa9d 	bl	8000288 <__aeabi_dsub>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d56:	462a      	mov	r2, r5
 8008d58:	4633      	mov	r3, r6
 8008d5a:	f7f7 fedd 	bl	8000b18 <__aeabi_dcmpgt>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f040 8298 	bne.w	8009294 <_dtoa_r+0x95c>
 8008d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d68:	462a      	mov	r2, r5
 8008d6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d6e:	f7f7 feb5 	bl	8000adc <__aeabi_dcmplt>
 8008d72:	bb38      	cbnz	r0, 8008dc4 <_dtoa_r+0x48c>
 8008d74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008d78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008d7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f2c0 8157 	blt.w	8009032 <_dtoa_r+0x6fa>
 8008d84:	2f0e      	cmp	r7, #14
 8008d86:	f300 8154 	bgt.w	8009032 <_dtoa_r+0x6fa>
 8008d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8008eb8 <_dtoa_r+0x580>)
 8008d8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d90:	ed93 7b00 	vldr	d7, [r3]
 8008d94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	ed8d 7b00 	vstr	d7, [sp]
 8008d9c:	f280 80e5 	bge.w	8008f6a <_dtoa_r+0x632>
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f300 80e1 	bgt.w	8008f6a <_dtoa_r+0x632>
 8008da8:	d10c      	bne.n	8008dc4 <_dtoa_r+0x48c>
 8008daa:	4b48      	ldr	r3, [pc, #288]	@ (8008ecc <_dtoa_r+0x594>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	ec51 0b17 	vmov	r0, r1, d7
 8008db2:	f7f7 fc21 	bl	80005f8 <__aeabi_dmul>
 8008db6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dba:	f7f7 fea3 	bl	8000b04 <__aeabi_dcmpge>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f000 8266 	beq.w	8009290 <_dtoa_r+0x958>
 8008dc4:	2400      	movs	r4, #0
 8008dc6:	4625      	mov	r5, r4
 8008dc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dca:	4656      	mov	r6, sl
 8008dcc:	ea6f 0803 	mvn.w	r8, r3
 8008dd0:	2700      	movs	r7, #0
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4648      	mov	r0, r9
 8008dd6:	f000 fcbf 	bl	8009758 <_Bfree>
 8008dda:	2d00      	cmp	r5, #0
 8008ddc:	f000 80bd 	beq.w	8008f5a <_dtoa_r+0x622>
 8008de0:	b12f      	cbz	r7, 8008dee <_dtoa_r+0x4b6>
 8008de2:	42af      	cmp	r7, r5
 8008de4:	d003      	beq.n	8008dee <_dtoa_r+0x4b6>
 8008de6:	4639      	mov	r1, r7
 8008de8:	4648      	mov	r0, r9
 8008dea:	f000 fcb5 	bl	8009758 <_Bfree>
 8008dee:	4629      	mov	r1, r5
 8008df0:	4648      	mov	r0, r9
 8008df2:	f000 fcb1 	bl	8009758 <_Bfree>
 8008df6:	e0b0      	b.n	8008f5a <_dtoa_r+0x622>
 8008df8:	07e2      	lsls	r2, r4, #31
 8008dfa:	d505      	bpl.n	8008e08 <_dtoa_r+0x4d0>
 8008dfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e00:	f7f7 fbfa 	bl	80005f8 <__aeabi_dmul>
 8008e04:	3601      	adds	r6, #1
 8008e06:	2301      	movs	r3, #1
 8008e08:	1064      	asrs	r4, r4, #1
 8008e0a:	3508      	adds	r5, #8
 8008e0c:	e762      	b.n	8008cd4 <_dtoa_r+0x39c>
 8008e0e:	2602      	movs	r6, #2
 8008e10:	e765      	b.n	8008cde <_dtoa_r+0x3a6>
 8008e12:	9c03      	ldr	r4, [sp, #12]
 8008e14:	46b8      	mov	r8, r7
 8008e16:	e784      	b.n	8008d22 <_dtoa_r+0x3ea>
 8008e18:	4b27      	ldr	r3, [pc, #156]	@ (8008eb8 <_dtoa_r+0x580>)
 8008e1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e24:	4454      	add	r4, sl
 8008e26:	2900      	cmp	r1, #0
 8008e28:	d054      	beq.n	8008ed4 <_dtoa_r+0x59c>
 8008e2a:	4929      	ldr	r1, [pc, #164]	@ (8008ed0 <_dtoa_r+0x598>)
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	f7f7 fd0d 	bl	800084c <__aeabi_ddiv>
 8008e32:	4633      	mov	r3, r6
 8008e34:	462a      	mov	r2, r5
 8008e36:	f7f7 fa27 	bl	8000288 <__aeabi_dsub>
 8008e3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008e3e:	4656      	mov	r6, sl
 8008e40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e44:	f7f7 fe88 	bl	8000b58 <__aeabi_d2iz>
 8008e48:	4605      	mov	r5, r0
 8008e4a:	f7f7 fb6b 	bl	8000524 <__aeabi_i2d>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e56:	f7f7 fa17 	bl	8000288 <__aeabi_dsub>
 8008e5a:	3530      	adds	r5, #48	@ 0x30
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e64:	f806 5b01 	strb.w	r5, [r6], #1
 8008e68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e6c:	f7f7 fe36 	bl	8000adc <__aeabi_dcmplt>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d172      	bne.n	8008f5a <_dtoa_r+0x622>
 8008e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e78:	4911      	ldr	r1, [pc, #68]	@ (8008ec0 <_dtoa_r+0x588>)
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	f7f7 fa04 	bl	8000288 <__aeabi_dsub>
 8008e80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e84:	f7f7 fe2a 	bl	8000adc <__aeabi_dcmplt>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f040 80b4 	bne.w	8008ff6 <_dtoa_r+0x6be>
 8008e8e:	42a6      	cmp	r6, r4
 8008e90:	f43f af70 	beq.w	8008d74 <_dtoa_r+0x43c>
 8008e94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008e98:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec4 <_dtoa_r+0x58c>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f7f7 fbac 	bl	80005f8 <__aeabi_dmul>
 8008ea0:	4b08      	ldr	r3, [pc, #32]	@ (8008ec4 <_dtoa_r+0x58c>)
 8008ea2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eac:	f7f7 fba4 	bl	80005f8 <__aeabi_dmul>
 8008eb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008eb4:	e7c4      	b.n	8008e40 <_dtoa_r+0x508>
 8008eb6:	bf00      	nop
 8008eb8:	0800a938 	.word	0x0800a938
 8008ebc:	0800a910 	.word	0x0800a910
 8008ec0:	3ff00000 	.word	0x3ff00000
 8008ec4:	40240000 	.word	0x40240000
 8008ec8:	401c0000 	.word	0x401c0000
 8008ecc:	40140000 	.word	0x40140000
 8008ed0:	3fe00000 	.word	0x3fe00000
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f7f7 fb8e 	bl	80005f8 <__aeabi_dmul>
 8008edc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ee0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008ee2:	4656      	mov	r6, sl
 8008ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ee8:	f7f7 fe36 	bl	8000b58 <__aeabi_d2iz>
 8008eec:	4605      	mov	r5, r0
 8008eee:	f7f7 fb19 	bl	8000524 <__aeabi_i2d>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008efa:	f7f7 f9c5 	bl	8000288 <__aeabi_dsub>
 8008efe:	3530      	adds	r5, #48	@ 0x30
 8008f00:	f806 5b01 	strb.w	r5, [r6], #1
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	42a6      	cmp	r6, r4
 8008f0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f0e:	f04f 0200 	mov.w	r2, #0
 8008f12:	d124      	bne.n	8008f5e <_dtoa_r+0x626>
 8008f14:	4baf      	ldr	r3, [pc, #700]	@ (80091d4 <_dtoa_r+0x89c>)
 8008f16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008f1a:	f7f7 f9b7 	bl	800028c <__adddf3>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f26:	f7f7 fdf7 	bl	8000b18 <__aeabi_dcmpgt>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d163      	bne.n	8008ff6 <_dtoa_r+0x6be>
 8008f2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f32:	49a8      	ldr	r1, [pc, #672]	@ (80091d4 <_dtoa_r+0x89c>)
 8008f34:	2000      	movs	r0, #0
 8008f36:	f7f7 f9a7 	bl	8000288 <__aeabi_dsub>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f42:	f7f7 fdcb 	bl	8000adc <__aeabi_dcmplt>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	f43f af14 	beq.w	8008d74 <_dtoa_r+0x43c>
 8008f4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008f4e:	1e73      	subs	r3, r6, #1
 8008f50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f56:	2b30      	cmp	r3, #48	@ 0x30
 8008f58:	d0f8      	beq.n	8008f4c <_dtoa_r+0x614>
 8008f5a:	4647      	mov	r7, r8
 8008f5c:	e03b      	b.n	8008fd6 <_dtoa_r+0x69e>
 8008f5e:	4b9e      	ldr	r3, [pc, #632]	@ (80091d8 <_dtoa_r+0x8a0>)
 8008f60:	f7f7 fb4a 	bl	80005f8 <__aeabi_dmul>
 8008f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f68:	e7bc      	b.n	8008ee4 <_dtoa_r+0x5ac>
 8008f6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008f6e:	4656      	mov	r6, sl
 8008f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f74:	4620      	mov	r0, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7f7 fc68 	bl	800084c <__aeabi_ddiv>
 8008f7c:	f7f7 fdec 	bl	8000b58 <__aeabi_d2iz>
 8008f80:	4680      	mov	r8, r0
 8008f82:	f7f7 facf 	bl	8000524 <__aeabi_i2d>
 8008f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f8a:	f7f7 fb35 	bl	80005f8 <__aeabi_dmul>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4620      	mov	r0, r4
 8008f94:	4629      	mov	r1, r5
 8008f96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008f9a:	f7f7 f975 	bl	8000288 <__aeabi_dsub>
 8008f9e:	f806 4b01 	strb.w	r4, [r6], #1
 8008fa2:	9d03      	ldr	r5, [sp, #12]
 8008fa4:	eba6 040a 	sub.w	r4, r6, sl
 8008fa8:	42a5      	cmp	r5, r4
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	d133      	bne.n	8009018 <_dtoa_r+0x6e0>
 8008fb0:	f7f7 f96c 	bl	800028c <__adddf3>
 8008fb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fb8:	4604      	mov	r4, r0
 8008fba:	460d      	mov	r5, r1
 8008fbc:	f7f7 fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8008fc0:	b9c0      	cbnz	r0, 8008ff4 <_dtoa_r+0x6bc>
 8008fc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	4629      	mov	r1, r5
 8008fca:	f7f7 fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fce:	b110      	cbz	r0, 8008fd6 <_dtoa_r+0x69e>
 8008fd0:	f018 0f01 	tst.w	r8, #1
 8008fd4:	d10e      	bne.n	8008ff4 <_dtoa_r+0x6bc>
 8008fd6:	9902      	ldr	r1, [sp, #8]
 8008fd8:	4648      	mov	r0, r9
 8008fda:	f000 fbbd 	bl	8009758 <_Bfree>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	7033      	strb	r3, [r6, #0]
 8008fe2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008fe4:	3701      	adds	r7, #1
 8008fe6:	601f      	str	r7, [r3, #0]
 8008fe8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 824b 	beq.w	8009486 <_dtoa_r+0xb4e>
 8008ff0:	601e      	str	r6, [r3, #0]
 8008ff2:	e248      	b.n	8009486 <_dtoa_r+0xb4e>
 8008ff4:	46b8      	mov	r8, r7
 8008ff6:	4633      	mov	r3, r6
 8008ff8:	461e      	mov	r6, r3
 8008ffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ffe:	2a39      	cmp	r2, #57	@ 0x39
 8009000:	d106      	bne.n	8009010 <_dtoa_r+0x6d8>
 8009002:	459a      	cmp	sl, r3
 8009004:	d1f8      	bne.n	8008ff8 <_dtoa_r+0x6c0>
 8009006:	2230      	movs	r2, #48	@ 0x30
 8009008:	f108 0801 	add.w	r8, r8, #1
 800900c:	f88a 2000 	strb.w	r2, [sl]
 8009010:	781a      	ldrb	r2, [r3, #0]
 8009012:	3201      	adds	r2, #1
 8009014:	701a      	strb	r2, [r3, #0]
 8009016:	e7a0      	b.n	8008f5a <_dtoa_r+0x622>
 8009018:	4b6f      	ldr	r3, [pc, #444]	@ (80091d8 <_dtoa_r+0x8a0>)
 800901a:	2200      	movs	r2, #0
 800901c:	f7f7 faec 	bl	80005f8 <__aeabi_dmul>
 8009020:	2200      	movs	r2, #0
 8009022:	2300      	movs	r3, #0
 8009024:	4604      	mov	r4, r0
 8009026:	460d      	mov	r5, r1
 8009028:	f7f7 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800902c:	2800      	cmp	r0, #0
 800902e:	d09f      	beq.n	8008f70 <_dtoa_r+0x638>
 8009030:	e7d1      	b.n	8008fd6 <_dtoa_r+0x69e>
 8009032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009034:	2a00      	cmp	r2, #0
 8009036:	f000 80ea 	beq.w	800920e <_dtoa_r+0x8d6>
 800903a:	9a07      	ldr	r2, [sp, #28]
 800903c:	2a01      	cmp	r2, #1
 800903e:	f300 80cd 	bgt.w	80091dc <_dtoa_r+0x8a4>
 8009042:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009044:	2a00      	cmp	r2, #0
 8009046:	f000 80c1 	beq.w	80091cc <_dtoa_r+0x894>
 800904a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800904e:	9c08      	ldr	r4, [sp, #32]
 8009050:	9e00      	ldr	r6, [sp, #0]
 8009052:	9a00      	ldr	r2, [sp, #0]
 8009054:	441a      	add	r2, r3
 8009056:	9200      	str	r2, [sp, #0]
 8009058:	9a06      	ldr	r2, [sp, #24]
 800905a:	2101      	movs	r1, #1
 800905c:	441a      	add	r2, r3
 800905e:	4648      	mov	r0, r9
 8009060:	9206      	str	r2, [sp, #24]
 8009062:	f000 fc2d 	bl	80098c0 <__i2b>
 8009066:	4605      	mov	r5, r0
 8009068:	b166      	cbz	r6, 8009084 <_dtoa_r+0x74c>
 800906a:	9b06      	ldr	r3, [sp, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	dd09      	ble.n	8009084 <_dtoa_r+0x74c>
 8009070:	42b3      	cmp	r3, r6
 8009072:	9a00      	ldr	r2, [sp, #0]
 8009074:	bfa8      	it	ge
 8009076:	4633      	movge	r3, r6
 8009078:	1ad2      	subs	r2, r2, r3
 800907a:	9200      	str	r2, [sp, #0]
 800907c:	9a06      	ldr	r2, [sp, #24]
 800907e:	1af6      	subs	r6, r6, r3
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	9306      	str	r3, [sp, #24]
 8009084:	9b08      	ldr	r3, [sp, #32]
 8009086:	b30b      	cbz	r3, 80090cc <_dtoa_r+0x794>
 8009088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800908a:	2b00      	cmp	r3, #0
 800908c:	f000 80c6 	beq.w	800921c <_dtoa_r+0x8e4>
 8009090:	2c00      	cmp	r4, #0
 8009092:	f000 80c0 	beq.w	8009216 <_dtoa_r+0x8de>
 8009096:	4629      	mov	r1, r5
 8009098:	4622      	mov	r2, r4
 800909a:	4648      	mov	r0, r9
 800909c:	f000 fcc8 	bl	8009a30 <__pow5mult>
 80090a0:	9a02      	ldr	r2, [sp, #8]
 80090a2:	4601      	mov	r1, r0
 80090a4:	4605      	mov	r5, r0
 80090a6:	4648      	mov	r0, r9
 80090a8:	f000 fc20 	bl	80098ec <__multiply>
 80090ac:	9902      	ldr	r1, [sp, #8]
 80090ae:	4680      	mov	r8, r0
 80090b0:	4648      	mov	r0, r9
 80090b2:	f000 fb51 	bl	8009758 <_Bfree>
 80090b6:	9b08      	ldr	r3, [sp, #32]
 80090b8:	1b1b      	subs	r3, r3, r4
 80090ba:	9308      	str	r3, [sp, #32]
 80090bc:	f000 80b1 	beq.w	8009222 <_dtoa_r+0x8ea>
 80090c0:	9a08      	ldr	r2, [sp, #32]
 80090c2:	4641      	mov	r1, r8
 80090c4:	4648      	mov	r0, r9
 80090c6:	f000 fcb3 	bl	8009a30 <__pow5mult>
 80090ca:	9002      	str	r0, [sp, #8]
 80090cc:	2101      	movs	r1, #1
 80090ce:	4648      	mov	r0, r9
 80090d0:	f000 fbf6 	bl	80098c0 <__i2b>
 80090d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090d6:	4604      	mov	r4, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 81d8 	beq.w	800948e <_dtoa_r+0xb56>
 80090de:	461a      	mov	r2, r3
 80090e0:	4601      	mov	r1, r0
 80090e2:	4648      	mov	r0, r9
 80090e4:	f000 fca4 	bl	8009a30 <__pow5mult>
 80090e8:	9b07      	ldr	r3, [sp, #28]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	4604      	mov	r4, r0
 80090ee:	f300 809f 	bgt.w	8009230 <_dtoa_r+0x8f8>
 80090f2:	9b04      	ldr	r3, [sp, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f040 8097 	bne.w	8009228 <_dtoa_r+0x8f0>
 80090fa:	9b05      	ldr	r3, [sp, #20]
 80090fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009100:	2b00      	cmp	r3, #0
 8009102:	f040 8093 	bne.w	800922c <_dtoa_r+0x8f4>
 8009106:	9b05      	ldr	r3, [sp, #20]
 8009108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800910c:	0d1b      	lsrs	r3, r3, #20
 800910e:	051b      	lsls	r3, r3, #20
 8009110:	b133      	cbz	r3, 8009120 <_dtoa_r+0x7e8>
 8009112:	9b00      	ldr	r3, [sp, #0]
 8009114:	3301      	adds	r3, #1
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	9b06      	ldr	r3, [sp, #24]
 800911a:	3301      	adds	r3, #1
 800911c:	9306      	str	r3, [sp, #24]
 800911e:	2301      	movs	r3, #1
 8009120:	9308      	str	r3, [sp, #32]
 8009122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 81b8 	beq.w	800949a <_dtoa_r+0xb62>
 800912a:	6923      	ldr	r3, [r4, #16]
 800912c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009130:	6918      	ldr	r0, [r3, #16]
 8009132:	f000 fb79 	bl	8009828 <__hi0bits>
 8009136:	f1c0 0020 	rsb	r0, r0, #32
 800913a:	9b06      	ldr	r3, [sp, #24]
 800913c:	4418      	add	r0, r3
 800913e:	f010 001f 	ands.w	r0, r0, #31
 8009142:	f000 8082 	beq.w	800924a <_dtoa_r+0x912>
 8009146:	f1c0 0320 	rsb	r3, r0, #32
 800914a:	2b04      	cmp	r3, #4
 800914c:	dd73      	ble.n	8009236 <_dtoa_r+0x8fe>
 800914e:	9b00      	ldr	r3, [sp, #0]
 8009150:	f1c0 001c 	rsb	r0, r0, #28
 8009154:	4403      	add	r3, r0
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	9b06      	ldr	r3, [sp, #24]
 800915a:	4403      	add	r3, r0
 800915c:	4406      	add	r6, r0
 800915e:	9306      	str	r3, [sp, #24]
 8009160:	9b00      	ldr	r3, [sp, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	dd05      	ble.n	8009172 <_dtoa_r+0x83a>
 8009166:	9902      	ldr	r1, [sp, #8]
 8009168:	461a      	mov	r2, r3
 800916a:	4648      	mov	r0, r9
 800916c:	f000 fcba 	bl	8009ae4 <__lshift>
 8009170:	9002      	str	r0, [sp, #8]
 8009172:	9b06      	ldr	r3, [sp, #24]
 8009174:	2b00      	cmp	r3, #0
 8009176:	dd05      	ble.n	8009184 <_dtoa_r+0x84c>
 8009178:	4621      	mov	r1, r4
 800917a:	461a      	mov	r2, r3
 800917c:	4648      	mov	r0, r9
 800917e:	f000 fcb1 	bl	8009ae4 <__lshift>
 8009182:	4604      	mov	r4, r0
 8009184:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009186:	2b00      	cmp	r3, #0
 8009188:	d061      	beq.n	800924e <_dtoa_r+0x916>
 800918a:	9802      	ldr	r0, [sp, #8]
 800918c:	4621      	mov	r1, r4
 800918e:	f000 fd15 	bl	8009bbc <__mcmp>
 8009192:	2800      	cmp	r0, #0
 8009194:	da5b      	bge.n	800924e <_dtoa_r+0x916>
 8009196:	2300      	movs	r3, #0
 8009198:	9902      	ldr	r1, [sp, #8]
 800919a:	220a      	movs	r2, #10
 800919c:	4648      	mov	r0, r9
 800919e:	f000 fafd 	bl	800979c <__multadd>
 80091a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091a4:	9002      	str	r0, [sp, #8]
 80091a6:	f107 38ff 	add.w	r8, r7, #4294967295
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 8177 	beq.w	800949e <_dtoa_r+0xb66>
 80091b0:	4629      	mov	r1, r5
 80091b2:	2300      	movs	r3, #0
 80091b4:	220a      	movs	r2, #10
 80091b6:	4648      	mov	r0, r9
 80091b8:	f000 faf0 	bl	800979c <__multadd>
 80091bc:	f1bb 0f00 	cmp.w	fp, #0
 80091c0:	4605      	mov	r5, r0
 80091c2:	dc6f      	bgt.n	80092a4 <_dtoa_r+0x96c>
 80091c4:	9b07      	ldr	r3, [sp, #28]
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	dc49      	bgt.n	800925e <_dtoa_r+0x926>
 80091ca:	e06b      	b.n	80092a4 <_dtoa_r+0x96c>
 80091cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80091ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80091d2:	e73c      	b.n	800904e <_dtoa_r+0x716>
 80091d4:	3fe00000 	.word	0x3fe00000
 80091d8:	40240000 	.word	0x40240000
 80091dc:	9b03      	ldr	r3, [sp, #12]
 80091de:	1e5c      	subs	r4, r3, #1
 80091e0:	9b08      	ldr	r3, [sp, #32]
 80091e2:	42a3      	cmp	r3, r4
 80091e4:	db09      	blt.n	80091fa <_dtoa_r+0x8c2>
 80091e6:	1b1c      	subs	r4, r3, r4
 80091e8:	9b03      	ldr	r3, [sp, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f6bf af30 	bge.w	8009050 <_dtoa_r+0x718>
 80091f0:	9b00      	ldr	r3, [sp, #0]
 80091f2:	9a03      	ldr	r2, [sp, #12]
 80091f4:	1a9e      	subs	r6, r3, r2
 80091f6:	2300      	movs	r3, #0
 80091f8:	e72b      	b.n	8009052 <_dtoa_r+0x71a>
 80091fa:	9b08      	ldr	r3, [sp, #32]
 80091fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80091fe:	9408      	str	r4, [sp, #32]
 8009200:	1ae3      	subs	r3, r4, r3
 8009202:	441a      	add	r2, r3
 8009204:	9e00      	ldr	r6, [sp, #0]
 8009206:	9b03      	ldr	r3, [sp, #12]
 8009208:	920d      	str	r2, [sp, #52]	@ 0x34
 800920a:	2400      	movs	r4, #0
 800920c:	e721      	b.n	8009052 <_dtoa_r+0x71a>
 800920e:	9c08      	ldr	r4, [sp, #32]
 8009210:	9e00      	ldr	r6, [sp, #0]
 8009212:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009214:	e728      	b.n	8009068 <_dtoa_r+0x730>
 8009216:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800921a:	e751      	b.n	80090c0 <_dtoa_r+0x788>
 800921c:	9a08      	ldr	r2, [sp, #32]
 800921e:	9902      	ldr	r1, [sp, #8]
 8009220:	e750      	b.n	80090c4 <_dtoa_r+0x78c>
 8009222:	f8cd 8008 	str.w	r8, [sp, #8]
 8009226:	e751      	b.n	80090cc <_dtoa_r+0x794>
 8009228:	2300      	movs	r3, #0
 800922a:	e779      	b.n	8009120 <_dtoa_r+0x7e8>
 800922c:	9b04      	ldr	r3, [sp, #16]
 800922e:	e777      	b.n	8009120 <_dtoa_r+0x7e8>
 8009230:	2300      	movs	r3, #0
 8009232:	9308      	str	r3, [sp, #32]
 8009234:	e779      	b.n	800912a <_dtoa_r+0x7f2>
 8009236:	d093      	beq.n	8009160 <_dtoa_r+0x828>
 8009238:	9a00      	ldr	r2, [sp, #0]
 800923a:	331c      	adds	r3, #28
 800923c:	441a      	add	r2, r3
 800923e:	9200      	str	r2, [sp, #0]
 8009240:	9a06      	ldr	r2, [sp, #24]
 8009242:	441a      	add	r2, r3
 8009244:	441e      	add	r6, r3
 8009246:	9206      	str	r2, [sp, #24]
 8009248:	e78a      	b.n	8009160 <_dtoa_r+0x828>
 800924a:	4603      	mov	r3, r0
 800924c:	e7f4      	b.n	8009238 <_dtoa_r+0x900>
 800924e:	9b03      	ldr	r3, [sp, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	46b8      	mov	r8, r7
 8009254:	dc20      	bgt.n	8009298 <_dtoa_r+0x960>
 8009256:	469b      	mov	fp, r3
 8009258:	9b07      	ldr	r3, [sp, #28]
 800925a:	2b02      	cmp	r3, #2
 800925c:	dd1e      	ble.n	800929c <_dtoa_r+0x964>
 800925e:	f1bb 0f00 	cmp.w	fp, #0
 8009262:	f47f adb1 	bne.w	8008dc8 <_dtoa_r+0x490>
 8009266:	4621      	mov	r1, r4
 8009268:	465b      	mov	r3, fp
 800926a:	2205      	movs	r2, #5
 800926c:	4648      	mov	r0, r9
 800926e:	f000 fa95 	bl	800979c <__multadd>
 8009272:	4601      	mov	r1, r0
 8009274:	4604      	mov	r4, r0
 8009276:	9802      	ldr	r0, [sp, #8]
 8009278:	f000 fca0 	bl	8009bbc <__mcmp>
 800927c:	2800      	cmp	r0, #0
 800927e:	f77f ada3 	ble.w	8008dc8 <_dtoa_r+0x490>
 8009282:	4656      	mov	r6, sl
 8009284:	2331      	movs	r3, #49	@ 0x31
 8009286:	f806 3b01 	strb.w	r3, [r6], #1
 800928a:	f108 0801 	add.w	r8, r8, #1
 800928e:	e59f      	b.n	8008dd0 <_dtoa_r+0x498>
 8009290:	9c03      	ldr	r4, [sp, #12]
 8009292:	46b8      	mov	r8, r7
 8009294:	4625      	mov	r5, r4
 8009296:	e7f4      	b.n	8009282 <_dtoa_r+0x94a>
 8009298:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800929c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 8101 	beq.w	80094a6 <_dtoa_r+0xb6e>
 80092a4:	2e00      	cmp	r6, #0
 80092a6:	dd05      	ble.n	80092b4 <_dtoa_r+0x97c>
 80092a8:	4629      	mov	r1, r5
 80092aa:	4632      	mov	r2, r6
 80092ac:	4648      	mov	r0, r9
 80092ae:	f000 fc19 	bl	8009ae4 <__lshift>
 80092b2:	4605      	mov	r5, r0
 80092b4:	9b08      	ldr	r3, [sp, #32]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d05c      	beq.n	8009374 <_dtoa_r+0xa3c>
 80092ba:	6869      	ldr	r1, [r5, #4]
 80092bc:	4648      	mov	r0, r9
 80092be:	f000 fa0b 	bl	80096d8 <_Balloc>
 80092c2:	4606      	mov	r6, r0
 80092c4:	b928      	cbnz	r0, 80092d2 <_dtoa_r+0x99a>
 80092c6:	4b82      	ldr	r3, [pc, #520]	@ (80094d0 <_dtoa_r+0xb98>)
 80092c8:	4602      	mov	r2, r0
 80092ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80092ce:	f7ff bb4a 	b.w	8008966 <_dtoa_r+0x2e>
 80092d2:	692a      	ldr	r2, [r5, #16]
 80092d4:	3202      	adds	r2, #2
 80092d6:	0092      	lsls	r2, r2, #2
 80092d8:	f105 010c 	add.w	r1, r5, #12
 80092dc:	300c      	adds	r0, #12
 80092de:	f000 feb5 	bl	800a04c <memcpy>
 80092e2:	2201      	movs	r2, #1
 80092e4:	4631      	mov	r1, r6
 80092e6:	4648      	mov	r0, r9
 80092e8:	f000 fbfc 	bl	8009ae4 <__lshift>
 80092ec:	f10a 0301 	add.w	r3, sl, #1
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	eb0a 030b 	add.w	r3, sl, fp
 80092f6:	9308      	str	r3, [sp, #32]
 80092f8:	9b04      	ldr	r3, [sp, #16]
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	462f      	mov	r7, r5
 8009300:	9306      	str	r3, [sp, #24]
 8009302:	4605      	mov	r5, r0
 8009304:	9b00      	ldr	r3, [sp, #0]
 8009306:	9802      	ldr	r0, [sp, #8]
 8009308:	4621      	mov	r1, r4
 800930a:	f103 3bff 	add.w	fp, r3, #4294967295
 800930e:	f7ff fa8a 	bl	8008826 <quorem>
 8009312:	4603      	mov	r3, r0
 8009314:	3330      	adds	r3, #48	@ 0x30
 8009316:	9003      	str	r0, [sp, #12]
 8009318:	4639      	mov	r1, r7
 800931a:	9802      	ldr	r0, [sp, #8]
 800931c:	9309      	str	r3, [sp, #36]	@ 0x24
 800931e:	f000 fc4d 	bl	8009bbc <__mcmp>
 8009322:	462a      	mov	r2, r5
 8009324:	9004      	str	r0, [sp, #16]
 8009326:	4621      	mov	r1, r4
 8009328:	4648      	mov	r0, r9
 800932a:	f000 fc63 	bl	8009bf4 <__mdiff>
 800932e:	68c2      	ldr	r2, [r0, #12]
 8009330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009332:	4606      	mov	r6, r0
 8009334:	bb02      	cbnz	r2, 8009378 <_dtoa_r+0xa40>
 8009336:	4601      	mov	r1, r0
 8009338:	9802      	ldr	r0, [sp, #8]
 800933a:	f000 fc3f 	bl	8009bbc <__mcmp>
 800933e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009340:	4602      	mov	r2, r0
 8009342:	4631      	mov	r1, r6
 8009344:	4648      	mov	r0, r9
 8009346:	920c      	str	r2, [sp, #48]	@ 0x30
 8009348:	9309      	str	r3, [sp, #36]	@ 0x24
 800934a:	f000 fa05 	bl	8009758 <_Bfree>
 800934e:	9b07      	ldr	r3, [sp, #28]
 8009350:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009352:	9e00      	ldr	r6, [sp, #0]
 8009354:	ea42 0103 	orr.w	r1, r2, r3
 8009358:	9b06      	ldr	r3, [sp, #24]
 800935a:	4319      	orrs	r1, r3
 800935c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800935e:	d10d      	bne.n	800937c <_dtoa_r+0xa44>
 8009360:	2b39      	cmp	r3, #57	@ 0x39
 8009362:	d027      	beq.n	80093b4 <_dtoa_r+0xa7c>
 8009364:	9a04      	ldr	r2, [sp, #16]
 8009366:	2a00      	cmp	r2, #0
 8009368:	dd01      	ble.n	800936e <_dtoa_r+0xa36>
 800936a:	9b03      	ldr	r3, [sp, #12]
 800936c:	3331      	adds	r3, #49	@ 0x31
 800936e:	f88b 3000 	strb.w	r3, [fp]
 8009372:	e52e      	b.n	8008dd2 <_dtoa_r+0x49a>
 8009374:	4628      	mov	r0, r5
 8009376:	e7b9      	b.n	80092ec <_dtoa_r+0x9b4>
 8009378:	2201      	movs	r2, #1
 800937a:	e7e2      	b.n	8009342 <_dtoa_r+0xa0a>
 800937c:	9904      	ldr	r1, [sp, #16]
 800937e:	2900      	cmp	r1, #0
 8009380:	db04      	blt.n	800938c <_dtoa_r+0xa54>
 8009382:	9807      	ldr	r0, [sp, #28]
 8009384:	4301      	orrs	r1, r0
 8009386:	9806      	ldr	r0, [sp, #24]
 8009388:	4301      	orrs	r1, r0
 800938a:	d120      	bne.n	80093ce <_dtoa_r+0xa96>
 800938c:	2a00      	cmp	r2, #0
 800938e:	ddee      	ble.n	800936e <_dtoa_r+0xa36>
 8009390:	9902      	ldr	r1, [sp, #8]
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	2201      	movs	r2, #1
 8009396:	4648      	mov	r0, r9
 8009398:	f000 fba4 	bl	8009ae4 <__lshift>
 800939c:	4621      	mov	r1, r4
 800939e:	9002      	str	r0, [sp, #8]
 80093a0:	f000 fc0c 	bl	8009bbc <__mcmp>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	9b00      	ldr	r3, [sp, #0]
 80093a8:	dc02      	bgt.n	80093b0 <_dtoa_r+0xa78>
 80093aa:	d1e0      	bne.n	800936e <_dtoa_r+0xa36>
 80093ac:	07da      	lsls	r2, r3, #31
 80093ae:	d5de      	bpl.n	800936e <_dtoa_r+0xa36>
 80093b0:	2b39      	cmp	r3, #57	@ 0x39
 80093b2:	d1da      	bne.n	800936a <_dtoa_r+0xa32>
 80093b4:	2339      	movs	r3, #57	@ 0x39
 80093b6:	f88b 3000 	strb.w	r3, [fp]
 80093ba:	4633      	mov	r3, r6
 80093bc:	461e      	mov	r6, r3
 80093be:	3b01      	subs	r3, #1
 80093c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80093c4:	2a39      	cmp	r2, #57	@ 0x39
 80093c6:	d04e      	beq.n	8009466 <_dtoa_r+0xb2e>
 80093c8:	3201      	adds	r2, #1
 80093ca:	701a      	strb	r2, [r3, #0]
 80093cc:	e501      	b.n	8008dd2 <_dtoa_r+0x49a>
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	dd03      	ble.n	80093da <_dtoa_r+0xaa2>
 80093d2:	2b39      	cmp	r3, #57	@ 0x39
 80093d4:	d0ee      	beq.n	80093b4 <_dtoa_r+0xa7c>
 80093d6:	3301      	adds	r3, #1
 80093d8:	e7c9      	b.n	800936e <_dtoa_r+0xa36>
 80093da:	9a00      	ldr	r2, [sp, #0]
 80093dc:	9908      	ldr	r1, [sp, #32]
 80093de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093e2:	428a      	cmp	r2, r1
 80093e4:	d028      	beq.n	8009438 <_dtoa_r+0xb00>
 80093e6:	9902      	ldr	r1, [sp, #8]
 80093e8:	2300      	movs	r3, #0
 80093ea:	220a      	movs	r2, #10
 80093ec:	4648      	mov	r0, r9
 80093ee:	f000 f9d5 	bl	800979c <__multadd>
 80093f2:	42af      	cmp	r7, r5
 80093f4:	9002      	str	r0, [sp, #8]
 80093f6:	f04f 0300 	mov.w	r3, #0
 80093fa:	f04f 020a 	mov.w	r2, #10
 80093fe:	4639      	mov	r1, r7
 8009400:	4648      	mov	r0, r9
 8009402:	d107      	bne.n	8009414 <_dtoa_r+0xadc>
 8009404:	f000 f9ca 	bl	800979c <__multadd>
 8009408:	4607      	mov	r7, r0
 800940a:	4605      	mov	r5, r0
 800940c:	9b00      	ldr	r3, [sp, #0]
 800940e:	3301      	adds	r3, #1
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	e777      	b.n	8009304 <_dtoa_r+0x9cc>
 8009414:	f000 f9c2 	bl	800979c <__multadd>
 8009418:	4629      	mov	r1, r5
 800941a:	4607      	mov	r7, r0
 800941c:	2300      	movs	r3, #0
 800941e:	220a      	movs	r2, #10
 8009420:	4648      	mov	r0, r9
 8009422:	f000 f9bb 	bl	800979c <__multadd>
 8009426:	4605      	mov	r5, r0
 8009428:	e7f0      	b.n	800940c <_dtoa_r+0xad4>
 800942a:	f1bb 0f00 	cmp.w	fp, #0
 800942e:	bfcc      	ite	gt
 8009430:	465e      	movgt	r6, fp
 8009432:	2601      	movle	r6, #1
 8009434:	4456      	add	r6, sl
 8009436:	2700      	movs	r7, #0
 8009438:	9902      	ldr	r1, [sp, #8]
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	2201      	movs	r2, #1
 800943e:	4648      	mov	r0, r9
 8009440:	f000 fb50 	bl	8009ae4 <__lshift>
 8009444:	4621      	mov	r1, r4
 8009446:	9002      	str	r0, [sp, #8]
 8009448:	f000 fbb8 	bl	8009bbc <__mcmp>
 800944c:	2800      	cmp	r0, #0
 800944e:	dcb4      	bgt.n	80093ba <_dtoa_r+0xa82>
 8009450:	d102      	bne.n	8009458 <_dtoa_r+0xb20>
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	07db      	lsls	r3, r3, #31
 8009456:	d4b0      	bmi.n	80093ba <_dtoa_r+0xa82>
 8009458:	4633      	mov	r3, r6
 800945a:	461e      	mov	r6, r3
 800945c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009460:	2a30      	cmp	r2, #48	@ 0x30
 8009462:	d0fa      	beq.n	800945a <_dtoa_r+0xb22>
 8009464:	e4b5      	b.n	8008dd2 <_dtoa_r+0x49a>
 8009466:	459a      	cmp	sl, r3
 8009468:	d1a8      	bne.n	80093bc <_dtoa_r+0xa84>
 800946a:	2331      	movs	r3, #49	@ 0x31
 800946c:	f108 0801 	add.w	r8, r8, #1
 8009470:	f88a 3000 	strb.w	r3, [sl]
 8009474:	e4ad      	b.n	8008dd2 <_dtoa_r+0x49a>
 8009476:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009478:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80094d4 <_dtoa_r+0xb9c>
 800947c:	b11b      	cbz	r3, 8009486 <_dtoa_r+0xb4e>
 800947e:	f10a 0308 	add.w	r3, sl, #8
 8009482:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	4650      	mov	r0, sl
 8009488:	b017      	add	sp, #92	@ 0x5c
 800948a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948e:	9b07      	ldr	r3, [sp, #28]
 8009490:	2b01      	cmp	r3, #1
 8009492:	f77f ae2e 	ble.w	80090f2 <_dtoa_r+0x7ba>
 8009496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009498:	9308      	str	r3, [sp, #32]
 800949a:	2001      	movs	r0, #1
 800949c:	e64d      	b.n	800913a <_dtoa_r+0x802>
 800949e:	f1bb 0f00 	cmp.w	fp, #0
 80094a2:	f77f aed9 	ble.w	8009258 <_dtoa_r+0x920>
 80094a6:	4656      	mov	r6, sl
 80094a8:	9802      	ldr	r0, [sp, #8]
 80094aa:	4621      	mov	r1, r4
 80094ac:	f7ff f9bb 	bl	8008826 <quorem>
 80094b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80094b4:	f806 3b01 	strb.w	r3, [r6], #1
 80094b8:	eba6 020a 	sub.w	r2, r6, sl
 80094bc:	4593      	cmp	fp, r2
 80094be:	ddb4      	ble.n	800942a <_dtoa_r+0xaf2>
 80094c0:	9902      	ldr	r1, [sp, #8]
 80094c2:	2300      	movs	r3, #0
 80094c4:	220a      	movs	r2, #10
 80094c6:	4648      	mov	r0, r9
 80094c8:	f000 f968 	bl	800979c <__multadd>
 80094cc:	9002      	str	r0, [sp, #8]
 80094ce:	e7eb      	b.n	80094a8 <_dtoa_r+0xb70>
 80094d0:	0800a840 	.word	0x0800a840
 80094d4:	0800a7c4 	.word	0x0800a7c4

080094d8 <_free_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4605      	mov	r5, r0
 80094dc:	2900      	cmp	r1, #0
 80094de:	d041      	beq.n	8009564 <_free_r+0x8c>
 80094e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e4:	1f0c      	subs	r4, r1, #4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bfb8      	it	lt
 80094ea:	18e4      	addlt	r4, r4, r3
 80094ec:	f000 f8e8 	bl	80096c0 <__malloc_lock>
 80094f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009568 <_free_r+0x90>)
 80094f2:	6813      	ldr	r3, [r2, #0]
 80094f4:	b933      	cbnz	r3, 8009504 <_free_r+0x2c>
 80094f6:	6063      	str	r3, [r4, #4]
 80094f8:	6014      	str	r4, [r2, #0]
 80094fa:	4628      	mov	r0, r5
 80094fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009500:	f000 b8e4 	b.w	80096cc <__malloc_unlock>
 8009504:	42a3      	cmp	r3, r4
 8009506:	d908      	bls.n	800951a <_free_r+0x42>
 8009508:	6820      	ldr	r0, [r4, #0]
 800950a:	1821      	adds	r1, r4, r0
 800950c:	428b      	cmp	r3, r1
 800950e:	bf01      	itttt	eq
 8009510:	6819      	ldreq	r1, [r3, #0]
 8009512:	685b      	ldreq	r3, [r3, #4]
 8009514:	1809      	addeq	r1, r1, r0
 8009516:	6021      	streq	r1, [r4, #0]
 8009518:	e7ed      	b.n	80094f6 <_free_r+0x1e>
 800951a:	461a      	mov	r2, r3
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	b10b      	cbz	r3, 8009524 <_free_r+0x4c>
 8009520:	42a3      	cmp	r3, r4
 8009522:	d9fa      	bls.n	800951a <_free_r+0x42>
 8009524:	6811      	ldr	r1, [r2, #0]
 8009526:	1850      	adds	r0, r2, r1
 8009528:	42a0      	cmp	r0, r4
 800952a:	d10b      	bne.n	8009544 <_free_r+0x6c>
 800952c:	6820      	ldr	r0, [r4, #0]
 800952e:	4401      	add	r1, r0
 8009530:	1850      	adds	r0, r2, r1
 8009532:	4283      	cmp	r3, r0
 8009534:	6011      	str	r1, [r2, #0]
 8009536:	d1e0      	bne.n	80094fa <_free_r+0x22>
 8009538:	6818      	ldr	r0, [r3, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	6053      	str	r3, [r2, #4]
 800953e:	4408      	add	r0, r1
 8009540:	6010      	str	r0, [r2, #0]
 8009542:	e7da      	b.n	80094fa <_free_r+0x22>
 8009544:	d902      	bls.n	800954c <_free_r+0x74>
 8009546:	230c      	movs	r3, #12
 8009548:	602b      	str	r3, [r5, #0]
 800954a:	e7d6      	b.n	80094fa <_free_r+0x22>
 800954c:	6820      	ldr	r0, [r4, #0]
 800954e:	1821      	adds	r1, r4, r0
 8009550:	428b      	cmp	r3, r1
 8009552:	bf04      	itt	eq
 8009554:	6819      	ldreq	r1, [r3, #0]
 8009556:	685b      	ldreq	r3, [r3, #4]
 8009558:	6063      	str	r3, [r4, #4]
 800955a:	bf04      	itt	eq
 800955c:	1809      	addeq	r1, r1, r0
 800955e:	6021      	streq	r1, [r4, #0]
 8009560:	6054      	str	r4, [r2, #4]
 8009562:	e7ca      	b.n	80094fa <_free_r+0x22>
 8009564:	bd38      	pop	{r3, r4, r5, pc}
 8009566:	bf00      	nop
 8009568:	20000788 	.word	0x20000788

0800956c <malloc>:
 800956c:	4b02      	ldr	r3, [pc, #8]	@ (8009578 <malloc+0xc>)
 800956e:	4601      	mov	r1, r0
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	f000 b825 	b.w	80095c0 <_malloc_r>
 8009576:	bf00      	nop
 8009578:	20000018 	.word	0x20000018

0800957c <sbrk_aligned>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4e0f      	ldr	r6, [pc, #60]	@ (80095bc <sbrk_aligned+0x40>)
 8009580:	460c      	mov	r4, r1
 8009582:	6831      	ldr	r1, [r6, #0]
 8009584:	4605      	mov	r5, r0
 8009586:	b911      	cbnz	r1, 800958e <sbrk_aligned+0x12>
 8009588:	f000 fd50 	bl	800a02c <_sbrk_r>
 800958c:	6030      	str	r0, [r6, #0]
 800958e:	4621      	mov	r1, r4
 8009590:	4628      	mov	r0, r5
 8009592:	f000 fd4b 	bl	800a02c <_sbrk_r>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	d103      	bne.n	80095a2 <sbrk_aligned+0x26>
 800959a:	f04f 34ff 	mov.w	r4, #4294967295
 800959e:	4620      	mov	r0, r4
 80095a0:	bd70      	pop	{r4, r5, r6, pc}
 80095a2:	1cc4      	adds	r4, r0, #3
 80095a4:	f024 0403 	bic.w	r4, r4, #3
 80095a8:	42a0      	cmp	r0, r4
 80095aa:	d0f8      	beq.n	800959e <sbrk_aligned+0x22>
 80095ac:	1a21      	subs	r1, r4, r0
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 fd3c 	bl	800a02c <_sbrk_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1f2      	bne.n	800959e <sbrk_aligned+0x22>
 80095b8:	e7ef      	b.n	800959a <sbrk_aligned+0x1e>
 80095ba:	bf00      	nop
 80095bc:	20000784 	.word	0x20000784

080095c0 <_malloc_r>:
 80095c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	1ccd      	adds	r5, r1, #3
 80095c6:	f025 0503 	bic.w	r5, r5, #3
 80095ca:	3508      	adds	r5, #8
 80095cc:	2d0c      	cmp	r5, #12
 80095ce:	bf38      	it	cc
 80095d0:	250c      	movcc	r5, #12
 80095d2:	2d00      	cmp	r5, #0
 80095d4:	4606      	mov	r6, r0
 80095d6:	db01      	blt.n	80095dc <_malloc_r+0x1c>
 80095d8:	42a9      	cmp	r1, r5
 80095da:	d904      	bls.n	80095e6 <_malloc_r+0x26>
 80095dc:	230c      	movs	r3, #12
 80095de:	6033      	str	r3, [r6, #0]
 80095e0:	2000      	movs	r0, #0
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096bc <_malloc_r+0xfc>
 80095ea:	f000 f869 	bl	80096c0 <__malloc_lock>
 80095ee:	f8d8 3000 	ldr.w	r3, [r8]
 80095f2:	461c      	mov	r4, r3
 80095f4:	bb44      	cbnz	r4, 8009648 <_malloc_r+0x88>
 80095f6:	4629      	mov	r1, r5
 80095f8:	4630      	mov	r0, r6
 80095fa:	f7ff ffbf 	bl	800957c <sbrk_aligned>
 80095fe:	1c43      	adds	r3, r0, #1
 8009600:	4604      	mov	r4, r0
 8009602:	d158      	bne.n	80096b6 <_malloc_r+0xf6>
 8009604:	f8d8 4000 	ldr.w	r4, [r8]
 8009608:	4627      	mov	r7, r4
 800960a:	2f00      	cmp	r7, #0
 800960c:	d143      	bne.n	8009696 <_malloc_r+0xd6>
 800960e:	2c00      	cmp	r4, #0
 8009610:	d04b      	beq.n	80096aa <_malloc_r+0xea>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	4639      	mov	r1, r7
 8009616:	4630      	mov	r0, r6
 8009618:	eb04 0903 	add.w	r9, r4, r3
 800961c:	f000 fd06 	bl	800a02c <_sbrk_r>
 8009620:	4581      	cmp	r9, r0
 8009622:	d142      	bne.n	80096aa <_malloc_r+0xea>
 8009624:	6821      	ldr	r1, [r4, #0]
 8009626:	1a6d      	subs	r5, r5, r1
 8009628:	4629      	mov	r1, r5
 800962a:	4630      	mov	r0, r6
 800962c:	f7ff ffa6 	bl	800957c <sbrk_aligned>
 8009630:	3001      	adds	r0, #1
 8009632:	d03a      	beq.n	80096aa <_malloc_r+0xea>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	442b      	add	r3, r5
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	f8d8 3000 	ldr.w	r3, [r8]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	bb62      	cbnz	r2, 800969c <_malloc_r+0xdc>
 8009642:	f8c8 7000 	str.w	r7, [r8]
 8009646:	e00f      	b.n	8009668 <_malloc_r+0xa8>
 8009648:	6822      	ldr	r2, [r4, #0]
 800964a:	1b52      	subs	r2, r2, r5
 800964c:	d420      	bmi.n	8009690 <_malloc_r+0xd0>
 800964e:	2a0b      	cmp	r2, #11
 8009650:	d917      	bls.n	8009682 <_malloc_r+0xc2>
 8009652:	1961      	adds	r1, r4, r5
 8009654:	42a3      	cmp	r3, r4
 8009656:	6025      	str	r5, [r4, #0]
 8009658:	bf18      	it	ne
 800965a:	6059      	strne	r1, [r3, #4]
 800965c:	6863      	ldr	r3, [r4, #4]
 800965e:	bf08      	it	eq
 8009660:	f8c8 1000 	streq.w	r1, [r8]
 8009664:	5162      	str	r2, [r4, r5]
 8009666:	604b      	str	r3, [r1, #4]
 8009668:	4630      	mov	r0, r6
 800966a:	f000 f82f 	bl	80096cc <__malloc_unlock>
 800966e:	f104 000b 	add.w	r0, r4, #11
 8009672:	1d23      	adds	r3, r4, #4
 8009674:	f020 0007 	bic.w	r0, r0, #7
 8009678:	1ac2      	subs	r2, r0, r3
 800967a:	bf1c      	itt	ne
 800967c:	1a1b      	subne	r3, r3, r0
 800967e:	50a3      	strne	r3, [r4, r2]
 8009680:	e7af      	b.n	80095e2 <_malloc_r+0x22>
 8009682:	6862      	ldr	r2, [r4, #4]
 8009684:	42a3      	cmp	r3, r4
 8009686:	bf0c      	ite	eq
 8009688:	f8c8 2000 	streq.w	r2, [r8]
 800968c:	605a      	strne	r2, [r3, #4]
 800968e:	e7eb      	b.n	8009668 <_malloc_r+0xa8>
 8009690:	4623      	mov	r3, r4
 8009692:	6864      	ldr	r4, [r4, #4]
 8009694:	e7ae      	b.n	80095f4 <_malloc_r+0x34>
 8009696:	463c      	mov	r4, r7
 8009698:	687f      	ldr	r7, [r7, #4]
 800969a:	e7b6      	b.n	800960a <_malloc_r+0x4a>
 800969c:	461a      	mov	r2, r3
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d1fb      	bne.n	800969c <_malloc_r+0xdc>
 80096a4:	2300      	movs	r3, #0
 80096a6:	6053      	str	r3, [r2, #4]
 80096a8:	e7de      	b.n	8009668 <_malloc_r+0xa8>
 80096aa:	230c      	movs	r3, #12
 80096ac:	6033      	str	r3, [r6, #0]
 80096ae:	4630      	mov	r0, r6
 80096b0:	f000 f80c 	bl	80096cc <__malloc_unlock>
 80096b4:	e794      	b.n	80095e0 <_malloc_r+0x20>
 80096b6:	6005      	str	r5, [r0, #0]
 80096b8:	e7d6      	b.n	8009668 <_malloc_r+0xa8>
 80096ba:	bf00      	nop
 80096bc:	20000788 	.word	0x20000788

080096c0 <__malloc_lock>:
 80096c0:	4801      	ldr	r0, [pc, #4]	@ (80096c8 <__malloc_lock+0x8>)
 80096c2:	f7ff b8ae 	b.w	8008822 <__retarget_lock_acquire_recursive>
 80096c6:	bf00      	nop
 80096c8:	20000780 	.word	0x20000780

080096cc <__malloc_unlock>:
 80096cc:	4801      	ldr	r0, [pc, #4]	@ (80096d4 <__malloc_unlock+0x8>)
 80096ce:	f7ff b8a9 	b.w	8008824 <__retarget_lock_release_recursive>
 80096d2:	bf00      	nop
 80096d4:	20000780 	.word	0x20000780

080096d8 <_Balloc>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	69c6      	ldr	r6, [r0, #28]
 80096dc:	4604      	mov	r4, r0
 80096de:	460d      	mov	r5, r1
 80096e0:	b976      	cbnz	r6, 8009700 <_Balloc+0x28>
 80096e2:	2010      	movs	r0, #16
 80096e4:	f7ff ff42 	bl	800956c <malloc>
 80096e8:	4602      	mov	r2, r0
 80096ea:	61e0      	str	r0, [r4, #28]
 80096ec:	b920      	cbnz	r0, 80096f8 <_Balloc+0x20>
 80096ee:	4b18      	ldr	r3, [pc, #96]	@ (8009750 <_Balloc+0x78>)
 80096f0:	4818      	ldr	r0, [pc, #96]	@ (8009754 <_Balloc+0x7c>)
 80096f2:	216b      	movs	r1, #107	@ 0x6b
 80096f4:	f000 fcb8 	bl	800a068 <__assert_func>
 80096f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096fc:	6006      	str	r6, [r0, #0]
 80096fe:	60c6      	str	r6, [r0, #12]
 8009700:	69e6      	ldr	r6, [r4, #28]
 8009702:	68f3      	ldr	r3, [r6, #12]
 8009704:	b183      	cbz	r3, 8009728 <_Balloc+0x50>
 8009706:	69e3      	ldr	r3, [r4, #28]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800970e:	b9b8      	cbnz	r0, 8009740 <_Balloc+0x68>
 8009710:	2101      	movs	r1, #1
 8009712:	fa01 f605 	lsl.w	r6, r1, r5
 8009716:	1d72      	adds	r2, r6, #5
 8009718:	0092      	lsls	r2, r2, #2
 800971a:	4620      	mov	r0, r4
 800971c:	f000 fcc2 	bl	800a0a4 <_calloc_r>
 8009720:	b160      	cbz	r0, 800973c <_Balloc+0x64>
 8009722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009726:	e00e      	b.n	8009746 <_Balloc+0x6e>
 8009728:	2221      	movs	r2, #33	@ 0x21
 800972a:	2104      	movs	r1, #4
 800972c:	4620      	mov	r0, r4
 800972e:	f000 fcb9 	bl	800a0a4 <_calloc_r>
 8009732:	69e3      	ldr	r3, [r4, #28]
 8009734:	60f0      	str	r0, [r6, #12]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1e4      	bne.n	8009706 <_Balloc+0x2e>
 800973c:	2000      	movs	r0, #0
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	6802      	ldr	r2, [r0, #0]
 8009742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009746:	2300      	movs	r3, #0
 8009748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800974c:	e7f7      	b.n	800973e <_Balloc+0x66>
 800974e:	bf00      	nop
 8009750:	0800a7d1 	.word	0x0800a7d1
 8009754:	0800a851 	.word	0x0800a851

08009758 <_Bfree>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	69c6      	ldr	r6, [r0, #28]
 800975c:	4605      	mov	r5, r0
 800975e:	460c      	mov	r4, r1
 8009760:	b976      	cbnz	r6, 8009780 <_Bfree+0x28>
 8009762:	2010      	movs	r0, #16
 8009764:	f7ff ff02 	bl	800956c <malloc>
 8009768:	4602      	mov	r2, r0
 800976a:	61e8      	str	r0, [r5, #28]
 800976c:	b920      	cbnz	r0, 8009778 <_Bfree+0x20>
 800976e:	4b09      	ldr	r3, [pc, #36]	@ (8009794 <_Bfree+0x3c>)
 8009770:	4809      	ldr	r0, [pc, #36]	@ (8009798 <_Bfree+0x40>)
 8009772:	218f      	movs	r1, #143	@ 0x8f
 8009774:	f000 fc78 	bl	800a068 <__assert_func>
 8009778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800977c:	6006      	str	r6, [r0, #0]
 800977e:	60c6      	str	r6, [r0, #12]
 8009780:	b13c      	cbz	r4, 8009792 <_Bfree+0x3a>
 8009782:	69eb      	ldr	r3, [r5, #28]
 8009784:	6862      	ldr	r2, [r4, #4]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800978c:	6021      	str	r1, [r4, #0]
 800978e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009792:	bd70      	pop	{r4, r5, r6, pc}
 8009794:	0800a7d1 	.word	0x0800a7d1
 8009798:	0800a851 	.word	0x0800a851

0800979c <__multadd>:
 800979c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a0:	690d      	ldr	r5, [r1, #16]
 80097a2:	4607      	mov	r7, r0
 80097a4:	460c      	mov	r4, r1
 80097a6:	461e      	mov	r6, r3
 80097a8:	f101 0c14 	add.w	ip, r1, #20
 80097ac:	2000      	movs	r0, #0
 80097ae:	f8dc 3000 	ldr.w	r3, [ip]
 80097b2:	b299      	uxth	r1, r3
 80097b4:	fb02 6101 	mla	r1, r2, r1, r6
 80097b8:	0c1e      	lsrs	r6, r3, #16
 80097ba:	0c0b      	lsrs	r3, r1, #16
 80097bc:	fb02 3306 	mla	r3, r2, r6, r3
 80097c0:	b289      	uxth	r1, r1
 80097c2:	3001      	adds	r0, #1
 80097c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097c8:	4285      	cmp	r5, r0
 80097ca:	f84c 1b04 	str.w	r1, [ip], #4
 80097ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097d2:	dcec      	bgt.n	80097ae <__multadd+0x12>
 80097d4:	b30e      	cbz	r6, 800981a <__multadd+0x7e>
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	42ab      	cmp	r3, r5
 80097da:	dc19      	bgt.n	8009810 <__multadd+0x74>
 80097dc:	6861      	ldr	r1, [r4, #4]
 80097de:	4638      	mov	r0, r7
 80097e0:	3101      	adds	r1, #1
 80097e2:	f7ff ff79 	bl	80096d8 <_Balloc>
 80097e6:	4680      	mov	r8, r0
 80097e8:	b928      	cbnz	r0, 80097f6 <__multadd+0x5a>
 80097ea:	4602      	mov	r2, r0
 80097ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009820 <__multadd+0x84>)
 80097ee:	480d      	ldr	r0, [pc, #52]	@ (8009824 <__multadd+0x88>)
 80097f0:	21ba      	movs	r1, #186	@ 0xba
 80097f2:	f000 fc39 	bl	800a068 <__assert_func>
 80097f6:	6922      	ldr	r2, [r4, #16]
 80097f8:	3202      	adds	r2, #2
 80097fa:	f104 010c 	add.w	r1, r4, #12
 80097fe:	0092      	lsls	r2, r2, #2
 8009800:	300c      	adds	r0, #12
 8009802:	f000 fc23 	bl	800a04c <memcpy>
 8009806:	4621      	mov	r1, r4
 8009808:	4638      	mov	r0, r7
 800980a:	f7ff ffa5 	bl	8009758 <_Bfree>
 800980e:	4644      	mov	r4, r8
 8009810:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009814:	3501      	adds	r5, #1
 8009816:	615e      	str	r6, [r3, #20]
 8009818:	6125      	str	r5, [r4, #16]
 800981a:	4620      	mov	r0, r4
 800981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009820:	0800a840 	.word	0x0800a840
 8009824:	0800a851 	.word	0x0800a851

08009828 <__hi0bits>:
 8009828:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800982c:	4603      	mov	r3, r0
 800982e:	bf36      	itet	cc
 8009830:	0403      	lslcc	r3, r0, #16
 8009832:	2000      	movcs	r0, #0
 8009834:	2010      	movcc	r0, #16
 8009836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800983a:	bf3c      	itt	cc
 800983c:	021b      	lslcc	r3, r3, #8
 800983e:	3008      	addcc	r0, #8
 8009840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009844:	bf3c      	itt	cc
 8009846:	011b      	lslcc	r3, r3, #4
 8009848:	3004      	addcc	r0, #4
 800984a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800984e:	bf3c      	itt	cc
 8009850:	009b      	lslcc	r3, r3, #2
 8009852:	3002      	addcc	r0, #2
 8009854:	2b00      	cmp	r3, #0
 8009856:	db05      	blt.n	8009864 <__hi0bits+0x3c>
 8009858:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800985c:	f100 0001 	add.w	r0, r0, #1
 8009860:	bf08      	it	eq
 8009862:	2020      	moveq	r0, #32
 8009864:	4770      	bx	lr

08009866 <__lo0bits>:
 8009866:	6803      	ldr	r3, [r0, #0]
 8009868:	4602      	mov	r2, r0
 800986a:	f013 0007 	ands.w	r0, r3, #7
 800986e:	d00b      	beq.n	8009888 <__lo0bits+0x22>
 8009870:	07d9      	lsls	r1, r3, #31
 8009872:	d421      	bmi.n	80098b8 <__lo0bits+0x52>
 8009874:	0798      	lsls	r0, r3, #30
 8009876:	bf49      	itett	mi
 8009878:	085b      	lsrmi	r3, r3, #1
 800987a:	089b      	lsrpl	r3, r3, #2
 800987c:	2001      	movmi	r0, #1
 800987e:	6013      	strmi	r3, [r2, #0]
 8009880:	bf5c      	itt	pl
 8009882:	6013      	strpl	r3, [r2, #0]
 8009884:	2002      	movpl	r0, #2
 8009886:	4770      	bx	lr
 8009888:	b299      	uxth	r1, r3
 800988a:	b909      	cbnz	r1, 8009890 <__lo0bits+0x2a>
 800988c:	0c1b      	lsrs	r3, r3, #16
 800988e:	2010      	movs	r0, #16
 8009890:	b2d9      	uxtb	r1, r3
 8009892:	b909      	cbnz	r1, 8009898 <__lo0bits+0x32>
 8009894:	3008      	adds	r0, #8
 8009896:	0a1b      	lsrs	r3, r3, #8
 8009898:	0719      	lsls	r1, r3, #28
 800989a:	bf04      	itt	eq
 800989c:	091b      	lsreq	r3, r3, #4
 800989e:	3004      	addeq	r0, #4
 80098a0:	0799      	lsls	r1, r3, #30
 80098a2:	bf04      	itt	eq
 80098a4:	089b      	lsreq	r3, r3, #2
 80098a6:	3002      	addeq	r0, #2
 80098a8:	07d9      	lsls	r1, r3, #31
 80098aa:	d403      	bmi.n	80098b4 <__lo0bits+0x4e>
 80098ac:	085b      	lsrs	r3, r3, #1
 80098ae:	f100 0001 	add.w	r0, r0, #1
 80098b2:	d003      	beq.n	80098bc <__lo0bits+0x56>
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	4770      	bx	lr
 80098b8:	2000      	movs	r0, #0
 80098ba:	4770      	bx	lr
 80098bc:	2020      	movs	r0, #32
 80098be:	4770      	bx	lr

080098c0 <__i2b>:
 80098c0:	b510      	push	{r4, lr}
 80098c2:	460c      	mov	r4, r1
 80098c4:	2101      	movs	r1, #1
 80098c6:	f7ff ff07 	bl	80096d8 <_Balloc>
 80098ca:	4602      	mov	r2, r0
 80098cc:	b928      	cbnz	r0, 80098da <__i2b+0x1a>
 80098ce:	4b05      	ldr	r3, [pc, #20]	@ (80098e4 <__i2b+0x24>)
 80098d0:	4805      	ldr	r0, [pc, #20]	@ (80098e8 <__i2b+0x28>)
 80098d2:	f240 1145 	movw	r1, #325	@ 0x145
 80098d6:	f000 fbc7 	bl	800a068 <__assert_func>
 80098da:	2301      	movs	r3, #1
 80098dc:	6144      	str	r4, [r0, #20]
 80098de:	6103      	str	r3, [r0, #16]
 80098e0:	bd10      	pop	{r4, pc}
 80098e2:	bf00      	nop
 80098e4:	0800a840 	.word	0x0800a840
 80098e8:	0800a851 	.word	0x0800a851

080098ec <__multiply>:
 80098ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f0:	4617      	mov	r7, r2
 80098f2:	690a      	ldr	r2, [r1, #16]
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	bfa8      	it	ge
 80098fa:	463b      	movge	r3, r7
 80098fc:	4689      	mov	r9, r1
 80098fe:	bfa4      	itt	ge
 8009900:	460f      	movge	r7, r1
 8009902:	4699      	movge	r9, r3
 8009904:	693d      	ldr	r5, [r7, #16]
 8009906:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	6879      	ldr	r1, [r7, #4]
 800990e:	eb05 060a 	add.w	r6, r5, sl
 8009912:	42b3      	cmp	r3, r6
 8009914:	b085      	sub	sp, #20
 8009916:	bfb8      	it	lt
 8009918:	3101      	addlt	r1, #1
 800991a:	f7ff fedd 	bl	80096d8 <_Balloc>
 800991e:	b930      	cbnz	r0, 800992e <__multiply+0x42>
 8009920:	4602      	mov	r2, r0
 8009922:	4b41      	ldr	r3, [pc, #260]	@ (8009a28 <__multiply+0x13c>)
 8009924:	4841      	ldr	r0, [pc, #260]	@ (8009a2c <__multiply+0x140>)
 8009926:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800992a:	f000 fb9d 	bl	800a068 <__assert_func>
 800992e:	f100 0414 	add.w	r4, r0, #20
 8009932:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009936:	4623      	mov	r3, r4
 8009938:	2200      	movs	r2, #0
 800993a:	4573      	cmp	r3, lr
 800993c:	d320      	bcc.n	8009980 <__multiply+0x94>
 800993e:	f107 0814 	add.w	r8, r7, #20
 8009942:	f109 0114 	add.w	r1, r9, #20
 8009946:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800994a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800994e:	9302      	str	r3, [sp, #8]
 8009950:	1beb      	subs	r3, r5, r7
 8009952:	3b15      	subs	r3, #21
 8009954:	f023 0303 	bic.w	r3, r3, #3
 8009958:	3304      	adds	r3, #4
 800995a:	3715      	adds	r7, #21
 800995c:	42bd      	cmp	r5, r7
 800995e:	bf38      	it	cc
 8009960:	2304      	movcc	r3, #4
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	9b02      	ldr	r3, [sp, #8]
 8009966:	9103      	str	r1, [sp, #12]
 8009968:	428b      	cmp	r3, r1
 800996a:	d80c      	bhi.n	8009986 <__multiply+0x9a>
 800996c:	2e00      	cmp	r6, #0
 800996e:	dd03      	ble.n	8009978 <__multiply+0x8c>
 8009970:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009974:	2b00      	cmp	r3, #0
 8009976:	d055      	beq.n	8009a24 <__multiply+0x138>
 8009978:	6106      	str	r6, [r0, #16]
 800997a:	b005      	add	sp, #20
 800997c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009980:	f843 2b04 	str.w	r2, [r3], #4
 8009984:	e7d9      	b.n	800993a <__multiply+0x4e>
 8009986:	f8b1 a000 	ldrh.w	sl, [r1]
 800998a:	f1ba 0f00 	cmp.w	sl, #0
 800998e:	d01f      	beq.n	80099d0 <__multiply+0xe4>
 8009990:	46c4      	mov	ip, r8
 8009992:	46a1      	mov	r9, r4
 8009994:	2700      	movs	r7, #0
 8009996:	f85c 2b04 	ldr.w	r2, [ip], #4
 800999a:	f8d9 3000 	ldr.w	r3, [r9]
 800999e:	fa1f fb82 	uxth.w	fp, r2
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80099a8:	443b      	add	r3, r7
 80099aa:	f8d9 7000 	ldr.w	r7, [r9]
 80099ae:	0c12      	lsrs	r2, r2, #16
 80099b0:	0c3f      	lsrs	r7, r7, #16
 80099b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80099b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099c0:	4565      	cmp	r5, ip
 80099c2:	f849 3b04 	str.w	r3, [r9], #4
 80099c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80099ca:	d8e4      	bhi.n	8009996 <__multiply+0xaa>
 80099cc:	9b01      	ldr	r3, [sp, #4]
 80099ce:	50e7      	str	r7, [r4, r3]
 80099d0:	9b03      	ldr	r3, [sp, #12]
 80099d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80099d6:	3104      	adds	r1, #4
 80099d8:	f1b9 0f00 	cmp.w	r9, #0
 80099dc:	d020      	beq.n	8009a20 <__multiply+0x134>
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	4647      	mov	r7, r8
 80099e2:	46a4      	mov	ip, r4
 80099e4:	f04f 0a00 	mov.w	sl, #0
 80099e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80099ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80099f0:	fb09 220b 	mla	r2, r9, fp, r2
 80099f4:	4452      	add	r2, sl
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099fc:	f84c 3b04 	str.w	r3, [ip], #4
 8009a00:	f857 3b04 	ldr.w	r3, [r7], #4
 8009a04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a08:	f8bc 3000 	ldrh.w	r3, [ip]
 8009a0c:	fb09 330a 	mla	r3, r9, sl, r3
 8009a10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009a14:	42bd      	cmp	r5, r7
 8009a16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a1a:	d8e5      	bhi.n	80099e8 <__multiply+0xfc>
 8009a1c:	9a01      	ldr	r2, [sp, #4]
 8009a1e:	50a3      	str	r3, [r4, r2]
 8009a20:	3404      	adds	r4, #4
 8009a22:	e79f      	b.n	8009964 <__multiply+0x78>
 8009a24:	3e01      	subs	r6, #1
 8009a26:	e7a1      	b.n	800996c <__multiply+0x80>
 8009a28:	0800a840 	.word	0x0800a840
 8009a2c:	0800a851 	.word	0x0800a851

08009a30 <__pow5mult>:
 8009a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	4615      	mov	r5, r2
 8009a36:	f012 0203 	ands.w	r2, r2, #3
 8009a3a:	4607      	mov	r7, r0
 8009a3c:	460e      	mov	r6, r1
 8009a3e:	d007      	beq.n	8009a50 <__pow5mult+0x20>
 8009a40:	4c25      	ldr	r4, [pc, #148]	@ (8009ad8 <__pow5mult+0xa8>)
 8009a42:	3a01      	subs	r2, #1
 8009a44:	2300      	movs	r3, #0
 8009a46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a4a:	f7ff fea7 	bl	800979c <__multadd>
 8009a4e:	4606      	mov	r6, r0
 8009a50:	10ad      	asrs	r5, r5, #2
 8009a52:	d03d      	beq.n	8009ad0 <__pow5mult+0xa0>
 8009a54:	69fc      	ldr	r4, [r7, #28]
 8009a56:	b97c      	cbnz	r4, 8009a78 <__pow5mult+0x48>
 8009a58:	2010      	movs	r0, #16
 8009a5a:	f7ff fd87 	bl	800956c <malloc>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	61f8      	str	r0, [r7, #28]
 8009a62:	b928      	cbnz	r0, 8009a70 <__pow5mult+0x40>
 8009a64:	4b1d      	ldr	r3, [pc, #116]	@ (8009adc <__pow5mult+0xac>)
 8009a66:	481e      	ldr	r0, [pc, #120]	@ (8009ae0 <__pow5mult+0xb0>)
 8009a68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a6c:	f000 fafc 	bl	800a068 <__assert_func>
 8009a70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a74:	6004      	str	r4, [r0, #0]
 8009a76:	60c4      	str	r4, [r0, #12]
 8009a78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a80:	b94c      	cbnz	r4, 8009a96 <__pow5mult+0x66>
 8009a82:	f240 2171 	movw	r1, #625	@ 0x271
 8009a86:	4638      	mov	r0, r7
 8009a88:	f7ff ff1a 	bl	80098c0 <__i2b>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a92:	4604      	mov	r4, r0
 8009a94:	6003      	str	r3, [r0, #0]
 8009a96:	f04f 0900 	mov.w	r9, #0
 8009a9a:	07eb      	lsls	r3, r5, #31
 8009a9c:	d50a      	bpl.n	8009ab4 <__pow5mult+0x84>
 8009a9e:	4631      	mov	r1, r6
 8009aa0:	4622      	mov	r2, r4
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	f7ff ff22 	bl	80098ec <__multiply>
 8009aa8:	4631      	mov	r1, r6
 8009aaa:	4680      	mov	r8, r0
 8009aac:	4638      	mov	r0, r7
 8009aae:	f7ff fe53 	bl	8009758 <_Bfree>
 8009ab2:	4646      	mov	r6, r8
 8009ab4:	106d      	asrs	r5, r5, #1
 8009ab6:	d00b      	beq.n	8009ad0 <__pow5mult+0xa0>
 8009ab8:	6820      	ldr	r0, [r4, #0]
 8009aba:	b938      	cbnz	r0, 8009acc <__pow5mult+0x9c>
 8009abc:	4622      	mov	r2, r4
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	f7ff ff13 	bl	80098ec <__multiply>
 8009ac6:	6020      	str	r0, [r4, #0]
 8009ac8:	f8c0 9000 	str.w	r9, [r0]
 8009acc:	4604      	mov	r4, r0
 8009ace:	e7e4      	b.n	8009a9a <__pow5mult+0x6a>
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad6:	bf00      	nop
 8009ad8:	0800a904 	.word	0x0800a904
 8009adc:	0800a7d1 	.word	0x0800a7d1
 8009ae0:	0800a851 	.word	0x0800a851

08009ae4 <__lshift>:
 8009ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae8:	460c      	mov	r4, r1
 8009aea:	6849      	ldr	r1, [r1, #4]
 8009aec:	6923      	ldr	r3, [r4, #16]
 8009aee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009af2:	68a3      	ldr	r3, [r4, #8]
 8009af4:	4607      	mov	r7, r0
 8009af6:	4691      	mov	r9, r2
 8009af8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009afc:	f108 0601 	add.w	r6, r8, #1
 8009b00:	42b3      	cmp	r3, r6
 8009b02:	db0b      	blt.n	8009b1c <__lshift+0x38>
 8009b04:	4638      	mov	r0, r7
 8009b06:	f7ff fde7 	bl	80096d8 <_Balloc>
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	b948      	cbnz	r0, 8009b22 <__lshift+0x3e>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	4b28      	ldr	r3, [pc, #160]	@ (8009bb4 <__lshift+0xd0>)
 8009b12:	4829      	ldr	r0, [pc, #164]	@ (8009bb8 <__lshift+0xd4>)
 8009b14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009b18:	f000 faa6 	bl	800a068 <__assert_func>
 8009b1c:	3101      	adds	r1, #1
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	e7ee      	b.n	8009b00 <__lshift+0x1c>
 8009b22:	2300      	movs	r3, #0
 8009b24:	f100 0114 	add.w	r1, r0, #20
 8009b28:	f100 0210 	add.w	r2, r0, #16
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	4553      	cmp	r3, sl
 8009b30:	db33      	blt.n	8009b9a <__lshift+0xb6>
 8009b32:	6920      	ldr	r0, [r4, #16]
 8009b34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b38:	f104 0314 	add.w	r3, r4, #20
 8009b3c:	f019 091f 	ands.w	r9, r9, #31
 8009b40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b48:	d02b      	beq.n	8009ba2 <__lshift+0xbe>
 8009b4a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b4e:	468a      	mov	sl, r1
 8009b50:	2200      	movs	r2, #0
 8009b52:	6818      	ldr	r0, [r3, #0]
 8009b54:	fa00 f009 	lsl.w	r0, r0, r9
 8009b58:	4310      	orrs	r0, r2
 8009b5a:	f84a 0b04 	str.w	r0, [sl], #4
 8009b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b62:	459c      	cmp	ip, r3
 8009b64:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b68:	d8f3      	bhi.n	8009b52 <__lshift+0x6e>
 8009b6a:	ebac 0304 	sub.w	r3, ip, r4
 8009b6e:	3b15      	subs	r3, #21
 8009b70:	f023 0303 	bic.w	r3, r3, #3
 8009b74:	3304      	adds	r3, #4
 8009b76:	f104 0015 	add.w	r0, r4, #21
 8009b7a:	4560      	cmp	r0, ip
 8009b7c:	bf88      	it	hi
 8009b7e:	2304      	movhi	r3, #4
 8009b80:	50ca      	str	r2, [r1, r3]
 8009b82:	b10a      	cbz	r2, 8009b88 <__lshift+0xa4>
 8009b84:	f108 0602 	add.w	r6, r8, #2
 8009b88:	3e01      	subs	r6, #1
 8009b8a:	4638      	mov	r0, r7
 8009b8c:	612e      	str	r6, [r5, #16]
 8009b8e:	4621      	mov	r1, r4
 8009b90:	f7ff fde2 	bl	8009758 <_Bfree>
 8009b94:	4628      	mov	r0, r5
 8009b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	e7c5      	b.n	8009b2e <__lshift+0x4a>
 8009ba2:	3904      	subs	r1, #4
 8009ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ba8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bac:	459c      	cmp	ip, r3
 8009bae:	d8f9      	bhi.n	8009ba4 <__lshift+0xc0>
 8009bb0:	e7ea      	b.n	8009b88 <__lshift+0xa4>
 8009bb2:	bf00      	nop
 8009bb4:	0800a840 	.word	0x0800a840
 8009bb8:	0800a851 	.word	0x0800a851

08009bbc <__mcmp>:
 8009bbc:	690a      	ldr	r2, [r1, #16]
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	6900      	ldr	r0, [r0, #16]
 8009bc2:	1a80      	subs	r0, r0, r2
 8009bc4:	b530      	push	{r4, r5, lr}
 8009bc6:	d10e      	bne.n	8009be6 <__mcmp+0x2a>
 8009bc8:	3314      	adds	r3, #20
 8009bca:	3114      	adds	r1, #20
 8009bcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009bd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009bd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009bd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009bdc:	4295      	cmp	r5, r2
 8009bde:	d003      	beq.n	8009be8 <__mcmp+0x2c>
 8009be0:	d205      	bcs.n	8009bee <__mcmp+0x32>
 8009be2:	f04f 30ff 	mov.w	r0, #4294967295
 8009be6:	bd30      	pop	{r4, r5, pc}
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	d3f3      	bcc.n	8009bd4 <__mcmp+0x18>
 8009bec:	e7fb      	b.n	8009be6 <__mcmp+0x2a>
 8009bee:	2001      	movs	r0, #1
 8009bf0:	e7f9      	b.n	8009be6 <__mcmp+0x2a>
	...

08009bf4 <__mdiff>:
 8009bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf8:	4689      	mov	r9, r1
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	4648      	mov	r0, r9
 8009c00:	4614      	mov	r4, r2
 8009c02:	f7ff ffdb 	bl	8009bbc <__mcmp>
 8009c06:	1e05      	subs	r5, r0, #0
 8009c08:	d112      	bne.n	8009c30 <__mdiff+0x3c>
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f7ff fd63 	bl	80096d8 <_Balloc>
 8009c12:	4602      	mov	r2, r0
 8009c14:	b928      	cbnz	r0, 8009c22 <__mdiff+0x2e>
 8009c16:	4b3f      	ldr	r3, [pc, #252]	@ (8009d14 <__mdiff+0x120>)
 8009c18:	f240 2137 	movw	r1, #567	@ 0x237
 8009c1c:	483e      	ldr	r0, [pc, #248]	@ (8009d18 <__mdiff+0x124>)
 8009c1e:	f000 fa23 	bl	800a068 <__assert_func>
 8009c22:	2301      	movs	r3, #1
 8009c24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c28:	4610      	mov	r0, r2
 8009c2a:	b003      	add	sp, #12
 8009c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c30:	bfbc      	itt	lt
 8009c32:	464b      	movlt	r3, r9
 8009c34:	46a1      	movlt	r9, r4
 8009c36:	4630      	mov	r0, r6
 8009c38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c3c:	bfba      	itte	lt
 8009c3e:	461c      	movlt	r4, r3
 8009c40:	2501      	movlt	r5, #1
 8009c42:	2500      	movge	r5, #0
 8009c44:	f7ff fd48 	bl	80096d8 <_Balloc>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	b918      	cbnz	r0, 8009c54 <__mdiff+0x60>
 8009c4c:	4b31      	ldr	r3, [pc, #196]	@ (8009d14 <__mdiff+0x120>)
 8009c4e:	f240 2145 	movw	r1, #581	@ 0x245
 8009c52:	e7e3      	b.n	8009c1c <__mdiff+0x28>
 8009c54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c58:	6926      	ldr	r6, [r4, #16]
 8009c5a:	60c5      	str	r5, [r0, #12]
 8009c5c:	f109 0310 	add.w	r3, r9, #16
 8009c60:	f109 0514 	add.w	r5, r9, #20
 8009c64:	f104 0e14 	add.w	lr, r4, #20
 8009c68:	f100 0b14 	add.w	fp, r0, #20
 8009c6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c74:	9301      	str	r3, [sp, #4]
 8009c76:	46d9      	mov	r9, fp
 8009c78:	f04f 0c00 	mov.w	ip, #0
 8009c7c:	9b01      	ldr	r3, [sp, #4]
 8009c7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	fa1f f38a 	uxth.w	r3, sl
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	b283      	uxth	r3, r0
 8009c90:	1acb      	subs	r3, r1, r3
 8009c92:	0c00      	lsrs	r0, r0, #16
 8009c94:	4463      	add	r3, ip
 8009c96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ca4:	4576      	cmp	r6, lr
 8009ca6:	f849 3b04 	str.w	r3, [r9], #4
 8009caa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cae:	d8e5      	bhi.n	8009c7c <__mdiff+0x88>
 8009cb0:	1b33      	subs	r3, r6, r4
 8009cb2:	3b15      	subs	r3, #21
 8009cb4:	f023 0303 	bic.w	r3, r3, #3
 8009cb8:	3415      	adds	r4, #21
 8009cba:	3304      	adds	r3, #4
 8009cbc:	42a6      	cmp	r6, r4
 8009cbe:	bf38      	it	cc
 8009cc0:	2304      	movcc	r3, #4
 8009cc2:	441d      	add	r5, r3
 8009cc4:	445b      	add	r3, fp
 8009cc6:	461e      	mov	r6, r3
 8009cc8:	462c      	mov	r4, r5
 8009cca:	4544      	cmp	r4, r8
 8009ccc:	d30e      	bcc.n	8009cec <__mdiff+0xf8>
 8009cce:	f108 0103 	add.w	r1, r8, #3
 8009cd2:	1b49      	subs	r1, r1, r5
 8009cd4:	f021 0103 	bic.w	r1, r1, #3
 8009cd8:	3d03      	subs	r5, #3
 8009cda:	45a8      	cmp	r8, r5
 8009cdc:	bf38      	it	cc
 8009cde:	2100      	movcc	r1, #0
 8009ce0:	440b      	add	r3, r1
 8009ce2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ce6:	b191      	cbz	r1, 8009d0e <__mdiff+0x11a>
 8009ce8:	6117      	str	r7, [r2, #16]
 8009cea:	e79d      	b.n	8009c28 <__mdiff+0x34>
 8009cec:	f854 1b04 	ldr.w	r1, [r4], #4
 8009cf0:	46e6      	mov	lr, ip
 8009cf2:	0c08      	lsrs	r0, r1, #16
 8009cf4:	fa1c fc81 	uxtah	ip, ip, r1
 8009cf8:	4471      	add	r1, lr
 8009cfa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009cfe:	b289      	uxth	r1, r1
 8009d00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d04:	f846 1b04 	str.w	r1, [r6], #4
 8009d08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d0c:	e7dd      	b.n	8009cca <__mdiff+0xd6>
 8009d0e:	3f01      	subs	r7, #1
 8009d10:	e7e7      	b.n	8009ce2 <__mdiff+0xee>
 8009d12:	bf00      	nop
 8009d14:	0800a840 	.word	0x0800a840
 8009d18:	0800a851 	.word	0x0800a851

08009d1c <__d2b>:
 8009d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d20:	460f      	mov	r7, r1
 8009d22:	2101      	movs	r1, #1
 8009d24:	ec59 8b10 	vmov	r8, r9, d0
 8009d28:	4616      	mov	r6, r2
 8009d2a:	f7ff fcd5 	bl	80096d8 <_Balloc>
 8009d2e:	4604      	mov	r4, r0
 8009d30:	b930      	cbnz	r0, 8009d40 <__d2b+0x24>
 8009d32:	4602      	mov	r2, r0
 8009d34:	4b23      	ldr	r3, [pc, #140]	@ (8009dc4 <__d2b+0xa8>)
 8009d36:	4824      	ldr	r0, [pc, #144]	@ (8009dc8 <__d2b+0xac>)
 8009d38:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d3c:	f000 f994 	bl	800a068 <__assert_func>
 8009d40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d48:	b10d      	cbz	r5, 8009d4e <__d2b+0x32>
 8009d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	f1b8 0300 	subs.w	r3, r8, #0
 8009d54:	d023      	beq.n	8009d9e <__d2b+0x82>
 8009d56:	4668      	mov	r0, sp
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	f7ff fd84 	bl	8009866 <__lo0bits>
 8009d5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d62:	b1d0      	cbz	r0, 8009d9a <__d2b+0x7e>
 8009d64:	f1c0 0320 	rsb	r3, r0, #32
 8009d68:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6c:	430b      	orrs	r3, r1
 8009d6e:	40c2      	lsrs	r2, r0
 8009d70:	6163      	str	r3, [r4, #20]
 8009d72:	9201      	str	r2, [sp, #4]
 8009d74:	9b01      	ldr	r3, [sp, #4]
 8009d76:	61a3      	str	r3, [r4, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bf0c      	ite	eq
 8009d7c:	2201      	moveq	r2, #1
 8009d7e:	2202      	movne	r2, #2
 8009d80:	6122      	str	r2, [r4, #16]
 8009d82:	b1a5      	cbz	r5, 8009dae <__d2b+0x92>
 8009d84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d88:	4405      	add	r5, r0
 8009d8a:	603d      	str	r5, [r7, #0]
 8009d8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d90:	6030      	str	r0, [r6, #0]
 8009d92:	4620      	mov	r0, r4
 8009d94:	b003      	add	sp, #12
 8009d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d9a:	6161      	str	r1, [r4, #20]
 8009d9c:	e7ea      	b.n	8009d74 <__d2b+0x58>
 8009d9e:	a801      	add	r0, sp, #4
 8009da0:	f7ff fd61 	bl	8009866 <__lo0bits>
 8009da4:	9b01      	ldr	r3, [sp, #4]
 8009da6:	6163      	str	r3, [r4, #20]
 8009da8:	3020      	adds	r0, #32
 8009daa:	2201      	movs	r2, #1
 8009dac:	e7e8      	b.n	8009d80 <__d2b+0x64>
 8009dae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009db2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009db6:	6038      	str	r0, [r7, #0]
 8009db8:	6918      	ldr	r0, [r3, #16]
 8009dba:	f7ff fd35 	bl	8009828 <__hi0bits>
 8009dbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dc2:	e7e5      	b.n	8009d90 <__d2b+0x74>
 8009dc4:	0800a840 	.word	0x0800a840
 8009dc8:	0800a851 	.word	0x0800a851

08009dcc <__sflush_r>:
 8009dcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd4:	0716      	lsls	r6, r2, #28
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	460c      	mov	r4, r1
 8009dda:	d454      	bmi.n	8009e86 <__sflush_r+0xba>
 8009ddc:	684b      	ldr	r3, [r1, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dc02      	bgt.n	8009de8 <__sflush_r+0x1c>
 8009de2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	dd48      	ble.n	8009e7a <__sflush_r+0xae>
 8009de8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009dea:	2e00      	cmp	r6, #0
 8009dec:	d045      	beq.n	8009e7a <__sflush_r+0xae>
 8009dee:	2300      	movs	r3, #0
 8009df0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009df4:	682f      	ldr	r7, [r5, #0]
 8009df6:	6a21      	ldr	r1, [r4, #32]
 8009df8:	602b      	str	r3, [r5, #0]
 8009dfa:	d030      	beq.n	8009e5e <__sflush_r+0x92>
 8009dfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	0759      	lsls	r1, r3, #29
 8009e02:	d505      	bpl.n	8009e10 <__sflush_r+0x44>
 8009e04:	6863      	ldr	r3, [r4, #4]
 8009e06:	1ad2      	subs	r2, r2, r3
 8009e08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e0a:	b10b      	cbz	r3, 8009e10 <__sflush_r+0x44>
 8009e0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e0e:	1ad2      	subs	r2, r2, r3
 8009e10:	2300      	movs	r3, #0
 8009e12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e14:	6a21      	ldr	r1, [r4, #32]
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b0      	blx	r6
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	d106      	bne.n	8009e2e <__sflush_r+0x62>
 8009e20:	6829      	ldr	r1, [r5, #0]
 8009e22:	291d      	cmp	r1, #29
 8009e24:	d82b      	bhi.n	8009e7e <__sflush_r+0xb2>
 8009e26:	4a2a      	ldr	r2, [pc, #168]	@ (8009ed0 <__sflush_r+0x104>)
 8009e28:	40ca      	lsrs	r2, r1
 8009e2a:	07d6      	lsls	r6, r2, #31
 8009e2c:	d527      	bpl.n	8009e7e <__sflush_r+0xb2>
 8009e2e:	2200      	movs	r2, #0
 8009e30:	6062      	str	r2, [r4, #4]
 8009e32:	04d9      	lsls	r1, r3, #19
 8009e34:	6922      	ldr	r2, [r4, #16]
 8009e36:	6022      	str	r2, [r4, #0]
 8009e38:	d504      	bpl.n	8009e44 <__sflush_r+0x78>
 8009e3a:	1c42      	adds	r2, r0, #1
 8009e3c:	d101      	bne.n	8009e42 <__sflush_r+0x76>
 8009e3e:	682b      	ldr	r3, [r5, #0]
 8009e40:	b903      	cbnz	r3, 8009e44 <__sflush_r+0x78>
 8009e42:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e46:	602f      	str	r7, [r5, #0]
 8009e48:	b1b9      	cbz	r1, 8009e7a <__sflush_r+0xae>
 8009e4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e4e:	4299      	cmp	r1, r3
 8009e50:	d002      	beq.n	8009e58 <__sflush_r+0x8c>
 8009e52:	4628      	mov	r0, r5
 8009e54:	f7ff fb40 	bl	80094d8 <_free_r>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e5c:	e00d      	b.n	8009e7a <__sflush_r+0xae>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	4628      	mov	r0, r5
 8009e62:	47b0      	blx	r6
 8009e64:	4602      	mov	r2, r0
 8009e66:	1c50      	adds	r0, r2, #1
 8009e68:	d1c9      	bne.n	8009dfe <__sflush_r+0x32>
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d0c6      	beq.n	8009dfe <__sflush_r+0x32>
 8009e70:	2b1d      	cmp	r3, #29
 8009e72:	d001      	beq.n	8009e78 <__sflush_r+0xac>
 8009e74:	2b16      	cmp	r3, #22
 8009e76:	d11e      	bne.n	8009eb6 <__sflush_r+0xea>
 8009e78:	602f      	str	r7, [r5, #0]
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	e022      	b.n	8009ec4 <__sflush_r+0xf8>
 8009e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e82:	b21b      	sxth	r3, r3
 8009e84:	e01b      	b.n	8009ebe <__sflush_r+0xf2>
 8009e86:	690f      	ldr	r7, [r1, #16]
 8009e88:	2f00      	cmp	r7, #0
 8009e8a:	d0f6      	beq.n	8009e7a <__sflush_r+0xae>
 8009e8c:	0793      	lsls	r3, r2, #30
 8009e8e:	680e      	ldr	r6, [r1, #0]
 8009e90:	bf08      	it	eq
 8009e92:	694b      	ldreq	r3, [r1, #20]
 8009e94:	600f      	str	r7, [r1, #0]
 8009e96:	bf18      	it	ne
 8009e98:	2300      	movne	r3, #0
 8009e9a:	eba6 0807 	sub.w	r8, r6, r7
 8009e9e:	608b      	str	r3, [r1, #8]
 8009ea0:	f1b8 0f00 	cmp.w	r8, #0
 8009ea4:	dde9      	ble.n	8009e7a <__sflush_r+0xae>
 8009ea6:	6a21      	ldr	r1, [r4, #32]
 8009ea8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009eaa:	4643      	mov	r3, r8
 8009eac:	463a      	mov	r2, r7
 8009eae:	4628      	mov	r0, r5
 8009eb0:	47b0      	blx	r6
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	dc08      	bgt.n	8009ec8 <__sflush_r+0xfc>
 8009eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ebe:	81a3      	strh	r3, [r4, #12]
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec8:	4407      	add	r7, r0
 8009eca:	eba8 0800 	sub.w	r8, r8, r0
 8009ece:	e7e7      	b.n	8009ea0 <__sflush_r+0xd4>
 8009ed0:	20400001 	.word	0x20400001

08009ed4 <_fflush_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	690b      	ldr	r3, [r1, #16]
 8009ed8:	4605      	mov	r5, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	b913      	cbnz	r3, 8009ee4 <_fflush_r+0x10>
 8009ede:	2500      	movs	r5, #0
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	b118      	cbz	r0, 8009eee <_fflush_r+0x1a>
 8009ee6:	6a03      	ldr	r3, [r0, #32]
 8009ee8:	b90b      	cbnz	r3, 8009eee <_fflush_r+0x1a>
 8009eea:	f7fe fae7 	bl	80084bc <__sinit>
 8009eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0f3      	beq.n	8009ede <_fflush_r+0xa>
 8009ef6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ef8:	07d0      	lsls	r0, r2, #31
 8009efa:	d404      	bmi.n	8009f06 <_fflush_r+0x32>
 8009efc:	0599      	lsls	r1, r3, #22
 8009efe:	d402      	bmi.n	8009f06 <_fflush_r+0x32>
 8009f00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f02:	f7fe fc8e 	bl	8008822 <__retarget_lock_acquire_recursive>
 8009f06:	4628      	mov	r0, r5
 8009f08:	4621      	mov	r1, r4
 8009f0a:	f7ff ff5f 	bl	8009dcc <__sflush_r>
 8009f0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f10:	07da      	lsls	r2, r3, #31
 8009f12:	4605      	mov	r5, r0
 8009f14:	d4e4      	bmi.n	8009ee0 <_fflush_r+0xc>
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	059b      	lsls	r3, r3, #22
 8009f1a:	d4e1      	bmi.n	8009ee0 <_fflush_r+0xc>
 8009f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f1e:	f7fe fc81 	bl	8008824 <__retarget_lock_release_recursive>
 8009f22:	e7dd      	b.n	8009ee0 <_fflush_r+0xc>

08009f24 <__swhatbuf_r>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	460c      	mov	r4, r1
 8009f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2c:	2900      	cmp	r1, #0
 8009f2e:	b096      	sub	sp, #88	@ 0x58
 8009f30:	4615      	mov	r5, r2
 8009f32:	461e      	mov	r6, r3
 8009f34:	da0d      	bge.n	8009f52 <__swhatbuf_r+0x2e>
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f3c:	f04f 0100 	mov.w	r1, #0
 8009f40:	bf14      	ite	ne
 8009f42:	2340      	movne	r3, #64	@ 0x40
 8009f44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f48:	2000      	movs	r0, #0
 8009f4a:	6031      	str	r1, [r6, #0]
 8009f4c:	602b      	str	r3, [r5, #0]
 8009f4e:	b016      	add	sp, #88	@ 0x58
 8009f50:	bd70      	pop	{r4, r5, r6, pc}
 8009f52:	466a      	mov	r2, sp
 8009f54:	f000 f848 	bl	8009fe8 <_fstat_r>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	dbec      	blt.n	8009f36 <__swhatbuf_r+0x12>
 8009f5c:	9901      	ldr	r1, [sp, #4]
 8009f5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f66:	4259      	negs	r1, r3
 8009f68:	4159      	adcs	r1, r3
 8009f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f6e:	e7eb      	b.n	8009f48 <__swhatbuf_r+0x24>

08009f70 <__smakebuf_r>:
 8009f70:	898b      	ldrh	r3, [r1, #12]
 8009f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f74:	079d      	lsls	r5, r3, #30
 8009f76:	4606      	mov	r6, r0
 8009f78:	460c      	mov	r4, r1
 8009f7a:	d507      	bpl.n	8009f8c <__smakebuf_r+0x1c>
 8009f7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	6123      	str	r3, [r4, #16]
 8009f84:	2301      	movs	r3, #1
 8009f86:	6163      	str	r3, [r4, #20]
 8009f88:	b003      	add	sp, #12
 8009f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f8c:	ab01      	add	r3, sp, #4
 8009f8e:	466a      	mov	r2, sp
 8009f90:	f7ff ffc8 	bl	8009f24 <__swhatbuf_r>
 8009f94:	9f00      	ldr	r7, [sp, #0]
 8009f96:	4605      	mov	r5, r0
 8009f98:	4639      	mov	r1, r7
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7ff fb10 	bl	80095c0 <_malloc_r>
 8009fa0:	b948      	cbnz	r0, 8009fb6 <__smakebuf_r+0x46>
 8009fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fa6:	059a      	lsls	r2, r3, #22
 8009fa8:	d4ee      	bmi.n	8009f88 <__smakebuf_r+0x18>
 8009faa:	f023 0303 	bic.w	r3, r3, #3
 8009fae:	f043 0302 	orr.w	r3, r3, #2
 8009fb2:	81a3      	strh	r3, [r4, #12]
 8009fb4:	e7e2      	b.n	8009f7c <__smakebuf_r+0xc>
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	6020      	str	r0, [r4, #0]
 8009fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fbe:	81a3      	strh	r3, [r4, #12]
 8009fc0:	9b01      	ldr	r3, [sp, #4]
 8009fc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fc6:	b15b      	cbz	r3, 8009fe0 <__smakebuf_r+0x70>
 8009fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f000 f81d 	bl	800a00c <_isatty_r>
 8009fd2:	b128      	cbz	r0, 8009fe0 <__smakebuf_r+0x70>
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	f023 0303 	bic.w	r3, r3, #3
 8009fda:	f043 0301 	orr.w	r3, r3, #1
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	431d      	orrs	r5, r3
 8009fe4:	81a5      	strh	r5, [r4, #12]
 8009fe6:	e7cf      	b.n	8009f88 <__smakebuf_r+0x18>

08009fe8 <_fstat_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	4d07      	ldr	r5, [pc, #28]	@ (800a008 <_fstat_r+0x20>)
 8009fec:	2300      	movs	r3, #0
 8009fee:	4604      	mov	r4, r0
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	602b      	str	r3, [r5, #0]
 8009ff6:	f7f8 f9cb 	bl	8002390 <_fstat>
 8009ffa:	1c43      	adds	r3, r0, #1
 8009ffc:	d102      	bne.n	800a004 <_fstat_r+0x1c>
 8009ffe:	682b      	ldr	r3, [r5, #0]
 800a000:	b103      	cbz	r3, 800a004 <_fstat_r+0x1c>
 800a002:	6023      	str	r3, [r4, #0]
 800a004:	bd38      	pop	{r3, r4, r5, pc}
 800a006:	bf00      	nop
 800a008:	2000077c 	.word	0x2000077c

0800a00c <_isatty_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4d06      	ldr	r5, [pc, #24]	@ (800a028 <_isatty_r+0x1c>)
 800a010:	2300      	movs	r3, #0
 800a012:	4604      	mov	r4, r0
 800a014:	4608      	mov	r0, r1
 800a016:	602b      	str	r3, [r5, #0]
 800a018:	f7f8 f9ca 	bl	80023b0 <_isatty>
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	d102      	bne.n	800a026 <_isatty_r+0x1a>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	b103      	cbz	r3, 800a026 <_isatty_r+0x1a>
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	2000077c 	.word	0x2000077c

0800a02c <_sbrk_r>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	4d06      	ldr	r5, [pc, #24]	@ (800a048 <_sbrk_r+0x1c>)
 800a030:	2300      	movs	r3, #0
 800a032:	4604      	mov	r4, r0
 800a034:	4608      	mov	r0, r1
 800a036:	602b      	str	r3, [r5, #0]
 800a038:	f7f8 f9d2 	bl	80023e0 <_sbrk>
 800a03c:	1c43      	adds	r3, r0, #1
 800a03e:	d102      	bne.n	800a046 <_sbrk_r+0x1a>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	b103      	cbz	r3, 800a046 <_sbrk_r+0x1a>
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	bd38      	pop	{r3, r4, r5, pc}
 800a048:	2000077c 	.word	0x2000077c

0800a04c <memcpy>:
 800a04c:	440a      	add	r2, r1
 800a04e:	4291      	cmp	r1, r2
 800a050:	f100 33ff 	add.w	r3, r0, #4294967295
 800a054:	d100      	bne.n	800a058 <memcpy+0xc>
 800a056:	4770      	bx	lr
 800a058:	b510      	push	{r4, lr}
 800a05a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a05e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a062:	4291      	cmp	r1, r2
 800a064:	d1f9      	bne.n	800a05a <memcpy+0xe>
 800a066:	bd10      	pop	{r4, pc}

0800a068 <__assert_func>:
 800a068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a06a:	4614      	mov	r4, r2
 800a06c:	461a      	mov	r2, r3
 800a06e:	4b09      	ldr	r3, [pc, #36]	@ (800a094 <__assert_func+0x2c>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4605      	mov	r5, r0
 800a074:	68d8      	ldr	r0, [r3, #12]
 800a076:	b14c      	cbz	r4, 800a08c <__assert_func+0x24>
 800a078:	4b07      	ldr	r3, [pc, #28]	@ (800a098 <__assert_func+0x30>)
 800a07a:	9100      	str	r1, [sp, #0]
 800a07c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a080:	4906      	ldr	r1, [pc, #24]	@ (800a09c <__assert_func+0x34>)
 800a082:	462b      	mov	r3, r5
 800a084:	f000 f842 	bl	800a10c <fiprintf>
 800a088:	f000 f852 	bl	800a130 <abort>
 800a08c:	4b04      	ldr	r3, [pc, #16]	@ (800a0a0 <__assert_func+0x38>)
 800a08e:	461c      	mov	r4, r3
 800a090:	e7f3      	b.n	800a07a <__assert_func+0x12>
 800a092:	bf00      	nop
 800a094:	20000018 	.word	0x20000018
 800a098:	0800a8b4 	.word	0x0800a8b4
 800a09c:	0800a8c1 	.word	0x0800a8c1
 800a0a0:	0800a8ef 	.word	0x0800a8ef

0800a0a4 <_calloc_r>:
 800a0a4:	b570      	push	{r4, r5, r6, lr}
 800a0a6:	fba1 5402 	umull	r5, r4, r1, r2
 800a0aa:	b934      	cbnz	r4, 800a0ba <_calloc_r+0x16>
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	f7ff fa87 	bl	80095c0 <_malloc_r>
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	b928      	cbnz	r0, 800a0c2 <_calloc_r+0x1e>
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ba:	220c      	movs	r2, #12
 800a0bc:	6002      	str	r2, [r0, #0]
 800a0be:	2600      	movs	r6, #0
 800a0c0:	e7f9      	b.n	800a0b6 <_calloc_r+0x12>
 800a0c2:	462a      	mov	r2, r5
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	f7fe fb2e 	bl	8008726 <memset>
 800a0ca:	e7f4      	b.n	800a0b6 <_calloc_r+0x12>

0800a0cc <__ascii_mbtowc>:
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	b901      	cbnz	r1, 800a0d2 <__ascii_mbtowc+0x6>
 800a0d0:	a901      	add	r1, sp, #4
 800a0d2:	b142      	cbz	r2, 800a0e6 <__ascii_mbtowc+0x1a>
 800a0d4:	b14b      	cbz	r3, 800a0ea <__ascii_mbtowc+0x1e>
 800a0d6:	7813      	ldrb	r3, [r2, #0]
 800a0d8:	600b      	str	r3, [r1, #0]
 800a0da:	7812      	ldrb	r2, [r2, #0]
 800a0dc:	1e10      	subs	r0, r2, #0
 800a0de:	bf18      	it	ne
 800a0e0:	2001      	movne	r0, #1
 800a0e2:	b002      	add	sp, #8
 800a0e4:	4770      	bx	lr
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	e7fb      	b.n	800a0e2 <__ascii_mbtowc+0x16>
 800a0ea:	f06f 0001 	mvn.w	r0, #1
 800a0ee:	e7f8      	b.n	800a0e2 <__ascii_mbtowc+0x16>

0800a0f0 <__ascii_wctomb>:
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	4608      	mov	r0, r1
 800a0f4:	b141      	cbz	r1, 800a108 <__ascii_wctomb+0x18>
 800a0f6:	2aff      	cmp	r2, #255	@ 0xff
 800a0f8:	d904      	bls.n	800a104 <__ascii_wctomb+0x14>
 800a0fa:	228a      	movs	r2, #138	@ 0x8a
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a102:	4770      	bx	lr
 800a104:	700a      	strb	r2, [r1, #0]
 800a106:	2001      	movs	r0, #1
 800a108:	4770      	bx	lr
	...

0800a10c <fiprintf>:
 800a10c:	b40e      	push	{r1, r2, r3}
 800a10e:	b503      	push	{r0, r1, lr}
 800a110:	4601      	mov	r1, r0
 800a112:	ab03      	add	r3, sp, #12
 800a114:	4805      	ldr	r0, [pc, #20]	@ (800a12c <fiprintf+0x20>)
 800a116:	f853 2b04 	ldr.w	r2, [r3], #4
 800a11a:	6800      	ldr	r0, [r0, #0]
 800a11c:	9301      	str	r3, [sp, #4]
 800a11e:	f000 f837 	bl	800a190 <_vfiprintf_r>
 800a122:	b002      	add	sp, #8
 800a124:	f85d eb04 	ldr.w	lr, [sp], #4
 800a128:	b003      	add	sp, #12
 800a12a:	4770      	bx	lr
 800a12c:	20000018 	.word	0x20000018

0800a130 <abort>:
 800a130:	b508      	push	{r3, lr}
 800a132:	2006      	movs	r0, #6
 800a134:	f000 fa00 	bl	800a538 <raise>
 800a138:	2001      	movs	r0, #1
 800a13a:	f7f8 f8f5 	bl	8002328 <_exit>

0800a13e <__sfputc_r>:
 800a13e:	6893      	ldr	r3, [r2, #8]
 800a140:	3b01      	subs	r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	b410      	push	{r4}
 800a146:	6093      	str	r3, [r2, #8]
 800a148:	da08      	bge.n	800a15c <__sfputc_r+0x1e>
 800a14a:	6994      	ldr	r4, [r2, #24]
 800a14c:	42a3      	cmp	r3, r4
 800a14e:	db01      	blt.n	800a154 <__sfputc_r+0x16>
 800a150:	290a      	cmp	r1, #10
 800a152:	d103      	bne.n	800a15c <__sfputc_r+0x1e>
 800a154:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a158:	f000 b932 	b.w	800a3c0 <__swbuf_r>
 800a15c:	6813      	ldr	r3, [r2, #0]
 800a15e:	1c58      	adds	r0, r3, #1
 800a160:	6010      	str	r0, [r2, #0]
 800a162:	7019      	strb	r1, [r3, #0]
 800a164:	4608      	mov	r0, r1
 800a166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <__sfputs_r>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	4606      	mov	r6, r0
 800a170:	460f      	mov	r7, r1
 800a172:	4614      	mov	r4, r2
 800a174:	18d5      	adds	r5, r2, r3
 800a176:	42ac      	cmp	r4, r5
 800a178:	d101      	bne.n	800a17e <__sfputs_r+0x12>
 800a17a:	2000      	movs	r0, #0
 800a17c:	e007      	b.n	800a18e <__sfputs_r+0x22>
 800a17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a182:	463a      	mov	r2, r7
 800a184:	4630      	mov	r0, r6
 800a186:	f7ff ffda 	bl	800a13e <__sfputc_r>
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	d1f3      	bne.n	800a176 <__sfputs_r+0xa>
 800a18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a190 <_vfiprintf_r>:
 800a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	460d      	mov	r5, r1
 800a196:	b09d      	sub	sp, #116	@ 0x74
 800a198:	4614      	mov	r4, r2
 800a19a:	4698      	mov	r8, r3
 800a19c:	4606      	mov	r6, r0
 800a19e:	b118      	cbz	r0, 800a1a8 <_vfiprintf_r+0x18>
 800a1a0:	6a03      	ldr	r3, [r0, #32]
 800a1a2:	b90b      	cbnz	r3, 800a1a8 <_vfiprintf_r+0x18>
 800a1a4:	f7fe f98a 	bl	80084bc <__sinit>
 800a1a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1aa:	07d9      	lsls	r1, r3, #31
 800a1ac:	d405      	bmi.n	800a1ba <_vfiprintf_r+0x2a>
 800a1ae:	89ab      	ldrh	r3, [r5, #12]
 800a1b0:	059a      	lsls	r2, r3, #22
 800a1b2:	d402      	bmi.n	800a1ba <_vfiprintf_r+0x2a>
 800a1b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1b6:	f7fe fb34 	bl	8008822 <__retarget_lock_acquire_recursive>
 800a1ba:	89ab      	ldrh	r3, [r5, #12]
 800a1bc:	071b      	lsls	r3, r3, #28
 800a1be:	d501      	bpl.n	800a1c4 <_vfiprintf_r+0x34>
 800a1c0:	692b      	ldr	r3, [r5, #16]
 800a1c2:	b99b      	cbnz	r3, 800a1ec <_vfiprintf_r+0x5c>
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f000 f938 	bl	800a43c <__swsetup_r>
 800a1cc:	b170      	cbz	r0, 800a1ec <_vfiprintf_r+0x5c>
 800a1ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1d0:	07dc      	lsls	r4, r3, #31
 800a1d2:	d504      	bpl.n	800a1de <_vfiprintf_r+0x4e>
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d8:	b01d      	add	sp, #116	@ 0x74
 800a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	0598      	lsls	r0, r3, #22
 800a1e2:	d4f7      	bmi.n	800a1d4 <_vfiprintf_r+0x44>
 800a1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1e6:	f7fe fb1d 	bl	8008824 <__retarget_lock_release_recursive>
 800a1ea:	e7f3      	b.n	800a1d4 <_vfiprintf_r+0x44>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1f0:	2320      	movs	r3, #32
 800a1f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1fa:	2330      	movs	r3, #48	@ 0x30
 800a1fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a3ac <_vfiprintf_r+0x21c>
 800a200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a204:	f04f 0901 	mov.w	r9, #1
 800a208:	4623      	mov	r3, r4
 800a20a:	469a      	mov	sl, r3
 800a20c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a210:	b10a      	cbz	r2, 800a216 <_vfiprintf_r+0x86>
 800a212:	2a25      	cmp	r2, #37	@ 0x25
 800a214:	d1f9      	bne.n	800a20a <_vfiprintf_r+0x7a>
 800a216:	ebba 0b04 	subs.w	fp, sl, r4
 800a21a:	d00b      	beq.n	800a234 <_vfiprintf_r+0xa4>
 800a21c:	465b      	mov	r3, fp
 800a21e:	4622      	mov	r2, r4
 800a220:	4629      	mov	r1, r5
 800a222:	4630      	mov	r0, r6
 800a224:	f7ff ffa2 	bl	800a16c <__sfputs_r>
 800a228:	3001      	adds	r0, #1
 800a22a:	f000 80a7 	beq.w	800a37c <_vfiprintf_r+0x1ec>
 800a22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a230:	445a      	add	r2, fp
 800a232:	9209      	str	r2, [sp, #36]	@ 0x24
 800a234:	f89a 3000 	ldrb.w	r3, [sl]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 809f 	beq.w	800a37c <_vfiprintf_r+0x1ec>
 800a23e:	2300      	movs	r3, #0
 800a240:	f04f 32ff 	mov.w	r2, #4294967295
 800a244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a248:	f10a 0a01 	add.w	sl, sl, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	9307      	str	r3, [sp, #28]
 800a250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a254:	931a      	str	r3, [sp, #104]	@ 0x68
 800a256:	4654      	mov	r4, sl
 800a258:	2205      	movs	r2, #5
 800a25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25e:	4853      	ldr	r0, [pc, #332]	@ (800a3ac <_vfiprintf_r+0x21c>)
 800a260:	f7f5 ffb6 	bl	80001d0 <memchr>
 800a264:	9a04      	ldr	r2, [sp, #16]
 800a266:	b9d8      	cbnz	r0, 800a2a0 <_vfiprintf_r+0x110>
 800a268:	06d1      	lsls	r1, r2, #27
 800a26a:	bf44      	itt	mi
 800a26c:	2320      	movmi	r3, #32
 800a26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a272:	0713      	lsls	r3, r2, #28
 800a274:	bf44      	itt	mi
 800a276:	232b      	movmi	r3, #43	@ 0x2b
 800a278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a27c:	f89a 3000 	ldrb.w	r3, [sl]
 800a280:	2b2a      	cmp	r3, #42	@ 0x2a
 800a282:	d015      	beq.n	800a2b0 <_vfiprintf_r+0x120>
 800a284:	9a07      	ldr	r2, [sp, #28]
 800a286:	4654      	mov	r4, sl
 800a288:	2000      	movs	r0, #0
 800a28a:	f04f 0c0a 	mov.w	ip, #10
 800a28e:	4621      	mov	r1, r4
 800a290:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a294:	3b30      	subs	r3, #48	@ 0x30
 800a296:	2b09      	cmp	r3, #9
 800a298:	d94b      	bls.n	800a332 <_vfiprintf_r+0x1a2>
 800a29a:	b1b0      	cbz	r0, 800a2ca <_vfiprintf_r+0x13a>
 800a29c:	9207      	str	r2, [sp, #28]
 800a29e:	e014      	b.n	800a2ca <_vfiprintf_r+0x13a>
 800a2a0:	eba0 0308 	sub.w	r3, r0, r8
 800a2a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	46a2      	mov	sl, r4
 800a2ae:	e7d2      	b.n	800a256 <_vfiprintf_r+0xc6>
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	1d19      	adds	r1, r3, #4
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	9103      	str	r1, [sp, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bfbb      	ittet	lt
 800a2bc:	425b      	neglt	r3, r3
 800a2be:	f042 0202 	orrlt.w	r2, r2, #2
 800a2c2:	9307      	strge	r3, [sp, #28]
 800a2c4:	9307      	strlt	r3, [sp, #28]
 800a2c6:	bfb8      	it	lt
 800a2c8:	9204      	strlt	r2, [sp, #16]
 800a2ca:	7823      	ldrb	r3, [r4, #0]
 800a2cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2ce:	d10a      	bne.n	800a2e6 <_vfiprintf_r+0x156>
 800a2d0:	7863      	ldrb	r3, [r4, #1]
 800a2d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2d4:	d132      	bne.n	800a33c <_vfiprintf_r+0x1ac>
 800a2d6:	9b03      	ldr	r3, [sp, #12]
 800a2d8:	1d1a      	adds	r2, r3, #4
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	9203      	str	r2, [sp, #12]
 800a2de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2e2:	3402      	adds	r4, #2
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3bc <_vfiprintf_r+0x22c>
 800a2ea:	7821      	ldrb	r1, [r4, #0]
 800a2ec:	2203      	movs	r2, #3
 800a2ee:	4650      	mov	r0, sl
 800a2f0:	f7f5 ff6e 	bl	80001d0 <memchr>
 800a2f4:	b138      	cbz	r0, 800a306 <_vfiprintf_r+0x176>
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	eba0 000a 	sub.w	r0, r0, sl
 800a2fc:	2240      	movs	r2, #64	@ 0x40
 800a2fe:	4082      	lsls	r2, r0
 800a300:	4313      	orrs	r3, r2
 800a302:	3401      	adds	r4, #1
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a30a:	4829      	ldr	r0, [pc, #164]	@ (800a3b0 <_vfiprintf_r+0x220>)
 800a30c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a310:	2206      	movs	r2, #6
 800a312:	f7f5 ff5d 	bl	80001d0 <memchr>
 800a316:	2800      	cmp	r0, #0
 800a318:	d03f      	beq.n	800a39a <_vfiprintf_r+0x20a>
 800a31a:	4b26      	ldr	r3, [pc, #152]	@ (800a3b4 <_vfiprintf_r+0x224>)
 800a31c:	bb1b      	cbnz	r3, 800a366 <_vfiprintf_r+0x1d6>
 800a31e:	9b03      	ldr	r3, [sp, #12]
 800a320:	3307      	adds	r3, #7
 800a322:	f023 0307 	bic.w	r3, r3, #7
 800a326:	3308      	adds	r3, #8
 800a328:	9303      	str	r3, [sp, #12]
 800a32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a32c:	443b      	add	r3, r7
 800a32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a330:	e76a      	b.n	800a208 <_vfiprintf_r+0x78>
 800a332:	fb0c 3202 	mla	r2, ip, r2, r3
 800a336:	460c      	mov	r4, r1
 800a338:	2001      	movs	r0, #1
 800a33a:	e7a8      	b.n	800a28e <_vfiprintf_r+0xfe>
 800a33c:	2300      	movs	r3, #0
 800a33e:	3401      	adds	r4, #1
 800a340:	9305      	str	r3, [sp, #20]
 800a342:	4619      	mov	r1, r3
 800a344:	f04f 0c0a 	mov.w	ip, #10
 800a348:	4620      	mov	r0, r4
 800a34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a34e:	3a30      	subs	r2, #48	@ 0x30
 800a350:	2a09      	cmp	r2, #9
 800a352:	d903      	bls.n	800a35c <_vfiprintf_r+0x1cc>
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0c6      	beq.n	800a2e6 <_vfiprintf_r+0x156>
 800a358:	9105      	str	r1, [sp, #20]
 800a35a:	e7c4      	b.n	800a2e6 <_vfiprintf_r+0x156>
 800a35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a360:	4604      	mov	r4, r0
 800a362:	2301      	movs	r3, #1
 800a364:	e7f0      	b.n	800a348 <_vfiprintf_r+0x1b8>
 800a366:	ab03      	add	r3, sp, #12
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	462a      	mov	r2, r5
 800a36c:	4b12      	ldr	r3, [pc, #72]	@ (800a3b8 <_vfiprintf_r+0x228>)
 800a36e:	a904      	add	r1, sp, #16
 800a370:	4630      	mov	r0, r6
 800a372:	f7fd fc61 	bl	8007c38 <_printf_float>
 800a376:	4607      	mov	r7, r0
 800a378:	1c78      	adds	r0, r7, #1
 800a37a:	d1d6      	bne.n	800a32a <_vfiprintf_r+0x19a>
 800a37c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a37e:	07d9      	lsls	r1, r3, #31
 800a380:	d405      	bmi.n	800a38e <_vfiprintf_r+0x1fe>
 800a382:	89ab      	ldrh	r3, [r5, #12]
 800a384:	059a      	lsls	r2, r3, #22
 800a386:	d402      	bmi.n	800a38e <_vfiprintf_r+0x1fe>
 800a388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a38a:	f7fe fa4b 	bl	8008824 <__retarget_lock_release_recursive>
 800a38e:	89ab      	ldrh	r3, [r5, #12]
 800a390:	065b      	lsls	r3, r3, #25
 800a392:	f53f af1f 	bmi.w	800a1d4 <_vfiprintf_r+0x44>
 800a396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a398:	e71e      	b.n	800a1d8 <_vfiprintf_r+0x48>
 800a39a:	ab03      	add	r3, sp, #12
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	462a      	mov	r2, r5
 800a3a0:	4b05      	ldr	r3, [pc, #20]	@ (800a3b8 <_vfiprintf_r+0x228>)
 800a3a2:	a904      	add	r1, sp, #16
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f7fd fedf 	bl	8008168 <_printf_i>
 800a3aa:	e7e4      	b.n	800a376 <_vfiprintf_r+0x1e6>
 800a3ac:	0800a8f0 	.word	0x0800a8f0
 800a3b0:	0800a8fa 	.word	0x0800a8fa
 800a3b4:	08007c39 	.word	0x08007c39
 800a3b8:	0800a16d 	.word	0x0800a16d
 800a3bc:	0800a8f6 	.word	0x0800a8f6

0800a3c0 <__swbuf_r>:
 800a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c2:	460e      	mov	r6, r1
 800a3c4:	4614      	mov	r4, r2
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	b118      	cbz	r0, 800a3d2 <__swbuf_r+0x12>
 800a3ca:	6a03      	ldr	r3, [r0, #32]
 800a3cc:	b90b      	cbnz	r3, 800a3d2 <__swbuf_r+0x12>
 800a3ce:	f7fe f875 	bl	80084bc <__sinit>
 800a3d2:	69a3      	ldr	r3, [r4, #24]
 800a3d4:	60a3      	str	r3, [r4, #8]
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	071a      	lsls	r2, r3, #28
 800a3da:	d501      	bpl.n	800a3e0 <__swbuf_r+0x20>
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	b943      	cbnz	r3, 800a3f2 <__swbuf_r+0x32>
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f000 f82a 	bl	800a43c <__swsetup_r>
 800a3e8:	b118      	cbz	r0, 800a3f2 <__swbuf_r+0x32>
 800a3ea:	f04f 37ff 	mov.w	r7, #4294967295
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	6922      	ldr	r2, [r4, #16]
 800a3f6:	1a98      	subs	r0, r3, r2
 800a3f8:	6963      	ldr	r3, [r4, #20]
 800a3fa:	b2f6      	uxtb	r6, r6
 800a3fc:	4283      	cmp	r3, r0
 800a3fe:	4637      	mov	r7, r6
 800a400:	dc05      	bgt.n	800a40e <__swbuf_r+0x4e>
 800a402:	4621      	mov	r1, r4
 800a404:	4628      	mov	r0, r5
 800a406:	f7ff fd65 	bl	8009ed4 <_fflush_r>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d1ed      	bne.n	800a3ea <__swbuf_r+0x2a>
 800a40e:	68a3      	ldr	r3, [r4, #8]
 800a410:	3b01      	subs	r3, #1
 800a412:	60a3      	str	r3, [r4, #8]
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	6022      	str	r2, [r4, #0]
 800a41a:	701e      	strb	r6, [r3, #0]
 800a41c:	6962      	ldr	r2, [r4, #20]
 800a41e:	1c43      	adds	r3, r0, #1
 800a420:	429a      	cmp	r2, r3
 800a422:	d004      	beq.n	800a42e <__swbuf_r+0x6e>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	07db      	lsls	r3, r3, #31
 800a428:	d5e1      	bpl.n	800a3ee <__swbuf_r+0x2e>
 800a42a:	2e0a      	cmp	r6, #10
 800a42c:	d1df      	bne.n	800a3ee <__swbuf_r+0x2e>
 800a42e:	4621      	mov	r1, r4
 800a430:	4628      	mov	r0, r5
 800a432:	f7ff fd4f 	bl	8009ed4 <_fflush_r>
 800a436:	2800      	cmp	r0, #0
 800a438:	d0d9      	beq.n	800a3ee <__swbuf_r+0x2e>
 800a43a:	e7d6      	b.n	800a3ea <__swbuf_r+0x2a>

0800a43c <__swsetup_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4b29      	ldr	r3, [pc, #164]	@ (800a4e4 <__swsetup_r+0xa8>)
 800a440:	4605      	mov	r5, r0
 800a442:	6818      	ldr	r0, [r3, #0]
 800a444:	460c      	mov	r4, r1
 800a446:	b118      	cbz	r0, 800a450 <__swsetup_r+0x14>
 800a448:	6a03      	ldr	r3, [r0, #32]
 800a44a:	b90b      	cbnz	r3, 800a450 <__swsetup_r+0x14>
 800a44c:	f7fe f836 	bl	80084bc <__sinit>
 800a450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a454:	0719      	lsls	r1, r3, #28
 800a456:	d422      	bmi.n	800a49e <__swsetup_r+0x62>
 800a458:	06da      	lsls	r2, r3, #27
 800a45a:	d407      	bmi.n	800a46c <__swsetup_r+0x30>
 800a45c:	2209      	movs	r2, #9
 800a45e:	602a      	str	r2, [r5, #0]
 800a460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	f04f 30ff 	mov.w	r0, #4294967295
 800a46a:	e033      	b.n	800a4d4 <__swsetup_r+0x98>
 800a46c:	0758      	lsls	r0, r3, #29
 800a46e:	d512      	bpl.n	800a496 <__swsetup_r+0x5a>
 800a470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a472:	b141      	cbz	r1, 800a486 <__swsetup_r+0x4a>
 800a474:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a478:	4299      	cmp	r1, r3
 800a47a:	d002      	beq.n	800a482 <__swsetup_r+0x46>
 800a47c:	4628      	mov	r0, r5
 800a47e:	f7ff f82b 	bl	80094d8 <_free_r>
 800a482:	2300      	movs	r3, #0
 800a484:	6363      	str	r3, [r4, #52]	@ 0x34
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a48c:	81a3      	strh	r3, [r4, #12]
 800a48e:	2300      	movs	r3, #0
 800a490:	6063      	str	r3, [r4, #4]
 800a492:	6923      	ldr	r3, [r4, #16]
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	f043 0308 	orr.w	r3, r3, #8
 800a49c:	81a3      	strh	r3, [r4, #12]
 800a49e:	6923      	ldr	r3, [r4, #16]
 800a4a0:	b94b      	cbnz	r3, 800a4b6 <__swsetup_r+0x7a>
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a4a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4ac:	d003      	beq.n	800a4b6 <__swsetup_r+0x7a>
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f7ff fd5d 	bl	8009f70 <__smakebuf_r>
 800a4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ba:	f013 0201 	ands.w	r2, r3, #1
 800a4be:	d00a      	beq.n	800a4d6 <__swsetup_r+0x9a>
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	60a2      	str	r2, [r4, #8]
 800a4c4:	6962      	ldr	r2, [r4, #20]
 800a4c6:	4252      	negs	r2, r2
 800a4c8:	61a2      	str	r2, [r4, #24]
 800a4ca:	6922      	ldr	r2, [r4, #16]
 800a4cc:	b942      	cbnz	r2, 800a4e0 <__swsetup_r+0xa4>
 800a4ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4d2:	d1c5      	bne.n	800a460 <__swsetup_r+0x24>
 800a4d4:	bd38      	pop	{r3, r4, r5, pc}
 800a4d6:	0799      	lsls	r1, r3, #30
 800a4d8:	bf58      	it	pl
 800a4da:	6962      	ldrpl	r2, [r4, #20]
 800a4dc:	60a2      	str	r2, [r4, #8]
 800a4de:	e7f4      	b.n	800a4ca <__swsetup_r+0x8e>
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	e7f7      	b.n	800a4d4 <__swsetup_r+0x98>
 800a4e4:	20000018 	.word	0x20000018

0800a4e8 <_raise_r>:
 800a4e8:	291f      	cmp	r1, #31
 800a4ea:	b538      	push	{r3, r4, r5, lr}
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	d904      	bls.n	800a4fc <_raise_r+0x14>
 800a4f2:	2316      	movs	r3, #22
 800a4f4:	6003      	str	r3, [r0, #0]
 800a4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4fa:	bd38      	pop	{r3, r4, r5, pc}
 800a4fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a4fe:	b112      	cbz	r2, 800a506 <_raise_r+0x1e>
 800a500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a504:	b94b      	cbnz	r3, 800a51a <_raise_r+0x32>
 800a506:	4628      	mov	r0, r5
 800a508:	f000 f830 	bl	800a56c <_getpid_r>
 800a50c:	4622      	mov	r2, r4
 800a50e:	4601      	mov	r1, r0
 800a510:	4628      	mov	r0, r5
 800a512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a516:	f000 b817 	b.w	800a548 <_kill_r>
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d00a      	beq.n	800a534 <_raise_r+0x4c>
 800a51e:	1c59      	adds	r1, r3, #1
 800a520:	d103      	bne.n	800a52a <_raise_r+0x42>
 800a522:	2316      	movs	r3, #22
 800a524:	6003      	str	r3, [r0, #0]
 800a526:	2001      	movs	r0, #1
 800a528:	e7e7      	b.n	800a4fa <_raise_r+0x12>
 800a52a:	2100      	movs	r1, #0
 800a52c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a530:	4620      	mov	r0, r4
 800a532:	4798      	blx	r3
 800a534:	2000      	movs	r0, #0
 800a536:	e7e0      	b.n	800a4fa <_raise_r+0x12>

0800a538 <raise>:
 800a538:	4b02      	ldr	r3, [pc, #8]	@ (800a544 <raise+0xc>)
 800a53a:	4601      	mov	r1, r0
 800a53c:	6818      	ldr	r0, [r3, #0]
 800a53e:	f7ff bfd3 	b.w	800a4e8 <_raise_r>
 800a542:	bf00      	nop
 800a544:	20000018 	.word	0x20000018

0800a548 <_kill_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d07      	ldr	r5, [pc, #28]	@ (800a568 <_kill_r+0x20>)
 800a54c:	2300      	movs	r3, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	4608      	mov	r0, r1
 800a552:	4611      	mov	r1, r2
 800a554:	602b      	str	r3, [r5, #0]
 800a556:	f7f7 fed7 	bl	8002308 <_kill>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	d102      	bne.n	800a564 <_kill_r+0x1c>
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	b103      	cbz	r3, 800a564 <_kill_r+0x1c>
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	bd38      	pop	{r3, r4, r5, pc}
 800a566:	bf00      	nop
 800a568:	2000077c 	.word	0x2000077c

0800a56c <_getpid_r>:
 800a56c:	f7f7 bec4 	b.w	80022f8 <_getpid>

0800a570 <_init>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	bf00      	nop
 800a574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a576:	bc08      	pop	{r3}
 800a578:	469e      	mov	lr, r3
 800a57a:	4770      	bx	lr

0800a57c <_fini>:
 800a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57e:	bf00      	nop
 800a580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a582:	bc08      	pop	{r3}
 800a584:	469e      	mov	lr, r3
 800a586:	4770      	bx	lr
