var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"StateFeedbackController","ref":false,"files":[{"name":"StateFeedbackController.c","type":"source","group":"model","path":"C:\\Users\\nopla\\dev\\InvertedPendulum\\MATLAB\\Models\\StateFeedbackController_ert_rtw","tag":"","groupDisplay":"モデル ファイル","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: StateFeedbackController.c\r\n *\r\n * Code generated for Simulink model 'StateFeedbackController'.\r\n *\r\n * Model version                  : 1.282\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Mon Jun 16 12:38:20 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"StateFeedbackController.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* Model step function */\r\nreal_T StateFeedbackController_step(real_T arg_ref_x, real_T arg_x, real_T\r\n  arg_theta, real_T arg_gain_k[4])\r\n{\r\n  /* specified return value */\r\n  real_T arg_out;\r\n\r\n  /* Outport: '<Root>/out' incorporates:\r\n   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'\r\n   *  DotProduct: '<Root>/Dot Product'\r\n   *  Gain: '<Root>/Gain1'\r\n   *  Inport: '<Root>/GainK'\r\n   *  Inport: '<Root>/theta'\r\n   *  Inport: '<Root>/x'\r\n   *  Sum: '<Root>/Sum1'\r\n   *  Sum: '<S1>/Diff'\r\n   *  Sum: '<S2>/Diff'\r\n   *  UnitDelay: '<S1>/UD'\r\n   *  UnitDelay: '<S2>/UD'\r\n   *\r\n   * Block description for '<S1>/Diff':\r\n   *\r\n   *  Add in CPU\r\n   *\r\n   * Block description for '<S2>/Diff':\r\n   *\r\n   *  Add in CPU\r\n   *\r\n   * Block description for '<S1>/UD':\r\n   *\r\n   *  Store in Global RAM\r\n   *\r\n   * Block description for '<S2>/UD':\r\n   *\r\n   *  Store in Global RAM\r\n   */\r\n  arg_out = ((((arg_x - rtDW.UD_DSTATE) * arg_gain_k[1] + arg_x * arg_gain_k[0])\r\n              + arg_theta * arg_gain_k[2]) + (arg_theta - rtDW.UD_DSTATE_p) *\r\n             arg_gain_k[3]) + 0.0 * rtDW.DiscreteTimeIntegrator_DSTATE;\r\n\r\n  /* Update for UnitDelay: '<S2>/UD' incorporates:\r\n   *  Inport: '<Root>/x'\r\n   *\r\n   * Block description for '<S2>/UD':\r\n   *\r\n   *  Store in Global RAM\r\n   */\r\n  rtDW.UD_DSTATE = arg_x;\r\n\r\n  /* Update for UnitDelay: '<S1>/UD' incorporates:\r\n   *  Inport: '<Root>/theta'\r\n   *\r\n   * Block description for '<S1>/UD':\r\n   *\r\n   *  Store in Global RAM\r\n   */\r\n  rtDW.UD_DSTATE_p = arg_theta;\r\n\r\n  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' incorporates:\r\n   *  Inport: '<Root>/ref x'\r\n   *  Inport: '<Root>/x'\r\n   *  Sum: '<Root>/Sum'\r\n   */\r\n  rtDW.DiscreteTimeIntegrator_DSTATE += (arg_ref_x - arg_x) * 0.001;\r\n  return arg_out;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid StateFeedbackController_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"StateFeedbackController.h","type":"header","group":"model","path":"C:\\Users\\nopla\\dev\\InvertedPendulum\\MATLAB\\Models\\StateFeedbackController_ert_rtw","tag":"","groupDisplay":"モデル ファイル","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: StateFeedbackController.h\r\n *\r\n * Code generated for Simulink model 'StateFeedbackController'.\r\n *\r\n * Model version                  : 1.282\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Mon Jun 16 12:38:20 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef StateFeedbackController_h_\r\n#define StateFeedbackController_h_\r\n#ifndef StateFeedbackController_COMMON_INCLUDES_\r\n#define StateFeedbackController_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                            /* StateFeedbackController_COMMON_INCLUDES_ */\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T UD_DSTATE;                    /* '<S2>/UD' */\r\n  real_T UD_DSTATE_p;                  /* '<S1>/UD' */\r\n  real_T DiscreteTimeIntegrator_DSTATE;/* '<Root>/Discrete-Time Integrator' */\r\n} DW;\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* Model entry point functions */\r\nextern void StateFeedbackController_initialize(void);\r\n\r\n/* Customized model step function */\r\nextern real_T StateFeedbackController_step(real_T arg_ref_x, real_T arg_x,\r\n  real_T arg_theta, real_T arg_gain_k[4]);\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'StateFeedbackController'\r\n * '<S1>'   : 'StateFeedbackController/Difference'\r\n * '<S2>'   : 'StateFeedbackController/Difference1'\r\n */\r\n#endif                                 /* StateFeedbackController_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\nopla\\dev\\InvertedPendulum\\MATLAB\\Models\\StateFeedbackController_ert_rtw","tag":"","groupDisplay":"ユーティリティ ファイル","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'StateFeedbackController'.\r\n *\r\n * Model version                  : 1.282\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Mon Jun 16 12:38:20 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\nopla\\dev\\InvertedPendulum\\MATLAB\\Models\\StateFeedbackController_ert_rtw","tag":"","groupDisplay":"インターフェイス ファイル","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtmodel.h\r\n *\r\n * Code generated for Simulink model 'StateFeedbackController'.\r\n *\r\n * Model version                  : 1.282\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Mon Jun 16 12:38:20 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtmodel_h_\r\n#define rtmodel_h_\r\n#include \"StateFeedbackController.h\"\r\n#define MODEL_STEP_FCN_CONTROL_USED    1\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((void*) 0)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((void) 0)\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 /* rtmodel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};